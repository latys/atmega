
tongjie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00002f6c  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800308  00800308  00003108  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006fa  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000be3  00000000  00000000  00003822  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001241  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  000057fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068a  00000000  00000000  00005b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_16>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_31>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_36>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_41>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_46>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a8 e0       	ldi	r26, 0x08	; 8
      f4:	b3 e0       	ldi	r27, 0x03	; 3
      f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
      f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
      fa:	ad 3c       	cpi	r26, 0xCD	; 205
      fc:	b1 07       	cpc	r27, r17
      fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ec e6       	ldi	r30, 0x6C	; 108
     108:	ff e2       	ldi	r31, 0x2F	; 47
     10a:	02 c0       	rjmp	.+4      	; 0x110 <.do_copy_data_start>

0000010c <.do_copy_data_loop>:
     10c:	05 90       	lpm	r0, Z+
     10e:	0d 92       	st	X+, r0

00000110 <.do_copy_data_start>:
     110:	a8 30       	cpi	r26, 0x08	; 8
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <.do_copy_data_loop>
     116:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <main>
     11a:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <__vector_16>:
/*****************************************ÖÐ¶Ïº¯Êý**********************************************************************************/



ISR(TIMER1_CAPT_vect)
{
     122:	1f 92       	push	r1
     124:	0f 92       	push	r0
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	0f 92       	push	r0
     12a:	11 24       	eor	r1, r1
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
     130:	af 93       	push	r26
     132:	bf 93       	push	r27
     134:	df 93       	push	r29
     136:	cf 93       	push	r28
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	motor1Step++;
     13c:	80 91 c8 03 	lds	r24, 0x03C8
     140:	90 91 c9 03 	lds	r25, 0x03C9
     144:	a0 91 ca 03 	lds	r26, 0x03CA
     148:	b0 91 cb 03 	lds	r27, 0x03CB
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	a1 1d       	adc	r26, r1
     150:	b1 1d       	adc	r27, r1
     152:	80 93 c8 03 	sts	0x03C8, r24
     156:	90 93 c9 03 	sts	0x03C9, r25
     15a:	a0 93 ca 03 	sts	0x03CA, r26
     15e:	b0 93 cb 03 	sts	0x03CB, r27
	
	if(Motor1Status==MOTOR_FORWARD)
     162:	80 91 96 03 	lds	r24, 0x0396
     166:	81 33       	cpi	r24, 0x31	; 49
     168:	a1 f4       	brne	.+40     	; 0x192 <__vector_16+0x70>
	{
		Position1++;
     16a:	80 91 6e 03 	lds	r24, 0x036E
     16e:	90 91 6f 03 	lds	r25, 0x036F
     172:	a0 91 70 03 	lds	r26, 0x0370
     176:	b0 91 71 03 	lds	r27, 0x0371
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	a1 1d       	adc	r26, r1
     17e:	b1 1d       	adc	r27, r1
     180:	80 93 6e 03 	sts	0x036E, r24
     184:	90 93 6f 03 	sts	0x036F, r25
     188:	a0 93 70 03 	sts	0x0370, r26
     18c:	b0 93 71 03 	sts	0x0371, r27
     190:	17 c0       	rjmp	.+46     	; 0x1c0 <__vector_16+0x9e>
	}
	else if(Motor1Status==MOTOR_BACKWARD)
     192:	80 91 96 03 	lds	r24, 0x0396
     196:	80 33       	cpi	r24, 0x30	; 48
     198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_16+0x9e>
	{
		Position1--;
     19a:	80 91 6e 03 	lds	r24, 0x036E
     19e:	90 91 6f 03 	lds	r25, 0x036F
     1a2:	a0 91 70 03 	lds	r26, 0x0370
     1a6:	b0 91 71 03 	lds	r27, 0x0371
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	a1 09       	sbc	r26, r1
     1ae:	b1 09       	sbc	r27, r1
     1b0:	80 93 6e 03 	sts	0x036E, r24
     1b4:	90 93 6f 03 	sts	0x036F, r25
     1b8:	a0 93 70 03 	sts	0x0370, r26
     1bc:	b0 93 71 03 	sts	0x0371, r27
	}

}
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	8f 93       	push	r24
     1e2:	9f 93       	push	r25
     1e4:	af 93       	push	r26
     1e6:	bf 93       	push	r27
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
	motor2Step++;
     1f0:	80 91 ba 03 	lds	r24, 0x03BA
     1f4:	90 91 bb 03 	lds	r25, 0x03BB
     1f8:	a0 91 bc 03 	lds	r26, 0x03BC
     1fc:	b0 91 bd 03 	lds	r27, 0x03BD
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	a1 1d       	adc	r26, r1
     204:	b1 1d       	adc	r27, r1
     206:	80 93 ba 03 	sts	0x03BA, r24
     20a:	90 93 bb 03 	sts	0x03BB, r25
     20e:	a0 93 bc 03 	sts	0x03BC, r26
     212:	b0 93 bd 03 	sts	0x03BD, r27
		if(Motor2Status==MOTOR_FORWARD)
     216:	80 91 88 03 	lds	r24, 0x0388
     21a:	81 33       	cpi	r24, 0x31	; 49
     21c:	a1 f4       	brne	.+40     	; 0x246 <__vector_31+0x70>
	{
		Position2++;
     21e:	80 91 0f 03 	lds	r24, 0x030F
     222:	90 91 10 03 	lds	r25, 0x0310
     226:	a0 91 11 03 	lds	r26, 0x0311
     22a:	b0 91 12 03 	lds	r27, 0x0312
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	a1 1d       	adc	r26, r1
     232:	b1 1d       	adc	r27, r1
     234:	80 93 0f 03 	sts	0x030F, r24
     238:	90 93 10 03 	sts	0x0310, r25
     23c:	a0 93 11 03 	sts	0x0311, r26
     240:	b0 93 12 03 	sts	0x0312, r27
     244:	17 c0       	rjmp	.+46     	; 0x274 <__vector_31+0x9e>
	}
	else if(Motor2Status==MOTOR_BACKWARD)
     246:	80 91 88 03 	lds	r24, 0x0388
     24a:	80 33       	cpi	r24, 0x30	; 48
     24c:	99 f4       	brne	.+38     	; 0x274 <__vector_31+0x9e>
	{
		Position2--;
     24e:	80 91 0f 03 	lds	r24, 0x030F
     252:	90 91 10 03 	lds	r25, 0x0310
     256:	a0 91 11 03 	lds	r26, 0x0311
     25a:	b0 91 12 03 	lds	r27, 0x0312
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	a1 09       	sbc	r26, r1
     262:	b1 09       	sbc	r27, r1
     264:	80 93 0f 03 	sts	0x030F, r24
     268:	90 93 10 03 	sts	0x0310, r25
     26c:	a0 93 11 03 	sts	0x0311, r26
     270:	b0 93 12 03 	sts	0x0312, r27
	}

}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	bf 91       	pop	r27
     27a:	af 91       	pop	r26
     27c:	9f 91       	pop	r25
     27e:	8f 91       	pop	r24
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_41>:

ISR(TIMER4_CAPT_vect)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	8f 93       	push	r24
     296:	9f 93       	push	r25
     298:	af 93       	push	r26
     29a:	bf 93       	push	r27
     29c:	df 93       	push	r29
     29e:	cf 93       	push	r28
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	motor3Step++;
     2a4:	80 91 25 03 	lds	r24, 0x0325
     2a8:	90 91 26 03 	lds	r25, 0x0326
     2ac:	a0 91 27 03 	lds	r26, 0x0327
     2b0:	b0 91 28 03 	lds	r27, 0x0328
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
     2ba:	80 93 25 03 	sts	0x0325, r24
     2be:	90 93 26 03 	sts	0x0326, r25
     2c2:	a0 93 27 03 	sts	0x0327, r26
     2c6:	b0 93 28 03 	sts	0x0328, r27
	if(Motor3Status==MOTOR_FORWARD)
     2ca:	80 91 38 03 	lds	r24, 0x0338
     2ce:	81 33       	cpi	r24, 0x31	; 49
     2d0:	a1 f4       	brne	.+40     	; 0x2fa <__vector_41+0x70>
	{
		Position3++;
     2d2:	80 91 8e 03 	lds	r24, 0x038E
     2d6:	90 91 8f 03 	lds	r25, 0x038F
     2da:	a0 91 90 03 	lds	r26, 0x0390
     2de:	b0 91 91 03 	lds	r27, 0x0391
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	a1 1d       	adc	r26, r1
     2e6:	b1 1d       	adc	r27, r1
     2e8:	80 93 8e 03 	sts	0x038E, r24
     2ec:	90 93 8f 03 	sts	0x038F, r25
     2f0:	a0 93 90 03 	sts	0x0390, r26
     2f4:	b0 93 91 03 	sts	0x0391, r27
     2f8:	17 c0       	rjmp	.+46     	; 0x328 <__vector_41+0x9e>
	}
	else if(Motor3Status==MOTOR_BACKWARD)
     2fa:	80 91 38 03 	lds	r24, 0x0338
     2fe:	80 33       	cpi	r24, 0x30	; 48
     300:	99 f4       	brne	.+38     	; 0x328 <__vector_41+0x9e>
	{
		Position3--;
     302:	80 91 8e 03 	lds	r24, 0x038E
     306:	90 91 8f 03 	lds	r25, 0x038F
     30a:	a0 91 90 03 	lds	r26, 0x0390
     30e:	b0 91 91 03 	lds	r27, 0x0391
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	a1 09       	sbc	r26, r1
     316:	b1 09       	sbc	r27, r1
     318:	80 93 8e 03 	sts	0x038E, r24
     31c:	90 93 8f 03 	sts	0x038F, r25
     320:	a0 93 90 03 	sts	0x0390, r26
     324:	b0 93 91 03 	sts	0x0391, r27
	}

}
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	8f 93       	push	r24
     34a:	9f 93       	push	r25
     34c:	af 93       	push	r26
     34e:	bf 93       	push	r27
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	motor4Step++;
     358:	80 91 be 03 	lds	r24, 0x03BE
     35c:	90 91 bf 03 	lds	r25, 0x03BF
     360:	a0 91 c0 03 	lds	r26, 0x03C0
     364:	b0 91 c1 03 	lds	r27, 0x03C1
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	a1 1d       	adc	r26, r1
     36c:	b1 1d       	adc	r27, r1
     36e:	80 93 be 03 	sts	0x03BE, r24
     372:	90 93 bf 03 	sts	0x03BF, r25
     376:	a0 93 c0 03 	sts	0x03C0, r26
     37a:	b0 93 c1 03 	sts	0x03C1, r27
	if(Motor4Status==MOTOR_FORWARD)
     37e:	80 91 39 03 	lds	r24, 0x0339
     382:	81 33       	cpi	r24, 0x31	; 49
     384:	a1 f4       	brne	.+40     	; 0x3ae <__vector_46+0x70>
	{
		Position4++;
     386:	80 91 8a 03 	lds	r24, 0x038A
     38a:	90 91 8b 03 	lds	r25, 0x038B
     38e:	a0 91 8c 03 	lds	r26, 0x038C
     392:	b0 91 8d 03 	lds	r27, 0x038D
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	a1 1d       	adc	r26, r1
     39a:	b1 1d       	adc	r27, r1
     39c:	80 93 8a 03 	sts	0x038A, r24
     3a0:	90 93 8b 03 	sts	0x038B, r25
     3a4:	a0 93 8c 03 	sts	0x038C, r26
     3a8:	b0 93 8d 03 	sts	0x038D, r27
     3ac:	17 c0       	rjmp	.+46     	; 0x3dc <__vector_46+0x9e>
	}
	else if(Motor4Status==MOTOR_BACKWARD)
     3ae:	80 91 39 03 	lds	r24, 0x0339
     3b2:	80 33       	cpi	r24, 0x30	; 48
     3b4:	99 f4       	brne	.+38     	; 0x3dc <__vector_46+0x9e>
	{
		Position4--;
     3b6:	80 91 8a 03 	lds	r24, 0x038A
     3ba:	90 91 8b 03 	lds	r25, 0x038B
     3be:	a0 91 8c 03 	lds	r26, 0x038C
     3c2:	b0 91 8d 03 	lds	r27, 0x038D
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	a1 09       	sbc	r26, r1
     3ca:	b1 09       	sbc	r27, r1
     3cc:	80 93 8a 03 	sts	0x038A, r24
     3d0:	90 93 8b 03 	sts	0x038B, r25
     3d4:	a0 93 8c 03 	sts	0x038C, r26
     3d8:	b0 93 8d 03 	sts	0x038D, r27
	}

}
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <__vector_36>:


ISR(USART1_RX_vect)
   {
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	0f 92       	push	r0
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
    unsigned char temp;
	
	temp=UDR1;
     40e:	ee ec       	ldi	r30, 0xCE	; 206
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	89 83       	std	Y+1, r24	; 0x01
	UART1_RECV_BUFFER[UART1_RECV_INDEX]=temp;
     416:	80 91 09 03 	lds	r24, 0x0309
     41a:	88 2f       	mov	r24, r24
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	ed 5e       	subi	r30, 0xED	; 237
     422:	fc 4f       	sbci	r31, 0xFC	; 252
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	80 83       	st	Z, r24
	
	if(UART1_RECV_INDEX==3)
     428:	80 91 09 03 	lds	r24, 0x0309
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	31 f4       	brne	.+12     	; 0x43c <__vector_36+0x4a>
	   {
	     UART1_RECV_FLAG=1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 44 03 	sts	0x0344, r24
		 UART1_RECV_INDEX=0;
     436:	10 92 09 03 	sts	0x0309, r1
     43a:	07 c0       	rjmp	.+14     	; 0x44a <__vector_36+0x58>
	   
	   }
	   
	 else
	 {
		 UART1_RECV_INDEX++;
     43c:	80 91 09 03 	lds	r24, 0x0309
     440:	8f 5f       	subi	r24, 0xFF	; 255
     442:	80 93 09 03 	sts	0x0309, r24
		 UART1_RECV_FLAG=0;
     446:	10 92 44 03 	sts	0x0344, r1
	else
	   {	 
	   global_232_receive_buffer[0]=UDR1;
       global_yon_232_receive=TRUE;     
	   }*/
   }
     44a:	0f 90       	pop	r0
     44c:	cf 91       	pop	r28
     44e:	df 91       	pop	r29
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <__vector_25>:


ISR(USART0_RX_vect)
    {
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	ef 93       	push	r30
     472:	ff 93       	push	r31
     474:	df 93       	push	r29
     476:	cf 93       	push	r28
     478:	0f 92       	push	r0
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
    unsigned char temp;

	temp=UDR0;
     47e:	e6 ec       	ldi	r30, 0xC6	; 198
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	89 83       	std	Y+1, r24	; 0x01
	UART0_RECV_BUFFER[UART0_RECV_INDEX]=temp;
     486:	80 91 08 03 	lds	r24, 0x0308
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	e9 56       	subi	r30, 0x69	; 105
     492:	fc 4f       	sbci	r31, 0xFC	; 252
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	80 83       	st	Z, r24
	if(temp==0x0D)
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	8d 30       	cpi	r24, 0x0D	; 13
     49c:	31 f4       	brne	.+12     	; 0x4aa <__vector_25+0x48>
	{
		UART0_RECV_FLAG=1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 59 03 	sts	0x0359, r24
		UART0_RECV_INDEX=0;
     4a4:	10 92 08 03 	sts	0x0308, r1
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <__vector_25+0x56>
	}
	else
	{
		
		UART0_RECV_INDEX++;
     4aa:	80 91 08 03 	lds	r24, 0x0308
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
     4b0:	80 93 08 03 	sts	0x0308, r24
		UART0_RECV_FLAG=0;
     4b4:	10 92 59 03 	sts	0x0359, r1
	}


   }
     4b8:	0f 90       	pop	r0
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	ff 91       	pop	r31
     4c0:	ef 91       	pop	r30
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <USART0_Init>:
/************************************************************************************************************************************/
void USART0_Init( unsigned int ubrr){
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <USART0_Init+0x6>
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	9a 83       	std	Y+2, r25	; 0x02
     4dc:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     4de:	e5 ec       	ldi	r30, 0xC5	; 197
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	89 2f       	mov	r24, r25
     4e8:	99 27       	eor	r25, r25
     4ea:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr;
     4ec:	e4 ec       	ldi	r30, 0xC4	; 196
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	80 83       	st	Z, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<7);  //ÔÊÐíÖÐ¶Ï
     4f4:	e1 ec       	ldi	r30, 0xC1	; 193
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	88 e9       	ldi	r24, 0x98	; 152
     4fa:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
     4fc:	e2 ec       	ldi	r30, 0xC2	; 194
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	86 e0       	ldi	r24, 0x06	; 6
     502:	80 83       	st	Z, r24
} // USART_Init
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	08 95       	ret

0000050e <USART0_Transmit>:




void USART0_Transmit( unsigned char data )
{
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	0f 92       	push	r0
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     51a:	e0 ec       	ldi	r30, 0xC0	; 192
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	80 72       	andi	r24, 0x20	; 32
     526:	90 70       	andi	r25, 0x00	; 0
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	b9 f3       	breq	.-18     	; 0x51a <USART0_Transmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     52c:	e6 ec       	ldi	r30, 0xC6	; 198
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	80 83       	st	Z, r24
}
     534:	0f 90       	pop	r0
     536:	cf 91       	pop	r28
     538:	df 91       	pop	r29
     53a:	08 95       	ret

0000053c <USART1_Init>:

void USART1_Init( unsigned int ubrr){
     53c:	df 93       	push	r29
     53e:	cf 93       	push	r28
     540:	00 d0       	rcall	.+0      	; 0x542 <USART1_Init+0x6>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     54a:	ed ec       	ldi	r30, 0xCD	; 205
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	89 2f       	mov	r24, r25
     554:	99 27       	eor	r25, r25
     556:	80 83       	st	Z, r24
	UBRR1L = (unsigned char)ubrr;
     558:	ec ec       	ldi	r30, 0xCC	; 204
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	80 83       	st	Z, r24

	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<7);  //ÔÊÐíÖÐ¶Ï
     560:	e9 ec       	ldi	r30, 0xC9	; 201
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	88 e9       	ldi	r24, 0x98	; 152
     566:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = 0x06;
     568:	ea ec       	ldi	r30, 0xCA	; 202
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	86 e0       	ldi	r24, 0x06	; 6
     56e:	80 83       	st	Z, r24
} // USART_Init
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	08 95       	ret

0000057a <USART1_Transmit>:

void USART1_Transmit( unsigned char data )
{
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	0f 92       	push	r0
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     586:	e8 ec       	ldi	r30, 0xC8	; 200
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	80 72       	andi	r24, 0x20	; 32
     592:	90 70       	andi	r25, 0x00	; 0
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	b9 f3       	breq	.-18     	; 0x586 <USART1_Transmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
     598:	ee ec       	ldi	r30, 0xCE	; 206
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	80 83       	st	Z, r24
}
     5a0:	0f 90       	pop	r0
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	08 95       	ret

000005a8 <motor1_start>:


/***************************************motor1********************************************************************/
void motor1_start(char direct)
{
     5a8:	df 93       	push	r29
     5aa:	cf 93       	push	r28
     5ac:	0f 92       	push	r0
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	89 83       	std	Y+1, r24	; 0x01

	motor1Step=0;
     5b4:	10 92 c8 03 	sts	0x03C8, r1
     5b8:	10 92 c9 03 	sts	0x03C9, r1
     5bc:	10 92 ca 03 	sts	0x03CA, r1
     5c0:	10 92 cb 03 	sts	0x03CB, r1
	
	OCR1AH=3;
     5c4:	e9 e8       	ldi	r30, 0x89	; 137
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	80 83       	st	Z, r24
	OCR1AL=255;
     5cc:	e8 e8       	ldi	r30, 0x88	; 136
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	80 83       	st	Z, r24
	//OCR1A = PULSE_WIDTH;
	DDRL |=(1<<2)|(1<<3) ;
     5d4:	aa e0       	ldi	r26, 0x0A	; 10
     5d6:	b1 e0       	ldi	r27, 0x01	; 1
     5d8:	ea e0       	ldi	r30, 0x0A	; 10
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	80 81       	ld	r24, Z
     5de:	8c 60       	ori	r24, 0x0C	; 12
     5e0:	8c 93       	st	X, r24
	
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	80 33       	cpi	r24, 0x30	; 48
     5e6:	41 f4       	brne	.+16     	; 0x5f8 <motor1_start+0x50>
		
		PORTL &=~(1<<3);
     5e8:	ab e0       	ldi	r26, 0x0B	; 11
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	eb e0       	ldi	r30, 0x0B	; 11
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	80 81       	ld	r24, Z
     5f2:	87 7f       	andi	r24, 0xF7	; 247
     5f4:	8c 93       	st	X, r24
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <motor1_start+0x64>
	else if(direct=='1')
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	81 33       	cpi	r24, 0x31	; 49
     5fc:	39 f4       	brne	.+14     	; 0x60c <motor1_start+0x64>
		PORTL |=(1<<3);
     5fe:	ab e0       	ldi	r26, 0x0B	; 11
     600:	b1 e0       	ldi	r27, 0x01	; 1
     602:	eb e0       	ldi	r30, 0x0B	; 11
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	80 81       	ld	r24, Z
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	8c 93       	st	X, r24

	PORTL |=(1<<2);     //enable
     60c:	ab e0       	ldi	r26, 0x0B	; 11
     60e:	b1 e0       	ldi	r27, 0x01	; 1
     610:	eb e0       	ldi	r30, 0x0B	; 11
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	80 81       	ld	r24, Z
     616:	84 60       	ori	r24, 0x04	; 4
     618:	8c 93       	st	X, r24
		
	TCCR1A|=1<<7;                 //Æô¶¯PWM
     61a:	a0 e8       	ldi	r26, 0x80	; 128
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	e0 e8       	ldi	r30, 0x80	; 128
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	80 68       	ori	r24, 0x80	; 128
     626:	8c 93       	st	X, r24
	PORTH &=0xFE<<5;            //LED
     628:	a2 e0       	ldi	r26, 0x02	; 2
     62a:	b1 e0       	ldi	r27, 0x01	; 1
     62c:	e2 e0       	ldi	r30, 0x02	; 2
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	80 81       	ld	r24, Z
     632:	80 7c       	andi	r24, 0xC0	; 192
     634:	8c 93       	st	X, r24
	
}
     636:	0f 90       	pop	r0
     638:	cf 91       	pop	r28
     63a:	df 91       	pop	r29
     63c:	08 95       	ret

0000063e <motor1_stop>:

void motor1_stop()
{    
     63e:	df 93       	push	r29
     640:	cf 93       	push	r28
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62

	PORTL &=~(1<<2);    //disable
     646:	ab e0       	ldi	r26, 0x0B	; 11
     648:	b1 e0       	ldi	r27, 0x01	; 1
     64a:	eb e0       	ldi	r30, 0x0B	; 11
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	80 81       	ld	r24, Z
     650:	8b 7f       	andi	r24, 0xFB	; 251
     652:	8c 93       	st	X, r24
	TCCR1A &=~(1<<7);                 //Í£Ö¹PWM
     654:	a0 e8       	ldi	r26, 0x80	; 128
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	e0 e8       	ldi	r30, 0x80	; 128
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	8f 77       	andi	r24, 0x7F	; 127
     660:	8c 93       	st	X, r24
	PORTH |=0x01<<5;            //LED
     662:	a2 e0       	ldi	r26, 0x02	; 2
     664:	b1 e0       	ldi	r27, 0x01	; 1
     666:	e2 e0       	ldi	r30, 0x02	; 2
     668:	f1 e0       	ldi	r31, 0x01	; 1
     66a:	80 81       	ld	r24, Z
     66c:	80 62       	ori	r24, 0x20	; 32
     66e:	8c 93       	st	X, r24

}
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	08 95       	ret

00000676 <motor1_slow>:

void motor1_slow()
{
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
	OCR1BH= PULSE_WIDTH/2>>8;
     67e:	eb e8       	ldi	r30, 0x8B	; 139
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	10 82       	st	Z, r1
	OCR1BL = PULSE_WIDTH/2;	//Load Pulse width
     684:	ea e8       	ldi	r30, 0x8A	; 138
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	80 83       	st	Z, r24
	
	
	PORTL |=(1<<2);     //enable
     68c:	ab e0       	ldi	r26, 0x0B	; 11
     68e:	b1 e0       	ldi	r27, 0x01	; 1
     690:	eb e0       	ldi	r30, 0x0B	; 11
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	80 81       	ld	r24, Z
     696:	84 60       	ori	r24, 0x04	; 4
     698:	8c 93       	st	X, r24
	TCCR1A|=1<<7;                 //Æô¶¯PWM
     69a:	a0 e8       	ldi	r26, 0x80	; 128
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e0 e8       	ldi	r30, 0x80	; 128
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	80 68       	ori	r24, 0x80	; 128
     6a6:	8c 93       	st	X, r24

}
     6a8:	cf 91       	pop	r28
     6aa:	df 91       	pop	r29
     6ac:	08 95       	ret

000006ae <motor1_speed>:

void motor1_speed(int pwm)
{
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <motor1_speed+0x6>
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	9a 83       	std	Y+2, r25	; 0x02
     6ba:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH= pwm>>8;
     6bc:	e9 e8       	ldi	r30, 0x89	; 137
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	89 2f       	mov	r24, r25
     6c6:	99 0f       	add	r25, r25
     6c8:	99 0b       	sbc	r25, r25
     6ca:	80 83       	st	Z, r24
	OCR1AL = pwm;	//Load Pulse width
     6cc:	e8 e8       	ldi	r30, 0x88	; 136
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	80 83       	st	Z, r24
	//OCR1AH= 3;
	//OCR1AL = 255;	//Load Pulse width
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <motor2_start>:
/***************************************motor2********************************************************************/




void motor2_start(char direct){
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	0f 92       	push	r0
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	89 83       	std	Y+1, r24	; 0x01


	motor2Step=0;
     6ea:	10 92 ba 03 	sts	0x03BA, r1
     6ee:	10 92 bb 03 	sts	0x03BB, r1
     6f2:	10 92 bc 03 	sts	0x03BC, r1
     6f6:	10 92 bd 03 	sts	0x03BD, r1
	OCR1BH=3;
     6fa:	eb e8       	ldi	r30, 0x8B	; 139
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	80 83       	st	Z, r24
	OCR1BL=255;
     702:	ea e8       	ldi	r30, 0x8A	; 138
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	80 83       	st	Z, r24
	//OCR1B = PULSE_WIDTH;
	DDRL |=(1<<4)|(1<<5) ;
     70a:	aa e0       	ldi	r26, 0x0A	; 10
     70c:	b1 e0       	ldi	r27, 0x01	; 1
     70e:	ea e0       	ldi	r30, 0x0A	; 10
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	80 81       	ld	r24, Z
     714:	80 63       	ori	r24, 0x30	; 48
     716:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	80 33       	cpi	r24, 0x30	; 48
     71c:	41 f4       	brne	.+16     	; 0x72e <motor2_start+0x50>
		PORTL &=~(1<<5);
     71e:	ab e0       	ldi	r26, 0x0B	; 11
     720:	b1 e0       	ldi	r27, 0x01	; 1
     722:	eb e0       	ldi	r30, 0x0B	; 11
     724:	f1 e0       	ldi	r31, 0x01	; 1
     726:	80 81       	ld	r24, Z
     728:	8f 7d       	andi	r24, 0xDF	; 223
     72a:	8c 93       	st	X, r24
     72c:	0a c0       	rjmp	.+20     	; 0x742 <motor2_start+0x64>
	else if(direct=='1')
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	81 33       	cpi	r24, 0x31	; 49
     732:	39 f4       	brne	.+14     	; 0x742 <motor2_start+0x64>
		PORTL |=(1<<5);	
     734:	ab e0       	ldi	r26, 0x0B	; 11
     736:	b1 e0       	ldi	r27, 0x01	; 1
     738:	eb e0       	ldi	r30, 0x0B	; 11
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	80 81       	ld	r24, Z
     73e:	80 62       	ori	r24, 0x20	; 32
     740:	8c 93       	st	X, r24
	
	PORTL |=(1<<4);     //enable
     742:	ab e0       	ldi	r26, 0x0B	; 11
     744:	b1 e0       	ldi	r27, 0x01	; 1
     746:	eb e0       	ldi	r30, 0x0B	; 11
     748:	f1 e0       	ldi	r31, 0x01	; 1
     74a:	80 81       	ld	r24, Z
     74c:	80 61       	ori	r24, 0x10	; 16
     74e:	8c 93       	st	X, r24
	

	TCCR1A|=1<<5;                //Æô¶¯PWM
     750:	a0 e8       	ldi	r26, 0x80	; 128
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e0 e8       	ldi	r30, 0x80	; 128
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	80 81       	ld	r24, Z
     75a:	80 62       	ori	r24, 0x20	; 32
     75c:	8c 93       	st	X, r24
	PORTH &=0xFE<<6;
     75e:	a2 e0       	ldi	r26, 0x02	; 2
     760:	b1 e0       	ldi	r27, 0x01	; 1
     762:	e2 e0       	ldi	r30, 0x02	; 2
     764:	f1 e0       	ldi	r31, 0x01	; 1
     766:	80 81       	ld	r24, Z
     768:	80 78       	andi	r24, 0x80	; 128
     76a:	8c 93       	st	X, r24
}
     76c:	0f 90       	pop	r0
     76e:	cf 91       	pop	r28
     770:	df 91       	pop	r29
     772:	08 95       	ret

00000774 <motor2_stop>:

void motor2_stop()
{
     774:	df 93       	push	r29
     776:	cf 93       	push	r28
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
	PORTL &=~(1<<4);
     77c:	ab e0       	ldi	r26, 0x0B	; 11
     77e:	b1 e0       	ldi	r27, 0x01	; 1
     780:	eb e0       	ldi	r30, 0x0B	; 11
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	80 81       	ld	r24, Z
     786:	8f 7e       	andi	r24, 0xEF	; 239
     788:	8c 93       	st	X, r24
	TCCR1A &=~(1<<5);                 //Í£Ö¹PWM
     78a:	a0 e8       	ldi	r26, 0x80	; 128
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e0 e8       	ldi	r30, 0x80	; 128
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	8f 7d       	andi	r24, 0xDF	; 223
     796:	8c 93       	st	X, r24
	 
	PORTH |=0x01<<6;   
     798:	a2 e0       	ldi	r26, 0x02	; 2
     79a:	b1 e0       	ldi	r27, 0x01	; 1
     79c:	e2 e0       	ldi	r30, 0x02	; 2
     79e:	f1 e0       	ldi	r31, 0x01	; 1
     7a0:	80 81       	ld	r24, Z
     7a2:	80 64       	ori	r24, 0x40	; 64
     7a4:	8c 93       	st	X, r24

}
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	08 95       	ret

000007ac <motor2_slow>:

void motor2_slow()
{
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = PULSE_WIDTH/2>>8;	//Load Pulse width
     7b4:	e9 e8       	ldi	r30, 0x89	; 137
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	10 82       	st	Z, r1
	OCR1AL = PULSE_WIDTH/2;	//Load Pulse width
     7ba:	e8 e8       	ldi	r30, 0x88	; 136
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	80 83       	st	Z, r24
	PORTL |=(1<<4);     //enable
     7c2:	ab e0       	ldi	r26, 0x0B	; 11
     7c4:	b1 e0       	ldi	r27, 0x01	; 1
     7c6:	eb e0       	ldi	r30, 0x0B	; 11
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	80 81       	ld	r24, Z
     7cc:	80 61       	ori	r24, 0x10	; 16
     7ce:	8c 93       	st	X, r24
	TCCR1A|=1<<5;
     7d0:	a0 e8       	ldi	r26, 0x80	; 128
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	e0 e8       	ldi	r30, 0x80	; 128
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	8c 93       	st	X, r24
	

}
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <motor2_speed>:

void motor2_speed(int pwm)
{
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <motor2_speed+0x6>
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
     7ee:	9a 83       	std	Y+2, r25	; 0x02
     7f0:	89 83       	std	Y+1, r24	; 0x01
	
	OCR1BH= pwm>>8;
     7f2:	eb e8       	ldi	r30, 0x8B	; 139
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	89 2f       	mov	r24, r25
     7fc:	99 0f       	add	r25, r25
     7fe:	99 0b       	sbc	r25, r25
     800:	80 83       	st	Z, r24
	OCR1BL = pwm;	//Load Pulse width
     802:	ea e8       	ldi	r30, 0x8A	; 138
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	80 83       	st	Z, r24

}
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <motor3_start>:
/***************************************motor3********************************************************************/




void motor3_start(char direct){
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	2f 97       	sbiw	r28, 0x0f	; 15
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	8f 87       	std	Y+15, r24	; 0x0f


	motor3Step=0;
     82a:	10 92 25 03 	sts	0x0325, r1
     82e:	10 92 26 03 	sts	0x0326, r1
     832:	10 92 27 03 	sts	0x0327, r1
     836:	10 92 28 03 	sts	0x0328, r1
	
	//OCR3A = PULSE_WIDTH;
	DDRL |=(1<<6)|(1<<7) ;
     83a:	aa e0       	ldi	r26, 0x0A	; 10
     83c:	b1 e0       	ldi	r27, 0x01	; 1
     83e:	ea e0       	ldi	r30, 0x0A	; 10
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	80 81       	ld	r24, Z
     844:	80 6c       	ori	r24, 0xC0	; 192
     846:	8c 93       	st	X, r24

		OCR3AH=0;
     848:	e9 e9       	ldi	r30, 0x99	; 153
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	10 82       	st	Z, r1
	OCR3AL=64;
     84e:	e8 e9       	ldi	r30, 0x98	; 152
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 e4       	ldi	r24, 0x40	; 64
     854:	80 83       	st	Z, r24

		PORTL |=(1<<6);     //enable
     856:	ab e0       	ldi	r26, 0x0B	; 11
     858:	b1 e0       	ldi	r27, 0x01	; 1
     85a:	eb e0       	ldi	r30, 0x0B	; 11
     85c:	f1 e0       	ldi	r31, 0x01	; 1
     85e:	80 81       	ld	r24, Z
     860:	80 64       	ori	r24, 0x40	; 64
     862:	8c 93       	st	X, r24

	
		//ÉèÖÃ·½Ïò
	if(direct=='0')
     864:	8f 85       	ldd	r24, Y+15	; 0x0f
     866:	80 33       	cpi	r24, 0x30	; 48
     868:	41 f4       	brne	.+16     	; 0x87a <motor3_start+0x66>
		PORTL &=~(1<<7);
     86a:	ab e0       	ldi	r26, 0x0B	; 11
     86c:	b1 e0       	ldi	r27, 0x01	; 1
     86e:	eb e0       	ldi	r30, 0x0B	; 11
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	80 81       	ld	r24, Z
     874:	8f 77       	andi	r24, 0x7F	; 127
     876:	8c 93       	st	X, r24
     878:	84 c0       	rjmp	.+264    	; 0x982 <motor3_start+0x16e>
	else if(direct=='1')
     87a:	8f 85       	ldd	r24, Y+15	; 0x0f
     87c:	81 33       	cpi	r24, 0x31	; 49
     87e:	09 f0       	breq	.+2      	; 0x882 <motor3_start+0x6e>
     880:	80 c0       	rjmp	.+256    	; 0x982 <motor3_start+0x16e>
	{
			PORTL &=~(1<<7);
     882:	ab e0       	ldi	r26, 0x0B	; 11
     884:	b1 e0       	ldi	r27, 0x01	; 1
     886:	eb e0       	ldi	r30, 0x0B	; 11
     888:	f1 e0       	ldi	r31, 0x01	; 1
     88a:	80 81       	ld	r24, Z
     88c:	8f 77       	andi	r24, 0x7F	; 127
     88e:	8c 93       	st	X, r24
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	aa e7       	ldi	r26, 0x7A	; 122
     896:	b4 e4       	ldi	r27, 0x44	; 68
     898:	8b 87       	std	Y+11, r24	; 0x0b
     89a:	9c 87       	std	Y+12, r25	; 0x0c
     89c:	ad 87       	std	Y+13, r26	; 0x0d
     89e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a0:	6b 85       	ldd	r22, Y+11	; 0x0b
     8a2:	7c 85       	ldd	r23, Y+12	; 0x0c
     8a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     8a8:	2d ec       	ldi	r18, 0xCD	; 205
     8aa:	3c ec       	ldi	r19, 0xCC	; 204
     8ac:	4c e2       	ldi	r20, 0x2C	; 44
     8ae:	55 e4       	ldi	r21, 0x45	; 69
     8b0:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	8f 83       	std	Y+7, r24	; 0x07
     8ba:	98 87       	std	Y+8, r25	; 0x08
     8bc:	a9 87       	std	Y+9, r26	; 0x09
     8be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     8c0:	6f 81       	ldd	r22, Y+7	; 0x07
     8c2:	78 85       	ldd	r23, Y+8	; 0x08
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 e8       	ldi	r20, 0x80	; 128
     8ce:	5f e3       	ldi	r21, 0x3F	; 63
     8d0:	0e 94 42 14 	call	0x2884	; 0x2884 <__ltsf2>
     8d4:	88 23       	and	r24, r24
     8d6:	2c f4       	brge	.+10     	; 0x8e2 <motor3_start+0xce>
		__ticks = 1;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	9e 83       	std	Y+6, r25	; 0x06
     8de:	8d 83       	std	Y+5, r24	; 0x05
     8e0:	3f c0       	rjmp	.+126    	; 0x960 <motor3_start+0x14c>
	else if (__tmp > 65535)
     8e2:	6f 81       	ldd	r22, Y+7	; 0x07
     8e4:	78 85       	ldd	r23, Y+8	; 0x08
     8e6:	89 85       	ldd	r24, Y+9	; 0x09
     8e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	3f ef       	ldi	r19, 0xFF	; 255
     8ee:	4f e7       	ldi	r20, 0x7F	; 127
     8f0:	57 e4       	ldi	r21, 0x47	; 71
     8f2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__gtsf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	4c f5       	brge	.+82     	; 0x94c <motor3_start+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8fa:	6b 85       	ldd	r22, Y+11	; 0x0b
     8fc:	7c 85       	ldd	r23, Y+12	; 0x0c
     8fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     900:	9e 85       	ldd	r25, Y+14	; 0x0e
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e2       	ldi	r20, 0x20	; 32
     908:	51 e4       	ldi	r21, 0x41	; 65
     90a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	bc 01       	movw	r22, r24
     914:	cd 01       	movw	r24, r26
     916:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	9e 83       	std	Y+6, r25	; 0x06
     920:	8d 83       	std	Y+5, r24	; 0x05
     922:	0f c0       	rjmp	.+30     	; 0x942 <motor3_start+0x12e>
     924:	84 e1       	ldi	r24, 0x14	; 20
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	9c 83       	std	Y+4, r25	; 0x04
     92a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     92c:	8b 81       	ldd	r24, Y+3	; 0x03
     92e:	9c 81       	ldd	r25, Y+4	; 0x04
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <motor3_start+0x11c>
     934:	9c 83       	std	Y+4, r25	; 0x04
     936:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     938:	8d 81       	ldd	r24, Y+5	; 0x05
     93a:	9e 81       	ldd	r25, Y+6	; 0x06
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	9e 83       	std	Y+6, r25	; 0x06
     940:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     942:	8d 81       	ldd	r24, Y+5	; 0x05
     944:	9e 81       	ldd	r25, Y+6	; 0x06
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	69 f7       	brne	.-38     	; 0x924 <motor3_start+0x110>
     94a:	14 c0       	rjmp	.+40     	; 0x974 <motor3_start+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     94c:	6f 81       	ldd	r22, Y+7	; 0x07
     94e:	78 85       	ldd	r23, Y+8	; 0x08
     950:	89 85       	ldd	r24, Y+9	; 0x09
     952:	9a 85       	ldd	r25, Y+10	; 0x0a
     954:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixunssfsi>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	9e 83       	std	Y+6, r25	; 0x06
     95e:	8d 83       	std	Y+5, r24	; 0x05
     960:	8d 81       	ldd	r24, Y+5	; 0x05
     962:	9e 81       	ldd	r25, Y+6	; 0x06
     964:	9a 83       	std	Y+2, r25	; 0x02
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <motor3_start+0x158>
     970:	9a 83       	std	Y+2, r25	; 0x02
     972:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		PORTL |=(1<<7);
     974:	ab e0       	ldi	r26, 0x0B	; 11
     976:	b1 e0       	ldi	r27, 0x01	; 1
     978:	eb e0       	ldi	r30, 0x0B	; 11
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	80 81       	ld	r24, Z
     97e:	80 68       	ori	r24, 0x80	; 128
     980:	8c 93       	st	X, r24
	}


		
		
	TCCR3A|=1<<7;                 //Æô¶¯PWM
     982:	a0 e9       	ldi	r26, 0x90	; 144
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	e0 e9       	ldi	r30, 0x90	; 144
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	80 68       	ori	r24, 0x80	; 128
     98e:	8c 93       	st	X, r24

	PORTB &=0xFE<<0;
     990:	a5 e2       	ldi	r26, 0x25	; 37
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	e5 e2       	ldi	r30, 0x25	; 37
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	80 81       	ld	r24, Z
     99a:	8e 7f       	andi	r24, 0xFE	; 254
     99c:	8c 93       	st	X, r24

	
}
     99e:	2f 96       	adiw	r28, 0x0f	; 15
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	cf 91       	pop	r28
     9ac:	df 91       	pop	r29
     9ae:	08 95       	ret

000009b0 <motor3_stop>:

void motor3_stop()
{
     9b0:	df 93       	push	r29
     9b2:	cf 93       	push	r28
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
	PORTL&=~(1<<6);     //disble
     9b8:	ab e0       	ldi	r26, 0x0B	; 11
     9ba:	b1 e0       	ldi	r27, 0x01	; 1
     9bc:	eb e0       	ldi	r30, 0x0B	; 11
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	80 81       	ld	r24, Z
     9c2:	8f 7b       	andi	r24, 0xBF	; 191
     9c4:	8c 93       	st	X, r24
	TCCR3A &=~(1<<7);
     9c6:	a0 e9       	ldi	r26, 0x90	; 144
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e0 e9       	ldi	r30, 0x90	; 144
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 77       	andi	r24, 0x7F	; 127
     9d2:	8c 93       	st	X, r24
	
	PORTB |=0x01<<0;
     9d4:	a5 e2       	ldi	r26, 0x25	; 37
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e5 e2       	ldi	r30, 0x25	; 37
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	8c 93       	st	X, r24

}
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <motor3_slow>:

void motor3_slow()
{
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
	
	OCR3AH = PULSE_WIDTH/2>>8;
     9f0:	e9 e9       	ldi	r30, 0x99	; 153
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	10 82       	st	Z, r1
	OCR3AL = PULSE_WIDTH/2;	//Load Pulse width
     9f6:	e8 e9       	ldi	r30, 0x98	; 152
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	80 83       	st	Z, r24
	PORTL |=(1<<6);     //enable
     9fe:	ab e0       	ldi	r26, 0x0B	; 11
     a00:	b1 e0       	ldi	r27, 0x01	; 1
     a02:	eb e0       	ldi	r30, 0x0B	; 11
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	80 81       	ld	r24, Z
     a08:	80 64       	ori	r24, 0x40	; 64
     a0a:	8c 93       	st	X, r24
	TCCR3A|=1<<7;
     a0c:	a0 e9       	ldi	r26, 0x90	; 144
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	e0 e9       	ldi	r30, 0x90	; 144
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	80 68       	ori	r24, 0x80	; 128
     a18:	8c 93       	st	X, r24
}
     a1a:	cf 91       	pop	r28
     a1c:	df 91       	pop	r29
     a1e:	08 95       	ret

00000a20 <motor3_speed>:

void motor3_speed(int pwm)
{
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	00 d0       	rcall	.+0      	; 0xa26 <motor3_speed+0x6>
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	9a 83       	std	Y+2, r25	; 0x02
     a2c:	89 83       	std	Y+1, r24	; 0x01
	
	OCR3AH= pwm>>8;
     a2e:	e9 e9       	ldi	r30, 0x99	; 153
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
     a36:	89 2f       	mov	r24, r25
     a38:	99 0f       	add	r25, r25
     a3a:	99 0b       	sbc	r25, r25
     a3c:	80 83       	st	Z, r24
		
	OCR3AL = pwm;	//Load Pulse width
     a3e:	e8 e9       	ldi	r30, 0x98	; 152
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	80 83       	st	Z, r24

}
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	cf 91       	pop	r28
     a4c:	df 91       	pop	r29
     a4e:	08 95       	ret

00000a50 <motor4_start>:
/***************************************motor4********************************************************************/




void motor4_start(char direct){
     a50:	df 93       	push	r29
     a52:	cf 93       	push	r28
     a54:	0f 92       	push	r0
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	89 83       	std	Y+1, r24	; 0x01

	motor4Step=0;
     a5c:	10 92 be 03 	sts	0x03BE, r1
     a60:	10 92 bf 03 	sts	0x03BF, r1
     a64:	10 92 c0 03 	sts	0x03C0, r1
     a68:	10 92 c1 03 	sts	0x03C1, r1
	OCR3BH=3;
     a6c:	eb e9       	ldi	r30, 0x9B	; 155
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	80 83       	st	Z, r24
	OCR3BL=255;
     a74:	ea e9       	ldi	r30, 0x9A	; 154
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	80 83       	st	Z, r24
	//OCR3B = PULSE_WIDTH;
	DDRD |=(1<<0)|(1<<1) ;
     a7c:	aa e2       	ldi	r26, 0x2A	; 42
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	ea e2       	ldi	r30, 0x2A	; 42
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	83 60       	ori	r24, 0x03	; 3
     a88:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	80 33       	cpi	r24, 0x30	; 48
     a8e:	41 f4       	brne	.+16     	; 0xaa0 <motor4_start+0x50>
		PORTD &=~(1<<1);
     a90:	ab e2       	ldi	r26, 0x2B	; 43
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	eb e2       	ldi	r30, 0x2B	; 43
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	8d 7f       	andi	r24, 0xFD	; 253
     a9c:	8c 93       	st	X, r24
     a9e:	0a c0       	rjmp	.+20     	; 0xab4 <motor4_start+0x64>
	else if(direct=='1')
     aa0:	89 81       	ldd	r24, Y+1	; 0x01
     aa2:	81 33       	cpi	r24, 0x31	; 49
     aa4:	39 f4       	brne	.+14     	; 0xab4 <motor4_start+0x64>
		PORTD |=(1<<1);
     aa6:	ab e2       	ldi	r26, 0x2B	; 43
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	eb e2       	ldi	r30, 0x2B	; 43
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	82 60       	ori	r24, 0x02	; 2
     ab2:	8c 93       	st	X, r24
	
	PORTD |=(1<<0);     //enable
     ab4:	ab e2       	ldi	r26, 0x2B	; 43
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	eb e2       	ldi	r30, 0x2B	; 43
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	8c 93       	st	X, r24
		
		
	TCCR3A|=1<<5;
     ac2:	a0 e9       	ldi	r26, 0x90	; 144
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e0 e9       	ldi	r30, 0x90	; 144
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	80 62       	ori	r24, 0x20	; 32
     ace:	8c 93       	st	X, r24

	PORTB &=0xFE<<1;
     ad0:	a5 e2       	ldi	r26, 0x25	; 37
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	e5 e2       	ldi	r30, 0x25	; 37
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8c 7f       	andi	r24, 0xFC	; 252
     adc:	8c 93       	st	X, r24
	

	
}
     ade:	0f 90       	pop	r0
     ae0:	cf 91       	pop	r28
     ae2:	df 91       	pop	r29
     ae4:	08 95       	ret

00000ae6 <motor4_stop>:

void motor4_stop()
{
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
	PORTD &=~(1<<0);     //disble
     aee:	ab e2       	ldi	r26, 0x2B	; 43
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	eb e2       	ldi	r30, 0x2B	; 43
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	8c 93       	st	X, r24
	TCCR3A &=~(1<<5);
     afc:	a0 e9       	ldi	r26, 0x90	; 144
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e0 e9       	ldi	r30, 0x90	; 144
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	8f 7d       	andi	r24, 0xDF	; 223
     b08:	8c 93       	st	X, r24
	
	PORTB |=0x01<<1;
     b0a:	a5 e2       	ldi	r26, 0x25	; 37
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	e5 e2       	ldi	r30, 0x25	; 37
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	82 60       	ori	r24, 0x02	; 2
     b16:	8c 93       	st	X, r24

}
     b18:	cf 91       	pop	r28
     b1a:	df 91       	pop	r29
     b1c:	08 95       	ret

00000b1e <motor4_slow>:

void motor4_slow()
{
     b1e:	df 93       	push	r29
     b20:	cf 93       	push	r28
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
	
	OCR3B = PULSE_WIDTH/2;	//Load Pulse width
     b26:	ea e9       	ldi	r30, 0x9A	; 154
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	91 83       	std	Z+1, r25	; 0x01
     b30:	80 83       	st	Z, r24
	PORTD |=(1<<0);    //enable
     b32:	ab e2       	ldi	r26, 0x2B	; 43
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	eb e2       	ldi	r30, 0x2B	; 43
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	8c 93       	st	X, r24
	TCCR3A|=1<<5;
     b40:	a0 e9       	ldi	r26, 0x90	; 144
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	e0 e9       	ldi	r30, 0x90	; 144
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	80 62       	ori	r24, 0x20	; 32
     b4c:	8c 93       	st	X, r24
}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <motor4_speed>:

void motor4_speed(int pwm)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	00 d0       	rcall	.+0      	; 0xb5a <motor4_speed+0x6>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	89 83       	std	Y+1, r24	; 0x01
	
	OCR3BH= pwm>>8;
     b62:	eb e9       	ldi	r30, 0x9B	; 155
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	89 81       	ldd	r24, Y+1	; 0x01
     b68:	9a 81       	ldd	r25, Y+2	; 0x02
     b6a:	89 2f       	mov	r24, r25
     b6c:	99 0f       	add	r25, r25
     b6e:	99 0b       	sbc	r25, r25
     b70:	80 83       	st	Z, r24
		
	OCR3BL = pwm;	//Load Pulse width
     b72:	ea e9       	ldi	r30, 0x9A	; 154
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	80 83       	st	Z, r24

}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <motor5_start>:
/***************************************motor5********************************************************************/




void motor5_start(char direct){
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01

	motor5Step=0;
     b90:	10 92 7c 03 	sts	0x037C, r1
     b94:	10 92 7d 03 	sts	0x037D, r1
     b98:	10 92 7e 03 	sts	0x037E, r1
     b9c:	10 92 7f 03 	sts	0x037F, r1
	
	OCR4AH=3;
     ba0:	e9 ea       	ldi	r30, 0xA9	; 169
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	80 83       	st	Z, r24
	OCR4AL=255;
     ba8:	e8 ea       	ldi	r30, 0xA8	; 168
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	80 83       	st	Z, r24
	//OCR4A = PULSE_WIDTH;
	DDRD |=(1<<6)|(1<<7) ;
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 6c       	ori	r24, 0xC0	; 192
     bbc:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	80 33       	cpi	r24, 0x30	; 48
     bc2:	41 f4       	brne	.+16     	; 0xbd4 <motor5_start+0x50>
		PORTD &=~(1<<7);
     bc4:	ab e2       	ldi	r26, 0x2B	; 43
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	eb e2       	ldi	r30, 0x2B	; 43
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	8c 93       	st	X, r24
     bd2:	0a c0       	rjmp	.+20     	; 0xbe8 <motor5_start+0x64>
	else if(direct=='1')
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	81 33       	cpi	r24, 0x31	; 49
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <motor5_start+0x64>
		PORTD |=(1<<7);
     bda:	ab e2       	ldi	r26, 0x2B	; 43
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e2       	ldi	r30, 0x2B	; 43
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	8c 93       	st	X, r24
	
	PORTD |=(1<<6);     //enable
     be8:	ab e2       	ldi	r26, 0x2B	; 43
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8c 93       	st	X, r24
	
	
	TCCR4A|=1<<7;
     bf6:	a0 ea       	ldi	r26, 0xA0	; 160
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e0 ea       	ldi	r30, 0xA0	; 160
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24
	PORTB &=0xFE<<2;
     c04:	a5 e2       	ldi	r26, 0x25	; 37
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e2       	ldi	r30, 0x25	; 37
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 7f       	andi	r24, 0xF8	; 248
     c10:	8c 93       	st	X, r24
}
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <motor5_stop>:

void motor5_stop()
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
	
	PORTD &=~(1<<6);
     c22:	ab e2       	ldi	r26, 0x2B	; 43
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	eb e2       	ldi	r30, 0x2B	; 43
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8f 7b       	andi	r24, 0xBF	; 191
     c2e:	8c 93       	st	X, r24
	TCCR4A &=~(1<<7);
     c30:	a0 ea       	ldi	r26, 0xA0	; 160
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e0 ea       	ldi	r30, 0xA0	; 160
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8f 77       	andi	r24, 0x7F	; 127
     c3c:	8c 93       	st	X, r24
	PORTB |=0x01<<2;
     c3e:	a5 e2       	ldi	r26, 0x25	; 37
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	84 60       	ori	r24, 0x04	; 4
     c4a:	8c 93       	st	X, r24

}
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <motor5_slow>:

void motor5_slow()
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62

	
	OCR4AH=PULSE_WIDTH/2>>8;
     c5a:	e9 ea       	ldi	r30, 0xA9	; 169
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	10 82       	st	Z, r1
	OCR4AL = PULSE_WIDTH/2;	//Load Pulse width
     c60:	e8 ea       	ldi	r30, 0xA8	; 168
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	80 83       	st	Z, r24
	

	PORTD |=(1<<6);     //enable
     c68:	ab e2       	ldi	r26, 0x2B	; 43
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	eb e2       	ldi	r30, 0x2B	; 43
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	80 64       	ori	r24, 0x40	; 64
     c74:	8c 93       	st	X, r24
	TCCR4A|=1<<7;
     c76:	a0 ea       	ldi	r26, 0xA0	; 160
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e0 ea       	ldi	r30, 0xA0	; 160
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 68       	ori	r24, 0x80	; 128
     c82:	8c 93       	st	X, r24

}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <motor5_speed>:

void motor5_speed(int pwm)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <motor5_speed+0x6>
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
	
	OCR4AH= pwm>>8;
     c98:	e9 ea       	ldi	r30, 0xA9	; 169
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	89 2f       	mov	r24, r25
     ca2:	99 0f       	add	r25, r25
     ca4:	99 0b       	sbc	r25, r25
     ca6:	80 83       	st	Z, r24
		
	OCR4AL = pwm;	//Load Pulse width
     ca8:	e8 ea       	ldi	r30, 0xA8	; 168
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	80 83       	st	Z, r24

}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <motor6_start>:
/***************************************motor6********************************************************************/




void motor6_start(char direct){
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	0f 92       	push	r0
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	89 83       	std	Y+1, r24	; 0x01

	motor6Step=0;
     cc6:	10 92 47 03 	sts	0x0347, r1
     cca:	10 92 48 03 	sts	0x0348, r1
     cce:	10 92 49 03 	sts	0x0349, r1
     cd2:	10 92 4a 03 	sts	0x034A, r1
	
	OCR4BH=3;
     cd6:	eb ea       	ldi	r30, 0xAB	; 171
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	80 83       	st	Z, r24
	OCR4BL=255;
     cde:	ea ea       	ldi	r30, 0xAA	; 170
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	80 83       	st	Z, r24
	//OCR4B = PULSE_WIDTH;
	DDRB |=(1<<3)|(1<<4) ;
     ce6:	a4 e2       	ldi	r26, 0x24	; 36
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e2       	ldi	r30, 0x24	; 36
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	88 61       	ori	r24, 0x18	; 24
     cf2:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	80 33       	cpi	r24, 0x30	; 48
     cf8:	41 f4       	brne	.+16     	; 0xd0a <motor6_start+0x50>
		PORTB &=~(1<<4);
     cfa:	a5 e2       	ldi	r26, 0x25	; 37
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e2       	ldi	r30, 0x25	; 37
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7e       	andi	r24, 0xEF	; 239
     d06:	8c 93       	st	X, r24
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <motor6_start+0x64>
	else if(direct=='1')
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	81 33       	cpi	r24, 0x31	; 49
     d0e:	39 f4       	brne	.+14     	; 0xd1e <motor6_start+0x64>
		PORTB |=(1<<4);
     d10:	a5 e2       	ldi	r26, 0x25	; 37
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e5 e2       	ldi	r30, 0x25	; 37
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 61       	ori	r24, 0x10	; 16
     d1c:	8c 93       	st	X, r24
	
	
	PORTB |=(1<<3);
     d1e:	a5 e2       	ldi	r26, 0x25	; 37
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e2       	ldi	r30, 0x25	; 37
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	8c 93       	st	X, r24
	
	
	TCCR4A|=1<<5;
     d2c:	a0 ea       	ldi	r26, 0xA0	; 160
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e0 ea       	ldi	r30, 0xA0	; 160
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	80 62       	ori	r24, 0x20	; 32
     d38:	8c 93       	st	X, r24
	PORTE &=0xFE<<6;
     d3a:	ae e2       	ldi	r26, 0x2E	; 46
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ee e2       	ldi	r30, 0x2E	; 46
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 78       	andi	r24, 0x80	; 128
     d46:	8c 93       	st	X, r24
	
}
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <motor6_stop>:

void motor6_stop()
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	
	PORTB &=~(1<<3);  
     d58:	a5 e2       	ldi	r26, 0x25	; 37
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e2       	ldi	r30, 0x25	; 37
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	87 7f       	andi	r24, 0xF7	; 247
     d64:	8c 93       	st	X, r24
	TCCR4A &=~(1<<5);
     d66:	a0 ea       	ldi	r26, 0xA0	; 160
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e0 ea       	ldi	r30, 0xA0	; 160
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8f 7d       	andi	r24, 0xDF	; 223
     d72:	8c 93       	st	X, r24
	PORTE |=0x01<<6;  
     d74:	ae e2       	ldi	r26, 0x2E	; 46
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ee e2       	ldi	r30, 0x2E	; 46
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 64       	ori	r24, 0x40	; 64
     d80:	8c 93       	st	X, r24

}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <motor6_slow>:

void motor6_slow()
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	
	OCR4BH = PULSE_WIDTH/2>>8;
     d90:	eb ea       	ldi	r30, 0xAB	; 171
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	10 82       	st	Z, r1
	OCR4BL = PULSE_WIDTH/2;	//Load Pulse width
     d96:	ea ea       	ldi	r30, 0xAA	; 170
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	80 83       	st	Z, r24
	
	PORTB |=(1<<3);
     d9e:	a5 e2       	ldi	r26, 0x25	; 37
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 e2       	ldi	r30, 0x25	; 37
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 60       	ori	r24, 0x08	; 8
     daa:	8c 93       	st	X, r24
	TCCR4A|=1<<5;
     dac:	a0 ea       	ldi	r26, 0xA0	; 160
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e0 ea       	ldi	r30, 0xA0	; 160
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	80 62       	ori	r24, 0x20	; 32
     db8:	8c 93       	st	X, r24

}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <motor6_speed>:
void motor6_speed(int pwm)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <motor6_speed+0x6>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	
	OCR4BH= pwm>>8;
     dce:	eb ea       	ldi	r30, 0xAB	; 171
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	89 2f       	mov	r24, r25
     dd8:	99 0f       	add	r25, r25
     dda:	99 0b       	sbc	r25, r25
     ddc:	80 83       	st	Z, r24
		
	OCR4BL = pwm;	//Load Pulse width
     dde:	ea ea       	ldi	r30, 0xAA	; 170
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	80 83       	st	Z, r24

}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <timer1_init>:
/****************************************timer1 init**************************************************************/
void timer1_init()
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<5)|(1<<6);		//PortD.5 as o/p
     df8:	a4 e2       	ldi	r26, 0x24	; 36
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e2       	ldi	r30, 0x24	; 36
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 66       	ori	r24, 0x60	; 96
     e04:	8c 93       	st	X, r24

	//OCR1AH= PULSE_WIDTH>>8;
		
	//OCR1AL = PULSE_WIDTH;	//Load Pulse width
	OCR1AH=0;
     e06:	e9 e8       	ldi	r30, 0x89	; 137
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	10 82       	st	Z, r1
	OCR1AL=255;
     e0c:	e8 e8       	ldi	r30, 0x88	; 136
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	80 83       	st	Z, r24

	//OCR1BH = PULSE_WIDTH>>8;	//Load Pulse width
	//OCR1BL = PULSE_WIDTH;	//Load Pulse width
	OCR1BH=0;
     e14:	eb e8       	ldi	r30, 0x8B	; 139
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1
	OCR1BL=255;
     e1a:	ea e8       	ldi	r30, 0x8A	; 138
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	80 83       	st	Z, r24
	
	
	//DDRD& =(0xff<<4);                   //PD4ÊäÈë
	TCCR1A = 0x03;
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	83 e0       	ldi	r24, 0x03	; 3
     e28:	80 83       	st	Z, r24
	TCCR1B = 0x09;                 //start Timer
     e2a:	e1 e8       	ldi	r30, 0x81	; 129
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	89 e0       	ldi	r24, 0x09	; 9
     e30:	80 83       	st	Z, r24
	TIMSK1	|=(1<<ICIE1);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
     e32:	af e6       	ldi	r26, 0x6F	; 111
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ef e6       	ldi	r30, 0x6F	; 111
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 62       	ori	r24, 0x20	; 32
     e3e:	8c 93       	st	X, r24

}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <timer3_init>:
	TIMSK1	|=(1<<TOIE1);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï

}*/

void timer3_init()
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	DDRE |=(1<<3)|(1<<4);
     e4e:	ad e2       	ldi	r26, 0x2D	; 45
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ed e2       	ldi	r30, 0x2D	; 45
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	88 61       	ori	r24, 0x18	; 24
     e5a:	8c 93       	st	X, r24
	//OCR3AL = PULSE_WIDTH;	//Load Pulse width

	//OCR3BH = PULSE_WIDTH>>8;	//Load Pulse width
	//OCR3BL = PULSE_WIDTH;	//Load Pulse width

	OCR3AH=0;
     e5c:	e9 e9       	ldi	r30, 0x99	; 153
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	10 82       	st	Z, r1
	OCR3AL=64;
     e62:	e8 e9       	ldi	r30, 0x98	; 152
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 e4       	ldi	r24, 0x40	; 64
     e68:	80 83       	st	Z, r24
	OCR3BH=0;
     e6a:	eb e9       	ldi	r30, 0x9B	; 155
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	10 82       	st	Z, r1
	OCR3BL=64;
     e70:	ea e9       	ldi	r30, 0x9A	; 154
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 e4       	ldi	r24, 0x40	; 64
     e76:	80 83       	st	Z, r24


	DDRE&=~(1<<7);                   //PD4ÊäÈë
     e78:	ad e2       	ldi	r26, 0x2D	; 45
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ed e2       	ldi	r30, 0x2D	; 45
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 77       	andi	r24, 0x7F	; 127
     e84:	8c 93       	st	X, r24
	TCCR3A = 0x03;
     e86:	e0 e9       	ldi	r30, 0x90	; 144
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	80 83       	st	Z, r24
	TCCR3B = 0x09; //start Timer
     e8e:	e1 e9       	ldi	r30, 0x91	; 145
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	89 e0       	ldi	r24, 0x09	; 9
     e94:	80 83       	st	Z, r24
	TIMSK3	|=(1<<ICIE3);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
     e96:	a1 e7       	ldi	r26, 0x71	; 113
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e7       	ldi	r30, 0x71	; 113
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	80 62       	ori	r24, 0x20	; 32
     ea2:	8c 93       	st	X, r24

}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <timer4_init>:

void timer4_init()
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	DDRH |=(1<<3)|(1<<4);
     eb2:	a1 e0       	ldi	r26, 0x01	; 1
     eb4:	b1 e0       	ldi	r27, 0x01	; 1
     eb6:	e1 e0       	ldi	r30, 0x01	; 1
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	80 81       	ld	r24, Z
     ebc:	88 61       	ori	r24, 0x18	; 24
     ebe:	8c 93       	st	X, r24
	//OCR4AL = PULSE_WIDTH;	//Load Pulse width

	//OCR4BH = PULSE_WIDTH>>8;	//Load Pulse width
	//OCR4BL = PULSE_WIDTH;	//Load Pulse width
	
	OCR4AH=1;
     ec0:	e9 ea       	ldi	r30, 0xA9	; 169
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	80 83       	st	Z, r24
	OCR4AL=255;
     ec8:	e8 ea       	ldi	r30, 0xA8	; 168
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	80 83       	st	Z, r24
	OCR4BH=1;
     ed0:	eb ea       	ldi	r30, 0xAB	; 171
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 83       	st	Z, r24
	OCR4BL=255 ;
     ed8:	ea ea       	ldi	r30, 0xAA	; 170
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	80 83       	st	Z, r24

	DDRL&=~(1<<0);                   //PD4ÊäÈë
     ee0:	aa e0       	ldi	r26, 0x0A	; 10
     ee2:	b1 e0       	ldi	r27, 0x01	; 1
     ee4:	ea e0       	ldi	r30, 0x0A	; 10
     ee6:	f1 e0       	ldi	r31, 0x01	; 1
     ee8:	80 81       	ld	r24, Z
     eea:	8e 7f       	andi	r24, 0xFE	; 254
     eec:	8c 93       	st	X, r24
	TCCR4A = 0x03;
     eee:	e0 ea       	ldi	r30, 0xA0	; 160
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	80 83       	st	Z, r24
	TCCR4B = 0x09; //start Timer
     ef6:	e1 ea       	ldi	r30, 0xA1	; 161
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	89 e0       	ldi	r24, 0x09	; 9
     efc:	80 83       	st	Z, r24
	TIMSK4	|=(1<<ICIE4);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
     efe:	a2 e7       	ldi	r26, 0x72	; 114
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e2 e7       	ldi	r30, 0x72	; 114
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	8c 93       	st	X, r24

}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <timer5_init>:


void timer5_init()
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
	
	//DDRL & =(0xff<<1);                   //PD4ÊäÈë
	TCCR5A = 0x00;
     f1a:	e0 e2       	ldi	r30, 0x20	; 32
     f1c:	f1 e0       	ldi	r31, 0x01	; 1
     f1e:	10 82       	st	Z, r1
	TCCR5B = 0x09; //start Timer
     f20:	e1 e2       	ldi	r30, 0x21	; 33
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	89 e0       	ldi	r24, 0x09	; 9
     f26:	80 83       	st	Z, r24
	TIMSK5	|=(1<<ICIE5) ;           //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
     f28:	a3 e7       	ldi	r26, 0x73	; 115
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e3 e7       	ldi	r30, 0x73	; 115
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 62       	ori	r24, 0x20	; 32
     f34:	8c 93       	st	X, r24

}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <init_device>:

void init_device(void)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
     f44:	f8 94       	cli
 //XDIV  = 0x00; //xtal divider
 XMCRA = 0x00; //external memory
     f46:	e4 e7       	ldi	r30, 0x74	; 116
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	10 82       	st	Z, r1
 
 //INIT PROT
 DDRB=0XFF;
     f4c:	e4 e2       	ldi	r30, 0x24	; 36
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	80 83       	st	Z, r24
 PORTB=0X07;
     f54:	e5 e2       	ldi	r30, 0x25	; 37
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	87 e0       	ldi	r24, 0x07	; 7
     f5a:	80 83       	st	Z, r24
 
 DDRE=0XFF;
     f5c:	ed e2       	ldi	r30, 0x2D	; 45
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	80 83       	st	Z, r24
 PORTE=0X40;
     f64:	ee e2       	ldi	r30, 0x2E	; 46
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 e4       	ldi	r24, 0x40	; 64
     f6a:	80 83       	st	Z, r24
 
 DDRH=0XFF;
     f6c:	e1 e0       	ldi	r30, 0x01	; 1
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	80 83       	st	Z, r24
 PORTH=0X60;
     f74:	e2 e0       	ldi	r30, 0x02	; 2
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	80 e6       	ldi	r24, 0x60	; 96
     f7a:	80 83       	st	Z, r24

 //watchdog_init();
 PORTL=0X00;
     f7c:	eb e0       	ldi	r30, 0x0B	; 11
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	10 82       	st	Z, r1
 DDRL=0XFC;     //PL0,1ÊäÈë£¬ÆäËûÊä³ö
     f82:	ea e0       	ldi	r30, 0x0A	; 10
     f84:	f1 e0       	ldi	r31, 0x01	; 1
     f86:	8c ef       	ldi	r24, 0xFC	; 252
     f88:	80 83       	st	Z, r24
 
 PORTK=0Xff;
     f8a:	e8 e0       	ldi	r30, 0x08	; 8
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	80 83       	st	Z, r24
 DDRK=0X00;
     f92:	e7 e0       	ldi	r30, 0x07	; 7
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	10 82       	st	Z, r1
 
 //timer1_init();  //Í£Ö¹×´Ì¬»ú
 
 USART0_Init(MYUBRR);
     f98:	87 e4       	ldi	r24, 0x47	; 71
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <USART0_Init>

 USART1_Init(MYUBRR);
     fa0:	87 e4       	ldi	r24, 0x47	; 71
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 9e 02 	call	0x53c	; 0x53c <USART1_Init>

 /*uart0_init();
 uart1_init();*/
 //MCUCR = 0x00;
 timer1_init();
     fa8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <timer1_init>
 timer3_init();
     fac:	0e 94 23 07 	call	0xe46	; 0xe46 <timer3_init>
 timer4_init();
     fb0:	0e 94 55 07 	call	0xeaa	; 0xeaa <timer4_init>
 timer5_init();
     fb4:	0e 94 89 07 	call	0xf12	; 0xf12 <timer5_init>
 
 UART0_RECV_FLAG=0;
     fb8:	10 92 59 03 	sts	0x0359, r1
 UART1_RECV_FLAG=0;
     fbc:	10 92 44 03 	sts	0x0344, r1

  Position1=0;
     fc0:	10 92 6e 03 	sts	0x036E, r1
     fc4:	10 92 6f 03 	sts	0x036F, r1
     fc8:	10 92 70 03 	sts	0x0370, r1
     fcc:	10 92 71 03 	sts	0x0371, r1


 Position2=0;
     fd0:	10 92 0f 03 	sts	0x030F, r1
     fd4:	10 92 10 03 	sts	0x0310, r1
     fd8:	10 92 11 03 	sts	0x0311, r1
     fdc:	10 92 12 03 	sts	0x0312, r1


 Position3=0;
     fe0:	10 92 8e 03 	sts	0x038E, r1
     fe4:	10 92 8f 03 	sts	0x038F, r1
     fe8:	10 92 90 03 	sts	0x0390, r1
     fec:	10 92 91 03 	sts	0x0391, r1
 
 Position4=0;
     ff0:	10 92 8a 03 	sts	0x038A, r1
     ff4:	10 92 8b 03 	sts	0x038B, r1
     ff8:	10 92 8c 03 	sts	0x038C, r1
     ffc:	10 92 8d 03 	sts	0x038D, r1


 Position5=0;
    1000:	10 92 34 03 	sts	0x0334, r1
    1004:	10 92 35 03 	sts	0x0335, r1
    1008:	10 92 36 03 	sts	0x0336, r1
    100c:	10 92 37 03 	sts	0x0337, r1


 motor1Step=0;
    1010:	10 92 c8 03 	sts	0x03C8, r1
    1014:	10 92 c9 03 	sts	0x03C9, r1
    1018:	10 92 ca 03 	sts	0x03CA, r1
    101c:	10 92 cb 03 	sts	0x03CB, r1
 motor2Step=0;
    1020:	10 92 ba 03 	sts	0x03BA, r1
    1024:	10 92 bb 03 	sts	0x03BB, r1
    1028:	10 92 bc 03 	sts	0x03BC, r1
    102c:	10 92 bd 03 	sts	0x03BD, r1
 motor3Step=0;
    1030:	10 92 25 03 	sts	0x0325, r1
    1034:	10 92 26 03 	sts	0x0326, r1
    1038:	10 92 27 03 	sts	0x0327, r1
    103c:	10 92 28 03 	sts	0x0328, r1
 motor4Step=0;
    1040:	10 92 be 03 	sts	0x03BE, r1
    1044:	10 92 bf 03 	sts	0x03BF, r1
    1048:	10 92 c0 03 	sts	0x03C0, r1
    104c:	10 92 c1 03 	sts	0x03C1, r1
 motor5Step=0;
    1050:	10 92 7c 03 	sts	0x037C, r1
    1054:	10 92 7d 03 	sts	0x037D, r1
    1058:	10 92 7e 03 	sts	0x037E, r1
    105c:	10 92 7f 03 	sts	0x037F, r1
sei(); //re-enable interrupts
    1060:	78 94       	sei
 //all peripherals are now initialized


}
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <delayms>:

void  delayms(volatile unsigned int n)       
{ long i;
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	2a 97       	sbiw	r28, 0x0a	; 10
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	9a 87       	std	Y+10, r25	; 0x0a
    107e:	89 87       	std	Y+9, r24	; 0x09
  long j;
  for(i=0;i<100;i++)
    1080:	1d 82       	std	Y+5, r1	; 0x05
    1082:	1e 82       	std	Y+6, r1	; 0x06
    1084:	1f 82       	std	Y+7, r1	; 0x07
    1086:	18 86       	std	Y+8, r1	; 0x08
    1088:	29 c0       	rjmp	.+82     	; 0x10dc <delayms+0x74>
  {
  	  for(j=n;j>0;j--)
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	cc 01       	movw	r24, r24
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	ab 83       	std	Y+3, r26	; 0x03
    109a:	bc 83       	std	Y+4, r27	; 0x04
    109c:	0b c0       	rjmp	.+22     	; 0x10b4 <delayms+0x4c>
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	ab 81       	ldd	r26, Y+3	; 0x03
    10a4:	bc 81       	ldd	r27, Y+4	; 0x04
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	a1 09       	sbc	r26, r1
    10aa:	b1 09       	sbc	r27, r1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	ab 83       	std	Y+3, r26	; 0x03
    10b2:	bc 83       	std	Y+4, r27	; 0x04
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	ab 81       	ldd	r26, Y+3	; 0x03
    10ba:	bc 81       	ldd	r27, Y+4	; 0x04
    10bc:	18 16       	cp	r1, r24
    10be:	19 06       	cpc	r1, r25
    10c0:	1a 06       	cpc	r1, r26
    10c2:	1b 06       	cpc	r1, r27
    10c4:	64 f3       	brlt	.-40     	; 0x109e <delayms+0x36>
}

void  delayms(volatile unsigned int n)       
{ long i;
  long j;
  for(i=0;i<100;i++)
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ca:	af 81       	ldd	r26, Y+7	; 0x07
    10cc:	b8 85       	ldd	r27, Y+8	; 0x08
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	a1 1d       	adc	r26, r1
    10d2:	b1 1d       	adc	r27, r1
    10d4:	8d 83       	std	Y+5, r24	; 0x05
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	af 83       	std	Y+7, r26	; 0x07
    10da:	b8 87       	std	Y+8, r27	; 0x08
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	af 81       	ldd	r26, Y+7	; 0x07
    10e2:	b8 85       	ldd	r27, Y+8	; 0x08
    10e4:	84 36       	cpi	r24, 0x64	; 100
    10e6:	91 05       	cpc	r25, r1
    10e8:	a1 05       	cpc	r26, r1
    10ea:	b1 05       	cpc	r27, r1
    10ec:	74 f2       	brlt	.-100    	; 0x108a <delayms+0x22>
  {
  	  for(j=n;j>0;j--)
	  {}
  	} 
 
} 
    10ee:	2a 96       	adiw	r28, 0x0a	; 10
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <delayus>:

void delayus(volatile unsigned int n)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	2a 97       	sbiw	r28, 0x0a	; 10
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	9a 87       	std	Y+10, r25	; 0x0a
    1116:	89 87       	std	Y+9, r24	; 0x09
   long i;
   long j;
   for(i=0;i<2;i++)
    1118:	1d 82       	std	Y+5, r1	; 0x05
    111a:	1e 82       	std	Y+6, r1	; 0x06
    111c:	1f 82       	std	Y+7, r1	; 0x07
    111e:	18 86       	std	Y+8, r1	; 0x08
    1120:	29 c0       	rjmp	.+82     	; 0x1174 <delayus+0x74>
   {
      for(j=n;j>0;j--)
    1122:	89 85       	ldd	r24, Y+9	; 0x09
    1124:	9a 85       	ldd	r25, Y+10	; 0x0a
    1126:	cc 01       	movw	r24, r24
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	9a 83       	std	Y+2, r25	; 0x02
    1130:	ab 83       	std	Y+3, r26	; 0x03
    1132:	bc 83       	std	Y+4, r27	; 0x04
    1134:	0b c0       	rjmp	.+22     	; 0x114c <delayus+0x4c>
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	ab 81       	ldd	r26, Y+3	; 0x03
    113c:	bc 81       	ldd	r27, Y+4	; 0x04
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	a1 09       	sbc	r26, r1
    1142:	b1 09       	sbc	r27, r1
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	ab 83       	std	Y+3, r26	; 0x03
    114a:	bc 83       	std	Y+4, r27	; 0x04
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	ab 81       	ldd	r26, Y+3	; 0x03
    1152:	bc 81       	ldd	r27, Y+4	; 0x04
    1154:	18 16       	cp	r1, r24
    1156:	19 06       	cpc	r1, r25
    1158:	1a 06       	cpc	r1, r26
    115a:	1b 06       	cpc	r1, r27
    115c:	64 f3       	brlt	.-40     	; 0x1136 <delayus+0x36>

void delayus(volatile unsigned int n)
{
   long i;
   long j;
   for(i=0;i<2;i++)
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	af 81       	ldd	r26, Y+7	; 0x07
    1164:	b8 85       	ldd	r27, Y+8	; 0x08
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	a1 1d       	adc	r26, r1
    116a:	b1 1d       	adc	r27, r1
    116c:	8d 83       	std	Y+5, r24	; 0x05
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	af 83       	std	Y+7, r26	; 0x07
    1172:	b8 87       	std	Y+8, r27	; 0x08
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	af 81       	ldd	r26, Y+7	; 0x07
    117a:	b8 85       	ldd	r27, Y+8	; 0x08
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	91 05       	cpc	r25, r1
    1180:	a1 05       	cpc	r26, r1
    1182:	b1 05       	cpc	r27, r1
    1184:	74 f2       	brlt	.-100    	; 0x1122 <delayus+0x22>
      for(j=n;j>0;j--)
	  {}
   }


}
    1186:	2a 96       	adiw	r28, 0x0a	; 10
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <fork_uart0_command>:

void fork_uart0_command()
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	28 97       	sbiw	r28, 0x08	; 8
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    int i;
		if(UART0_RECV_FLAG==1)
    11ac:	80 91 59 03 	lds	r24, 0x0359
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <fork_uart0_command+0x1e>
    11b4:	c4 c1       	rjmp	.+904    	; 0x153e <fork_uart0_command+0x3a6>
	{
		memcpy(&motor_command,UART0_RECV_BUFFER,sizeof(UART0_RECV_BUFFER));
    11b6:	8c ea       	ldi	r24, 0xAC	; 172
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	27 e9       	ldi	r18, 0x97	; 151
    11bc:	33 e0       	ldi	r19, 0x03	; 3
    11be:	b9 01       	movw	r22, r18
    11c0:	4d e0       	ldi	r20, 0x0D	; 13
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
		switch(motor_command.MotorStart)
    11c8:	80 91 ad 03 	lds	r24, 0x03AD
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	38 87       	std	Y+8, r19	; 0x08
    11d2:	2f 83       	std	Y+7, r18	; 0x07
    11d4:	8f 81       	ldd	r24, Y+7	; 0x07
    11d6:	98 85       	ldd	r25, Y+8	; 0x08
    11d8:	80 33       	cpi	r24, 0x30	; 48
    11da:	91 05       	cpc	r25, r1
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <fork_uart0_command+0x48>
    11de:	20 c1       	rjmp	.+576    	; 0x1420 <fork_uart0_command+0x288>
    11e0:	2f 81       	ldd	r18, Y+7	; 0x07
    11e2:	38 85       	ldd	r19, Y+8	; 0x08
    11e4:	21 33       	cpi	r18, 0x31	; 49
    11e6:	31 05       	cpc	r19, r1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <fork_uart0_command+0x54>
    11ea:	a7 c1       	rjmp	.+846    	; 0x153a <fork_uart0_command+0x3a2>
		{
			case START:
			{
				switch(motor_command.MotorID)
    11ec:	80 91 ac 03 	lds	r24, 0x03AC
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3e 83       	std	Y+6, r19	; 0x06
    11f6:	2d 83       	std	Y+5, r18	; 0x05
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	83 33       	cpi	r24, 0x33	; 51
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <fork_uart0_command+0x6c>
    1202:	82 c0       	rjmp	.+260    	; 0x1308 <fork_uart0_command+0x170>
    1204:	2d 81       	ldd	r18, Y+5	; 0x05
    1206:	3e 81       	ldd	r19, Y+6	; 0x06
    1208:	24 33       	cpi	r18, 0x34	; 52
    120a:	31 05       	cpc	r19, r1
    120c:	64 f4       	brge	.+24     	; 0x1226 <fork_uart0_command+0x8e>
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	81 33       	cpi	r24, 0x31	; 49
    1214:	91 05       	cpc	r25, r1
    1216:	d1 f0       	breq	.+52     	; 0x124c <fork_uart0_command+0xb4>
    1218:	2d 81       	ldd	r18, Y+5	; 0x05
    121a:	3e 81       	ldd	r19, Y+6	; 0x06
    121c:	22 33       	cpi	r18, 0x32	; 50
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <fork_uart0_command+0x8c>
    1222:	4f c0       	rjmp	.+158    	; 0x12c2 <fork_uart0_command+0x12a>
    1224:	8a c1       	rjmp	.+788    	; 0x153a <fork_uart0_command+0x3a2>
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	85 33       	cpi	r24, 0x35	; 53
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <fork_uart0_command+0x9a>
    1230:	b1 c0       	rjmp	.+354    	; 0x1394 <fork_uart0_command+0x1fc>
    1232:	2d 81       	ldd	r18, Y+5	; 0x05
    1234:	3e 81       	ldd	r19, Y+6	; 0x06
    1236:	25 33       	cpi	r18, 0x35	; 53
    1238:	31 05       	cpc	r19, r1
    123a:	0c f4       	brge	.+2      	; 0x123e <fork_uart0_command+0xa6>
    123c:	88 c0       	rjmp	.+272    	; 0x134e <fork_uart0_command+0x1b6>
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	86 33       	cpi	r24, 0x36	; 54
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <fork_uart0_command+0xb2>
    1248:	c8 c0       	rjmp	.+400    	; 0x13da <fork_uart0_command+0x242>
    124a:	77 c1       	rjmp	.+750    	; 0x153a <fork_uart0_command+0x3a2>
				{
					case MOTOR1:
					global_yon_motor1_running=TRUE;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	80 93 55 03 	sts	0x0355, r24
					motor1_start(motor_command.MotorDirection);
    1252:	80 91 ae 03 	lds	r24, 0x03AE
    1256:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <motor1_start>
					Motor1Status=motor_command.MotorDirection;
    125a:	80 91 ae 03 	lds	r24, 0x03AE
    125e:	80 93 96 03 	sts	0x0396, r24
					memcpy(Motor1CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    1262:	89 e2       	ldi	r24, 0x29	; 41
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	2f ea       	ldi	r18, 0xAF	; 175
    1268:	33 e0       	ldi	r19, 0x03	; 3
    126a:	b9 01       	movw	r22, r18
    126c:	49 e0       	ldi	r20, 0x09	; 9
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
					motor1CommandStep=atol(Motor1CommandStep);
    1274:	89 e2       	ldi	r24, 0x29	; 41
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	0e 94 19 17 	call	0x2e32	; 0x2e32 <atol>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	80 93 a8 03 	sts	0x03A8, r24
    1284:	90 93 a9 03 	sts	0x03A9, r25
    1288:	a0 93 aa 03 	sts	0x03AA, r26
    128c:	b0 93 ab 03 	sts	0x03AB, r27
					for(i=0;Motor1CommandStep[i]!='\0';i++)
    1290:	1a 82       	std	Y+2, r1	; 0x02
    1292:	19 82       	std	Y+1, r1	; 0x01
    1294:	0d c0       	rjmp	.+26     	; 0x12b0 <fork_uart0_command+0x118>
					{
					USART0_Transmit((Motor1CommandStep[i]));
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	fc 01       	movw	r30, r24
    129c:	e7 5d       	subi	r30, 0xD7	; 215
    129e:	fc 4f       	sbci	r31, 0xFC	; 252
    12a0:	80 81       	ld	r24, Z
    12a2:	0e 94 87 02 	call	0x50e	; 0x50e <USART0_Transmit>
					global_yon_motor1_running=TRUE;
					motor1_start(motor_command.MotorDirection);
					Motor1Status=motor_command.MotorDirection;
					memcpy(Motor1CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
					motor1CommandStep=atol(Motor1CommandStep);
					for(i=0;Motor1CommandStep[i]!='\0';i++)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	fc 01       	movw	r30, r24
    12b6:	e7 5d       	subi	r30, 0xD7	; 215
    12b8:	fc 4f       	sbci	r31, 0xFC	; 252
    12ba:	80 81       	ld	r24, Z
    12bc:	88 23       	and	r24, r24
    12be:	59 f7       	brne	.-42     	; 0x1296 <fork_uart0_command+0xfe>
    12c0:	3c c1       	rjmp	.+632    	; 0x153a <fork_uart0_command+0x3a2>
					USART0_Transmit((Motor1CommandStep[i]));
					}
					break;
					
					case MOTOR2:
					global_yon_motor2_running=TRUE;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 c2 03 	sts	0x03C2, r24
					motor2_start(motor_command.MotorDirection);
    12c8:	80 91 ae 03 	lds	r24, 0x03AE
    12cc:	0e 94 6f 03 	call	0x6de	; 0x6de <motor2_start>
					Motor2Status=motor_command.MotorDirection;
    12d0:	80 91 ae 03 	lds	r24, 0x03AE
    12d4:	80 93 88 03 	sts	0x0388, r24
					memcpy(Motor2CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    12d8:	8a e3       	ldi	r24, 0x3A	; 58
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	2f ea       	ldi	r18, 0xAF	; 175
    12de:	33 e0       	ldi	r19, 0x03	; 3
    12e0:	b9 01       	movw	r22, r18
    12e2:	49 e0       	ldi	r20, 0x09	; 9
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
					motor2CommandStep=atol(Motor2CommandStep);
    12ea:	8a e3       	ldi	r24, 0x3A	; 58
    12ec:	93 e0       	ldi	r25, 0x03	; 3
    12ee:	0e 94 19 17 	call	0x2e32	; 0x2e32 <atol>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	80 93 0a 03 	sts	0x030A, r24
    12fa:	90 93 0b 03 	sts	0x030B, r25
    12fe:	a0 93 0c 03 	sts	0x030C, r26
    1302:	b0 93 0d 03 	sts	0x030D, r27
    1306:	19 c1       	rjmp	.+562    	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR3:
					global_yon_motor3_running=TRUE;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 b9 03 	sts	0x03B9, r24
					motor3_start(motor_command.MotorDirection);
    130e:	80 91 ae 03 	lds	r24, 0x03AE
    1312:	0e 94 0a 04 	call	0x814	; 0x814 <motor3_start>
					Motor3Status=motor_command.MotorDirection;
    1316:	80 91 ae 03 	lds	r24, 0x03AE
    131a:	80 93 38 03 	sts	0x0338, r24
					memcpy(Motor3CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    131e:	84 e6       	ldi	r24, 0x64	; 100
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	2f ea       	ldi	r18, 0xAF	; 175
    1324:	33 e0       	ldi	r19, 0x03	; 3
    1326:	b9 01       	movw	r22, r18
    1328:	49 e0       	ldi	r20, 0x09	; 9
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
					motor3CommandStep=atol(Motor3CommandStep);
    1330:	84 e6       	ldi	r24, 0x64	; 100
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	0e 94 19 17 	call	0x2e32	; 0x2e32 <atol>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	80 93 82 03 	sts	0x0382, r24
    1340:	90 93 83 03 	sts	0x0383, r25
    1344:	a0 93 84 03 	sts	0x0384, r26
    1348:	b0 93 85 03 	sts	0x0385, r27
    134c:	f6 c0       	rjmp	.+492    	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR4:
					global_yon_motor4_running=TRUE;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 89 03 	sts	0x0389, r24
					motor4_start(motor_command.MotorDirection);
    1354:	80 91 ae 03 	lds	r24, 0x03AE
    1358:	0e 94 28 05 	call	0xa50	; 0xa50 <motor4_start>
					Motor4Status=motor_command.MotorDirection;
    135c:	80 91 ae 03 	lds	r24, 0x03AE
    1360:	80 93 39 03 	sts	0x0339, r24
					memcpy(Motor4CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    1364:	82 e7       	ldi	r24, 0x72	; 114
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	2f ea       	ldi	r18, 0xAF	; 175
    136a:	33 e0       	ldi	r19, 0x03	; 3
    136c:	b9 01       	movw	r22, r18
    136e:	49 e0       	ldi	r20, 0x09	; 9
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
					motor4CommandStep=atol(Motor4CommandStep);
    1376:	82 e7       	ldi	r24, 0x72	; 114
    1378:	93 e0       	ldi	r25, 0x03	; 3
    137a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <atol>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	80 93 a4 03 	sts	0x03A4, r24
    1386:	90 93 a5 03 	sts	0x03A5, r25
    138a:	a0 93 a6 03 	sts	0x03A6, r26
    138e:	b0 93 a7 03 	sts	0x03A7, r27
    1392:	d3 c0       	rjmp	.+422    	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR5:
					global_yon_motor5_running=TRUE;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 33 03 	sts	0x0333, r24
					motor5_start(motor_command.MotorDirection);
    139a:	80 91 ae 03 	lds	r24, 0x03AE
    139e:	0e 94 c2 05 	call	0xb84	; 0xb84 <motor5_start>
					Motor5Status=motor_command.MotorDirection;
    13a2:	80 91 ae 03 	lds	r24, 0x03AE
    13a6:	80 93 58 03 	sts	0x0358, r24
					memcpy(Motor5CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    13aa:	8b e4       	ldi	r24, 0x4B	; 75
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	2f ea       	ldi	r18, 0xAF	; 175
    13b0:	33 e0       	ldi	r19, 0x03	; 3
    13b2:	b9 01       	movw	r22, r18
    13b4:	49 e0       	ldi	r20, 0x09	; 9
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
					motor5CommandStep=atol(Motor5CommandStep);
    13bc:	8b e4       	ldi	r24, 0x4B	; 75
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <atol>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	80 93 21 03 	sts	0x0321, r24
    13cc:	90 93 22 03 	sts	0x0322, r25
    13d0:	a0 93 23 03 	sts	0x0323, r26
    13d4:	b0 93 24 03 	sts	0x0324, r27
    13d8:	b0 c0       	rjmp	.+352    	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR6:
					global_yon_motor6_running=TRUE;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 c5 03 	sts	0x03C5, r24
					motor6_start(motor_command.MotorDirection);
    13e0:	80 91 ae 03 	lds	r24, 0x03AE
    13e4:	0e 94 5d 06 	call	0xcba	; 0xcba <motor6_start>
					Motor6Status=motor_command.MotorDirection;
    13e8:	80 91 ae 03 	lds	r24, 0x03AE
    13ec:	80 93 cc 03 	sts	0x03CC, r24
					memcpy(Motor6CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    13f0:	8a e5       	ldi	r24, 0x5A	; 90
    13f2:	93 e0       	ldi	r25, 0x03	; 3
    13f4:	2f ea       	ldi	r18, 0xAF	; 175
    13f6:	33 e0       	ldi	r19, 0x03	; 3
    13f8:	b9 01       	movw	r22, r18
    13fa:	49 e0       	ldi	r20, 0x09	; 9
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	0e 94 40 17 	call	0x2e80	; 0x2e80 <memcpy>
					motor6CommandStep=atol(Motor6CommandStep);
    1402:	8a e5       	ldi	r24, 0x5A	; 90
    1404:	93 e0       	ldi	r25, 0x03	; 3
    1406:	0e 94 19 17 	call	0x2e32	; 0x2e32 <atol>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	80 93 92 03 	sts	0x0392, r24
    1412:	90 93 93 03 	sts	0x0393, r25
    1416:	a0 93 94 03 	sts	0x0394, r26
    141a:	b0 93 95 03 	sts	0x0395, r27
    141e:	8d c0       	rjmp	.+282    	; 0x153a <fork_uart0_command+0x3a2>
				break;
			}

			case STOP:
			{
				switch(motor_command.MotorID)
    1420:	80 91 ac 03 	lds	r24, 0x03AC
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3c 83       	std	Y+4, r19	; 0x04
    142a:	2b 83       	std	Y+3, r18	; 0x03
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	83 33       	cpi	r24, 0x33	; 51
    1432:	91 05       	cpc	r25, r1
    1434:	09 f4       	brne	.+2      	; 0x1438 <fork_uart0_command+0x2a0>
    1436:	42 c0       	rjmp	.+132    	; 0x14bc <fork_uart0_command+0x324>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	24 33       	cpi	r18, 0x34	; 52
    143e:	31 05       	cpc	r19, r1
    1440:	5c f4       	brge	.+22     	; 0x1458 <fork_uart0_command+0x2c0>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	81 33       	cpi	r24, 0x31	; 49
    1448:	91 05       	cpc	r25, r1
    144a:	c1 f0       	breq	.+48     	; 0x147c <fork_uart0_command+0x2e4>
    144c:	2b 81       	ldd	r18, Y+3	; 0x03
    144e:	3c 81       	ldd	r19, Y+4	; 0x04
    1450:	22 33       	cpi	r18, 0x32	; 50
    1452:	31 05       	cpc	r19, r1
    1454:	19 f1       	breq	.+70     	; 0x149c <fork_uart0_command+0x304>
    1456:	71 c0       	rjmp	.+226    	; 0x153a <fork_uart0_command+0x3a2>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	85 33       	cpi	r24, 0x35	; 53
    145e:	91 05       	cpc	r25, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <fork_uart0_command+0x2cc>
    1462:	4c c0       	rjmp	.+152    	; 0x14fc <fork_uart0_command+0x364>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	25 33       	cpi	r18, 0x35	; 53
    146a:	31 05       	cpc	r19, r1
    146c:	bc f1       	brlt	.+110    	; 0x14dc <fork_uart0_command+0x344>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	86 33       	cpi	r24, 0x36	; 54
    1474:	91 05       	cpc	r25, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <fork_uart0_command+0x2e2>
    1478:	51 c0       	rjmp	.+162    	; 0x151c <fork_uart0_command+0x384>
    147a:	5f c0       	rjmp	.+190    	; 0x153a <fork_uart0_command+0x3a2>
				{
					case MOTOR1:
					motor1_stop();
    147c:	0e 94 1f 03 	call	0x63e	; 0x63e <motor1_stop>
					global_yon_motor1_running=FALSE;
    1480:	10 92 55 03 	sts	0x0355, r1
					Motor1Status=MOTOR_STOP;
    1484:	82 e3       	ldi	r24, 0x32	; 50
    1486:	80 93 96 03 	sts	0x0396, r24
					motor1Step=0;
    148a:	10 92 c8 03 	sts	0x03C8, r1
    148e:	10 92 c9 03 	sts	0x03C9, r1
    1492:	10 92 ca 03 	sts	0x03CA, r1
    1496:	10 92 cb 03 	sts	0x03CB, r1
    149a:	4f c0       	rjmp	.+158    	; 0x153a <fork_uart0_command+0x3a2>
					
					break;
					
					case MOTOR2:
					motor2_stop();
    149c:	0e 94 ba 03 	call	0x774	; 0x774 <motor2_stop>
					global_yon_motor2_running=FALSE;
    14a0:	10 92 c2 03 	sts	0x03C2, r1
					Motor2Status=MOTOR_STOP;
    14a4:	82 e3       	ldi	r24, 0x32	; 50
    14a6:	80 93 88 03 	sts	0x0388, r24
					motor2Step=0;
    14aa:	10 92 ba 03 	sts	0x03BA, r1
    14ae:	10 92 bb 03 	sts	0x03BB, r1
    14b2:	10 92 bc 03 	sts	0x03BC, r1
    14b6:	10 92 bd 03 	sts	0x03BD, r1
    14ba:	3f c0       	rjmp	.+126    	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR3:
					motor3_stop();
    14bc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motor3_stop>
					global_yon_motor3_running=FALSE;
    14c0:	10 92 b9 03 	sts	0x03B9, r1
					Motor3Status=MOTOR_STOP;
    14c4:	82 e3       	ldi	r24, 0x32	; 50
    14c6:	80 93 38 03 	sts	0x0338, r24
					motor3Step=0;
    14ca:	10 92 25 03 	sts	0x0325, r1
    14ce:	10 92 26 03 	sts	0x0326, r1
    14d2:	10 92 27 03 	sts	0x0327, r1
    14d6:	10 92 28 03 	sts	0x0328, r1
    14da:	2f c0       	rjmp	.+94     	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR4:
					motor4_stop();
    14dc:	0e 94 73 05 	call	0xae6	; 0xae6 <motor4_stop>
					global_yon_motor4_running=FALSE;
    14e0:	10 92 89 03 	sts	0x0389, r1
					Motor4Status=MOTOR_STOP;
    14e4:	82 e3       	ldi	r24, 0x32	; 50
    14e6:	80 93 39 03 	sts	0x0339, r24
					motor4Step=0;
    14ea:	10 92 be 03 	sts	0x03BE, r1
    14ee:	10 92 bf 03 	sts	0x03BF, r1
    14f2:	10 92 c0 03 	sts	0x03C0, r1
    14f6:	10 92 c1 03 	sts	0x03C1, r1
    14fa:	1f c0       	rjmp	.+62     	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR5:
					motor5_stop();
    14fc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <motor5_stop>
					global_yon_motor5_running=FALSE;
    1500:	10 92 33 03 	sts	0x0333, r1
					Motor5Status=MOTOR_STOP;
    1504:	82 e3       	ldi	r24, 0x32	; 50
    1506:	80 93 58 03 	sts	0x0358, r24
					motor5Step=0;
    150a:	10 92 7c 03 	sts	0x037C, r1
    150e:	10 92 7d 03 	sts	0x037D, r1
    1512:	10 92 7e 03 	sts	0x037E, r1
    1516:	10 92 7f 03 	sts	0x037F, r1
    151a:	0f c0       	rjmp	.+30     	; 0x153a <fork_uart0_command+0x3a2>
					break;

					case MOTOR6:
					motor6_stop();
    151c:	0e 94 a8 06 	call	0xd50	; 0xd50 <motor6_stop>
					global_yon_motor6_running=FALSE;
    1520:	10 92 c5 03 	sts	0x03C5, r1
					Motor6Status=MOTOR_STOP;
    1524:	82 e3       	ldi	r24, 0x32	; 50
    1526:	80 93 cc 03 	sts	0x03CC, r24
					motor6Step=0;
    152a:	10 92 47 03 	sts	0x0347, r1
    152e:	10 92 48 03 	sts	0x0348, r1
    1532:	10 92 49 03 	sts	0x0349, r1
    1536:	10 92 4a 03 	sts	0x034A, r1
			
				}
			break;
			}
		}
		UART0_RECV_FLAG=0;
    153a:	10 92 59 03 	sts	0x0359, r1
	}
}
    153e:	28 96       	adiw	r28, 0x08	; 8
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <fork_uart1_command>:

void fork_uart1_command()
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
	if(UART1_RECV_FLAG==1)
    1558:	80 91 44 03 	lds	r24, 0x0344
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 f4       	brne	.+36     	; 0x1584 <fork_uart1_command+0x34>
	{
	   handleAction(UART1_RECV_BUFFER[0]);
    1560:	80 91 13 03 	lds	r24, 0x0313
    1564:	0e 94 c5 0a 	call	0x158a	; 0x158a <handleAction>
	   handleAction(UART1_RECV_BUFFER[1]);
    1568:	80 91 14 03 	lds	r24, 0x0314
    156c:	0e 94 c5 0a 	call	0x158a	; 0x158a <handleAction>
	   handleAction(UART1_RECV_BUFFER[2]);
    1570:	80 91 15 03 	lds	r24, 0x0315
    1574:	0e 94 c5 0a 	call	0x158a	; 0x158a <handleAction>
	   handleAction(UART1_RECV_BUFFER[3]);
    1578:	80 91 16 03 	lds	r24, 0x0316
    157c:	0e 94 c5 0a 	call	0x158a	; 0x158a <handleAction>
		UART1_RECV_FLAG=0;
    1580:	10 92 44 03 	sts	0x0344, r1
	
	}

}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <handleAction>:

void handleAction(char buffer)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <handleAction+0x6>
    1590:	0f 92       	push	r0
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char temp;
    char tempc;

	if((buffer&0b11000000)==0b00000000)
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	80 7c       	andi	r24, 0xC0	; 192
    15a0:	90 70       	andi	r25, 0x00	; 0
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <handleAction+0x1e>
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <handleAction+0x9c>
	{
	   global_pwm=0x3FF/32*(buffer&0b00011111);
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9c 01       	movw	r18, r24
    15b0:	2f 71       	andi	r18, 0x1F	; 31
    15b2:	30 70       	andi	r19, 0x00	; 0
    15b4:	8f e1       	ldi	r24, 0x1F	; 31
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	ac 01       	movw	r20, r24
    15ba:	24 9f       	mul	r18, r20
    15bc:	c0 01       	movw	r24, r0
    15be:	25 9f       	mul	r18, r21
    15c0:	90 0d       	add	r25, r0
    15c2:	34 9f       	mul	r19, r20
    15c4:	90 0d       	add	r25, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	90 93 c4 03 	sts	0x03C4, r25
    15cc:	80 93 c3 03 	sts	0x03C3, r24
	   motor1_speed(0x3FF/32*(buffer&0b00011111));
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9c 01       	movw	r18, r24
    15d8:	2f 71       	andi	r18, 0x1F	; 31
    15da:	30 70       	andi	r19, 0x00	; 0
    15dc:	8f e1       	ldi	r24, 0x1F	; 31
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	ac 01       	movw	r20, r24
    15e2:	24 9f       	mul	r18, r20
    15e4:	c0 01       	movw	r24, r0
    15e6:	25 9f       	mul	r18, r21
    15e8:	90 0d       	add	r25, r0
    15ea:	34 9f       	mul	r19, r20
    15ec:	90 0d       	add	r25, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <motor1_speed>
	  // motor2_speed(0x3FF/32*(buffer&0b00011111));
	   if((buffer&0b00011111)==0)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	8f 71       	andi	r24, 0x1F	; 31
    15fc:	90 70       	andi	r25, 0x00	; 0
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	19 f4       	brne	.+6      	; 0x1608 <handleAction+0x7e>
	   {
	    motor1_stop();
    1602:	0e 94 1f 03 	call	0x63e	; 0x63e <motor1_stop>
    1606:	a7 c0       	rjmp	.+334    	; 0x1756 <handleAction+0x1cc>
		//motor2_stop();
	   }
	   else
	   {
		temp=buffer&0b00100000;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	80 72       	andi	r24, 0x20	; 32
    160c:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	88 23       	and	r24, r24
    1612:	19 f4       	brne	.+6      	; 0x161a <handleAction+0x90>
		   {
		    tempc='0';
    1614:	80 e3       	ldi	r24, 0x30	; 48
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	02 c0       	rjmp	.+4      	; 0x161e <handleAction+0x94>
		   }
        else 
		   {
		    tempc='1';
    161a:	81 e3       	ldi	r24, 0x31	; 49
    161c:	89 83       	std	Y+1, r24	; 0x01
		   } 
		motor1_start(tempc);
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <motor1_start>
    1624:	98 c0       	rjmp	.+304    	; 0x1756 <handleAction+0x1cc>
	   
	   }
	
	}
	
	else if((buffer&0b11000000)==0b01000000)
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	80 7c       	andi	r24, 0xC0	; 192
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	80 34       	cpi	r24, 0x40	; 64
    1632:	91 05       	cpc	r25, r1
    1634:	59 f5       	brne	.+86     	; 0x168c <handleAction+0x102>
	{
		motor2_speed(0x3FF/32*(buffer&0b00011111));
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9c 01       	movw	r18, r24
    163e:	2f 71       	andi	r18, 0x1F	; 31
    1640:	30 70       	andi	r19, 0x00	; 0
    1642:	8f e1       	ldi	r24, 0x1F	; 31
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	ac 01       	movw	r20, r24
    1648:	24 9f       	mul	r18, r20
    164a:	c0 01       	movw	r24, r0
    164c:	25 9f       	mul	r18, r21
    164e:	90 0d       	add	r25, r0
    1650:	34 9f       	mul	r19, r20
    1652:	90 0d       	add	r25, r0
    1654:	11 24       	eor	r1, r1
    1656:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <motor2_speed>
	   
	   if((buffer&0b00011111)==0)
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	8f 71       	andi	r24, 0x1F	; 31
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	19 f4       	brne	.+6      	; 0x166e <handleAction+0xe4>
	   {
	    motor2_stop();
    1668:	0e 94 ba 03 	call	0x774	; 0x774 <motor2_stop>
    166c:	74 c0       	rjmp	.+232    	; 0x1756 <handleAction+0x1cc>
		
	   }
	   else
	   {
		temp=buffer&0b00100000;
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	80 72       	andi	r24, 0x20	; 32
    1672:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	88 23       	and	r24, r24
    1678:	19 f4       	brne	.+6      	; 0x1680 <handleAction+0xf6>
		   {
		    tempc='0';
    167a:	80 e3       	ldi	r24, 0x30	; 48
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <handleAction+0xfa>
		   }
        else 
		   {
		    tempc='1';
    1680:	81 e3       	ldi	r24, 0x31	; 49
    1682:	89 83       	std	Y+1, r24	; 0x01
		   } 
		motor2_start(tempc);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	0e 94 6f 03 	call	0x6de	; 0x6de <motor2_start>
    168a:	65 c0       	rjmp	.+202    	; 0x1756 <handleAction+0x1cc>
	   
	   }
	
	}
	
	else if((buffer&0b11000000)==0b10000000)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	80 7c       	andi	r24, 0xC0	; 192
    1694:	90 70       	andi	r25, 0x00	; 0
    1696:	80 38       	cpi	r24, 0x80	; 128
    1698:	91 05       	cpc	r25, r1
    169a:	59 f5       	brne	.+86     	; 0x16f2 <handleAction+0x168>
	{
		motor3_speed(0x3FF/32*(buffer&0b00011111));
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9c 01       	movw	r18, r24
    16a4:	2f 71       	andi	r18, 0x1F	; 31
    16a6:	30 70       	andi	r19, 0x00	; 0
    16a8:	8f e1       	ldi	r24, 0x1F	; 31
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	ac 01       	movw	r20, r24
    16ae:	24 9f       	mul	r18, r20
    16b0:	c0 01       	movw	r24, r0
    16b2:	25 9f       	mul	r18, r21
    16b4:	90 0d       	add	r25, r0
    16b6:	34 9f       	mul	r19, r20
    16b8:	90 0d       	add	r25, r0
    16ba:	11 24       	eor	r1, r1
    16bc:	0e 94 10 05 	call	0xa20	; 0xa20 <motor3_speed>
	 
	   if((buffer&0b00011111)==0)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	8f 71       	andi	r24, 0x1F	; 31
    16c8:	90 70       	andi	r25, 0x00	; 0
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	19 f4       	brne	.+6      	; 0x16d4 <handleAction+0x14a>
	   {
	    motor3_stop();
    16ce:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motor3_stop>
    16d2:	41 c0       	rjmp	.+130    	; 0x1756 <handleAction+0x1cc>
		
	   }
	   else
	   {
		temp=buffer&0b00100000;
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	80 72       	andi	r24, 0x20	; 32
    16d8:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	88 23       	and	r24, r24
    16de:	19 f4       	brne	.+6      	; 0x16e6 <handleAction+0x15c>
		   {
		    tempc='0';
    16e0:	80 e3       	ldi	r24, 0x30	; 48
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <handleAction+0x160>
		   }
        else 
		   {
		    tempc='1';
    16e6:	81 e3       	ldi	r24, 0x31	; 49
    16e8:	89 83       	std	Y+1, r24	; 0x01
		   } 
		motor3_start(tempc);
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	0e 94 0a 04 	call	0x814	; 0x814 <motor3_start>
    16f0:	32 c0       	rjmp	.+100    	; 0x1756 <handleAction+0x1cc>
	   
	   }
	}
	else if((buffer&0b11000000)==0b11000000)
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	80 7c       	andi	r24, 0xC0	; 192
    16fa:	90 70       	andi	r25, 0x00	; 0
    16fc:	80 3c       	cpi	r24, 0xC0	; 192
    16fe:	91 05       	cpc	r25, r1
    1700:	51 f5       	brne	.+84     	; 0x1756 <handleAction+0x1cc>
	{
	
		motor4_speed(0x3FF/32*(buffer&0b00011111));
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9c 01       	movw	r18, r24
    170a:	2f 71       	andi	r18, 0x1F	; 31
    170c:	30 70       	andi	r19, 0x00	; 0
    170e:	8f e1       	ldi	r24, 0x1F	; 31
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	ac 01       	movw	r20, r24
    1714:	24 9f       	mul	r18, r20
    1716:	c0 01       	movw	r24, r0
    1718:	25 9f       	mul	r18, r21
    171a:	90 0d       	add	r25, r0
    171c:	34 9f       	mul	r19, r20
    171e:	90 0d       	add	r25, r0
    1720:	11 24       	eor	r1, r1
    1722:	0e 94 aa 05 	call	0xb54	; 0xb54 <motor4_speed>
	  
	   if((buffer&0b00011111)==0)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	8f 71       	andi	r24, 0x1F	; 31
    172e:	90 70       	andi	r25, 0x00	; 0
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	19 f4       	brne	.+6      	; 0x173a <handleAction+0x1b0>
	   {
	    motor4_stop();
    1734:	0e 94 73 05 	call	0xae6	; 0xae6 <motor4_stop>
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <handleAction+0x1cc>
	
	   }
	   else
	   {
    	temp=buffer&0b00100000;
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	80 72       	andi	r24, 0x20	; 32
    173e:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	88 23       	and	r24, r24
    1744:	19 f4       	brne	.+6      	; 0x174c <handleAction+0x1c2>
		   {
		    tempc='0';
    1746:	80 e3       	ldi	r24, 0x30	; 48
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <handleAction+0x1c6>
		   }
        else 
		   {
		    tempc='1';
    174c:	81 e3       	ldi	r24, 0x31	; 49
    174e:	89 83       	std	Y+1, r24	; 0x01
		   } 

		motor4_start(tempc);
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	0e 94 28 05 	call	0xa50	; 0xa50 <motor4_start>
	
	}
	


}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <fork_step_count>:
void fork_step_count()
{
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62

    if (global_yon_motor1_running==TRUE) {
    177a:	80 91 55 03 	lds	r24, 0x0355
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	09 f0       	breq	.+2      	; 0x1784 <fork_step_count+0x22>
    1782:	63 c0       	rjmp	.+198    	; 0x184a <fork_step_count+0xe8>
		if(motor1Step>=motor1CommandStep-fmin(motor1CommandStep*0.05,SLOW_STEP)&&motor1Step<motor1CommandStep)
    1784:	80 91 c8 03 	lds	r24, 0x03C8
    1788:	90 91 c9 03 	lds	r25, 0x03C9
    178c:	a0 91 ca 03 	lds	r26, 0x03CA
    1790:	b0 91 cb 03 	lds	r27, 0x03CB
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    179c:	5b 01       	movw	r10, r22
    179e:	6c 01       	movw	r12, r24
    17a0:	80 91 a8 03 	lds	r24, 0x03A8
    17a4:	90 91 a9 03 	lds	r25, 0x03A9
    17a8:	a0 91 aa 03 	lds	r26, 0x03AA
    17ac:	b0 91 ab 03 	lds	r27, 0x03AB
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    17b8:	7b 01       	movw	r14, r22
    17ba:	8c 01       	movw	r16, r24
    17bc:	80 91 a8 03 	lds	r24, 0x03A8
    17c0:	90 91 a9 03 	lds	r25, 0x03A9
    17c4:	a0 91 aa 03 	lds	r26, 0x03AA
    17c8:	b0 91 ab 03 	lds	r27, 0x03AB
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	2d ec       	ldi	r18, 0xCD	; 205
    17de:	3c ec       	ldi	r19, 0xCC	; 204
    17e0:	4c e4       	ldi	r20, 0x4C	; 76
    17e2:	5d e3       	ldi	r21, 0x3D	; 61
    17e4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <fmin>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	c8 01       	movw	r24, r16
    1802:	b7 01       	movw	r22, r14
    1804:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9c 01       	movw	r18, r24
    180e:	ad 01       	movw	r20, r26
    1810:	c6 01       	movw	r24, r12
    1812:	b5 01       	movw	r22, r10
    1814:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    1818:	88 23       	and	r24, r24
    181a:	bc f0       	brlt	.+46     	; 0x184a <fork_step_count+0xe8>
    181c:	20 91 c8 03 	lds	r18, 0x03C8
    1820:	30 91 c9 03 	lds	r19, 0x03C9
    1824:	40 91 ca 03 	lds	r20, 0x03CA
    1828:	50 91 cb 03 	lds	r21, 0x03CB
    182c:	80 91 a8 03 	lds	r24, 0x03A8
    1830:	90 91 a9 03 	lds	r25, 0x03A9
    1834:	a0 91 aa 03 	lds	r26, 0x03AA
    1838:	b0 91 ab 03 	lds	r27, 0x03AB
    183c:	28 17       	cp	r18, r24
    183e:	39 07       	cpc	r19, r25
    1840:	4a 07       	cpc	r20, r26
    1842:	5b 07       	cpc	r21, r27
    1844:	14 f4       	brge	.+4      	; 0x184a <fork_step_count+0xe8>
	{
		motor1_slow();
    1846:	0e 94 3b 03 	call	0x676	; 0x676 <motor1_slow>
	 }
	 }

     if (global_yon_motor2_running==TRUE) {
    184a:	80 91 c2 03 	lds	r24, 0x03C2
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	09 f0       	breq	.+2      	; 0x1854 <fork_step_count+0xf2>
    1852:	63 c0       	rjmp	.+198    	; 0x191a <fork_step_count+0x1b8>
     	if(motor2Step>=motor2CommandStep-fmin(motor2CommandStep*0.05,SLOW_STEP)&&motor2Step<motor2CommandStep)
    1854:	80 91 ba 03 	lds	r24, 0x03BA
    1858:	90 91 bb 03 	lds	r25, 0x03BB
    185c:	a0 91 bc 03 	lds	r26, 0x03BC
    1860:	b0 91 bd 03 	lds	r27, 0x03BD
    1864:	bc 01       	movw	r22, r24
    1866:	cd 01       	movw	r24, r26
    1868:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    186c:	5b 01       	movw	r10, r22
    186e:	6c 01       	movw	r12, r24
    1870:	80 91 0a 03 	lds	r24, 0x030A
    1874:	90 91 0b 03 	lds	r25, 0x030B
    1878:	a0 91 0c 03 	lds	r26, 0x030C
    187c:	b0 91 0d 03 	lds	r27, 0x030D
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1888:	7b 01       	movw	r14, r22
    188a:	8c 01       	movw	r16, r24
    188c:	80 91 0a 03 	lds	r24, 0x030A
    1890:	90 91 0b 03 	lds	r25, 0x030B
    1894:	a0 91 0c 03 	lds	r26, 0x030C
    1898:	b0 91 0d 03 	lds	r27, 0x030D
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	2d ec       	ldi	r18, 0xCD	; 205
    18ae:	3c ec       	ldi	r19, 0xCC	; 204
    18b0:	4c e4       	ldi	r20, 0x4C	; 76
    18b2:	5d e3       	ldi	r21, 0x3D	; 61
    18b4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <fmin>
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	c8 01       	movw	r24, r16
    18d2:	b7 01       	movw	r22, r14
    18d4:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9c 01       	movw	r18, r24
    18de:	ad 01       	movw	r20, r26
    18e0:	c6 01       	movw	r24, r12
    18e2:	b5 01       	movw	r22, r10
    18e4:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    18e8:	88 23       	and	r24, r24
    18ea:	bc f0       	brlt	.+46     	; 0x191a <fork_step_count+0x1b8>
    18ec:	20 91 ba 03 	lds	r18, 0x03BA
    18f0:	30 91 bb 03 	lds	r19, 0x03BB
    18f4:	40 91 bc 03 	lds	r20, 0x03BC
    18f8:	50 91 bd 03 	lds	r21, 0x03BD
    18fc:	80 91 0a 03 	lds	r24, 0x030A
    1900:	90 91 0b 03 	lds	r25, 0x030B
    1904:	a0 91 0c 03 	lds	r26, 0x030C
    1908:	b0 91 0d 03 	lds	r27, 0x030D
    190c:	28 17       	cp	r18, r24
    190e:	39 07       	cpc	r19, r25
    1910:	4a 07       	cpc	r20, r26
    1912:	5b 07       	cpc	r21, r27
    1914:	14 f4       	brge	.+4      	; 0x191a <fork_step_count+0x1b8>
	{
		motor2_slow();
    1916:	0e 94 d6 03 	call	0x7ac	; 0x7ac <motor2_slow>
	 }
	 }

     if (global_yon_motor3_running==TRUE) {
    191a:	80 91 b9 03 	lds	r24, 0x03B9
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	09 f0       	breq	.+2      	; 0x1924 <fork_step_count+0x1c2>
    1922:	63 c0       	rjmp	.+198    	; 0x19ea <fork_step_count+0x288>
	 	if(motor3Step>=motor3CommandStep-fmin(motor3CommandStep*0.05,SLOW_STEP)&&motor3Step<motor3CommandStep)
    1924:	80 91 25 03 	lds	r24, 0x0325
    1928:	90 91 26 03 	lds	r25, 0x0326
    192c:	a0 91 27 03 	lds	r26, 0x0327
    1930:	b0 91 28 03 	lds	r27, 0x0328
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    193c:	5b 01       	movw	r10, r22
    193e:	6c 01       	movw	r12, r24
    1940:	80 91 82 03 	lds	r24, 0x0382
    1944:	90 91 83 03 	lds	r25, 0x0383
    1948:	a0 91 84 03 	lds	r26, 0x0384
    194c:	b0 91 85 03 	lds	r27, 0x0385
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1958:	7b 01       	movw	r14, r22
    195a:	8c 01       	movw	r16, r24
    195c:	80 91 82 03 	lds	r24, 0x0382
    1960:	90 91 83 03 	lds	r25, 0x0383
    1964:	a0 91 84 03 	lds	r26, 0x0384
    1968:	b0 91 85 03 	lds	r27, 0x0385
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	2d ec       	ldi	r18, 0xCD	; 205
    197e:	3c ec       	ldi	r19, 0xCC	; 204
    1980:	4c e4       	ldi	r20, 0x4C	; 76
    1982:	5d e3       	ldi	r21, 0x3D	; 61
    1984:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <fmin>
    199c:	9b 01       	movw	r18, r22
    199e:	ac 01       	movw	r20, r24
    19a0:	c8 01       	movw	r24, r16
    19a2:	b7 01       	movw	r22, r14
    19a4:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	9c 01       	movw	r18, r24
    19ae:	ad 01       	movw	r20, r26
    19b0:	c6 01       	movw	r24, r12
    19b2:	b5 01       	movw	r22, r10
    19b4:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    19b8:	88 23       	and	r24, r24
    19ba:	bc f0       	brlt	.+46     	; 0x19ea <fork_step_count+0x288>
    19bc:	20 91 25 03 	lds	r18, 0x0325
    19c0:	30 91 26 03 	lds	r19, 0x0326
    19c4:	40 91 27 03 	lds	r20, 0x0327
    19c8:	50 91 28 03 	lds	r21, 0x0328
    19cc:	80 91 82 03 	lds	r24, 0x0382
    19d0:	90 91 83 03 	lds	r25, 0x0383
    19d4:	a0 91 84 03 	lds	r26, 0x0384
    19d8:	b0 91 85 03 	lds	r27, 0x0385
    19dc:	28 17       	cp	r18, r24
    19de:	39 07       	cpc	r19, r25
    19e0:	4a 07       	cpc	r20, r26
    19e2:	5b 07       	cpc	r21, r27
    19e4:	14 f4       	brge	.+4      	; 0x19ea <fork_step_count+0x288>
	{
		motor3_slow();
    19e6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <motor3_slow>
	 }
	 }

     if (global_yon_motor4_running==TRUE) {
    19ea:	80 91 89 03 	lds	r24, 0x0389
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <fork_step_count+0x292>
    19f2:	63 c0       	rjmp	.+198    	; 0x1aba <fork_step_count+0x358>
	 	if(motor4Step>=motor4CommandStep-fmin(motor4CommandStep*0.05,SLOW_STEP)&&motor4Step<motor4CommandStep)
    19f4:	80 91 be 03 	lds	r24, 0x03BE
    19f8:	90 91 bf 03 	lds	r25, 0x03BF
    19fc:	a0 91 c0 03 	lds	r26, 0x03C0
    1a00:	b0 91 c1 03 	lds	r27, 0x03C1
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1a0c:	5b 01       	movw	r10, r22
    1a0e:	6c 01       	movw	r12, r24
    1a10:	80 91 a4 03 	lds	r24, 0x03A4
    1a14:	90 91 a5 03 	lds	r25, 0x03A5
    1a18:	a0 91 a6 03 	lds	r26, 0x03A6
    1a1c:	b0 91 a7 03 	lds	r27, 0x03A7
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1a28:	7b 01       	movw	r14, r22
    1a2a:	8c 01       	movw	r16, r24
    1a2c:	80 91 a4 03 	lds	r24, 0x03A4
    1a30:	90 91 a5 03 	lds	r25, 0x03A5
    1a34:	a0 91 a6 03 	lds	r26, 0x03A6
    1a38:	b0 91 a7 03 	lds	r27, 0x03A7
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	2d ec       	ldi	r18, 0xCD	; 205
    1a4e:	3c ec       	ldi	r19, 0xCC	; 204
    1a50:	4c e4       	ldi	r20, 0x4C	; 76
    1a52:	5d e3       	ldi	r21, 0x3D	; 61
    1a54:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <fmin>
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	ac 01       	movw	r20, r24
    1a70:	c8 01       	movw	r24, r16
    1a72:	b7 01       	movw	r22, r14
    1a74:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	ad 01       	movw	r20, r26
    1a80:	c6 01       	movw	r24, r12
    1a82:	b5 01       	movw	r22, r10
    1a84:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	bc f0       	brlt	.+46     	; 0x1aba <fork_step_count+0x358>
    1a8c:	20 91 be 03 	lds	r18, 0x03BE
    1a90:	30 91 bf 03 	lds	r19, 0x03BF
    1a94:	40 91 c0 03 	lds	r20, 0x03C0
    1a98:	50 91 c1 03 	lds	r21, 0x03C1
    1a9c:	80 91 a4 03 	lds	r24, 0x03A4
    1aa0:	90 91 a5 03 	lds	r25, 0x03A5
    1aa4:	a0 91 a6 03 	lds	r26, 0x03A6
    1aa8:	b0 91 a7 03 	lds	r27, 0x03A7
    1aac:	28 17       	cp	r18, r24
    1aae:	39 07       	cpc	r19, r25
    1ab0:	4a 07       	cpc	r20, r26
    1ab2:	5b 07       	cpc	r21, r27
    1ab4:	14 f4       	brge	.+4      	; 0x1aba <fork_step_count+0x358>
	{
		motor4_slow();
    1ab6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <motor4_slow>
	 }
     }

     if (global_yon_motor5_running==TRUE) {
    1aba:	80 91 33 03 	lds	r24, 0x0333
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <fork_step_count+0x362>
    1ac2:	63 c0       	rjmp	.+198    	; 0x1b8a <fork_step_count+0x428>
	 	if(motor5Step>=motor5CommandStep-fmin(motor5CommandStep*0.05,SLOW_STEP)&&motor5Step<motor5CommandStep)
    1ac4:	80 91 7c 03 	lds	r24, 0x037C
    1ac8:	90 91 7d 03 	lds	r25, 0x037D
    1acc:	a0 91 7e 03 	lds	r26, 0x037E
    1ad0:	b0 91 7f 03 	lds	r27, 0x037F
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1adc:	5b 01       	movw	r10, r22
    1ade:	6c 01       	movw	r12, r24
    1ae0:	80 91 21 03 	lds	r24, 0x0321
    1ae4:	90 91 22 03 	lds	r25, 0x0322
    1ae8:	a0 91 23 03 	lds	r26, 0x0323
    1aec:	b0 91 24 03 	lds	r27, 0x0324
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1af8:	7b 01       	movw	r14, r22
    1afa:	8c 01       	movw	r16, r24
    1afc:	80 91 21 03 	lds	r24, 0x0321
    1b00:	90 91 22 03 	lds	r25, 0x0322
    1b04:	a0 91 23 03 	lds	r26, 0x0323
    1b08:	b0 91 24 03 	lds	r27, 0x0324
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	2d ec       	ldi	r18, 0xCD	; 205
    1b1e:	3c ec       	ldi	r19, 0xCC	; 204
    1b20:	4c e4       	ldi	r20, 0x4C	; 76
    1b22:	5d e3       	ldi	r21, 0x3D	; 61
    1b24:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <fmin>
    1b3c:	9b 01       	movw	r18, r22
    1b3e:	ac 01       	movw	r20, r24
    1b40:	c8 01       	movw	r24, r16
    1b42:	b7 01       	movw	r22, r14
    1b44:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9c 01       	movw	r18, r24
    1b4e:	ad 01       	movw	r20, r26
    1b50:	c6 01       	movw	r24, r12
    1b52:	b5 01       	movw	r22, r10
    1b54:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	bc f0       	brlt	.+46     	; 0x1b8a <fork_step_count+0x428>
    1b5c:	20 91 7c 03 	lds	r18, 0x037C
    1b60:	30 91 7d 03 	lds	r19, 0x037D
    1b64:	40 91 7e 03 	lds	r20, 0x037E
    1b68:	50 91 7f 03 	lds	r21, 0x037F
    1b6c:	80 91 21 03 	lds	r24, 0x0321
    1b70:	90 91 22 03 	lds	r25, 0x0322
    1b74:	a0 91 23 03 	lds	r26, 0x0323
    1b78:	b0 91 24 03 	lds	r27, 0x0324
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	4a 07       	cpc	r20, r26
    1b82:	5b 07       	cpc	r21, r27
    1b84:	14 f4       	brge	.+4      	; 0x1b8a <fork_step_count+0x428>
	{
		motor5_slow();
    1b86:	0e 94 29 06 	call	0xc52	; 0xc52 <motor5_slow>
	 }
	 }

     if (global_yon_motor6_running==TRUE) {
    1b8a:	80 91 c5 03 	lds	r24, 0x03C5
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <fork_step_count+0x432>
    1b92:	63 c0       	rjmp	.+198    	; 0x1c5a <fork_step_count+0x4f8>
	 	if(motor6Step>=motor6CommandStep-fmin(motor6CommandStep*0.05,SLOW_STEP)&&motor6Step<motor1CommandStep)
    1b94:	80 91 47 03 	lds	r24, 0x0347
    1b98:	90 91 48 03 	lds	r25, 0x0348
    1b9c:	a0 91 49 03 	lds	r26, 0x0349
    1ba0:	b0 91 4a 03 	lds	r27, 0x034A
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1bac:	5b 01       	movw	r10, r22
    1bae:	6c 01       	movw	r12, r24
    1bb0:	80 91 92 03 	lds	r24, 0x0392
    1bb4:	90 91 93 03 	lds	r25, 0x0393
    1bb8:	a0 91 94 03 	lds	r26, 0x0394
    1bbc:	b0 91 95 03 	lds	r27, 0x0395
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1bc8:	7b 01       	movw	r14, r22
    1bca:	8c 01       	movw	r16, r24
    1bcc:	80 91 92 03 	lds	r24, 0x0392
    1bd0:	90 91 93 03 	lds	r25, 0x0393
    1bd4:	a0 91 94 03 	lds	r26, 0x0394
    1bd8:	b0 91 95 03 	lds	r27, 0x0395
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__floatsisf>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	2d ec       	ldi	r18, 0xCD	; 205
    1bee:	3c ec       	ldi	r19, 0xCC	; 204
    1bf0:	4c e4       	ldi	r20, 0x4C	; 76
    1bf2:	5d e3       	ldi	r21, 0x3D	; 61
    1bf4:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e2       	ldi	r20, 0x20	; 32
    1c06:	51 e4       	ldi	r21, 0x41	; 65
    1c08:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <fmin>
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	c8 01       	movw	r24, r16
    1c12:	b7 01       	movw	r22, r14
    1c14:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	ad 01       	movw	r20, r26
    1c20:	c6 01       	movw	r24, r12
    1c22:	b5 01       	movw	r22, r10
    1c24:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	bc f0       	brlt	.+46     	; 0x1c5a <fork_step_count+0x4f8>
    1c2c:	20 91 47 03 	lds	r18, 0x0347
    1c30:	30 91 48 03 	lds	r19, 0x0348
    1c34:	40 91 49 03 	lds	r20, 0x0349
    1c38:	50 91 4a 03 	lds	r21, 0x034A
    1c3c:	80 91 a8 03 	lds	r24, 0x03A8
    1c40:	90 91 a9 03 	lds	r25, 0x03A9
    1c44:	a0 91 aa 03 	lds	r26, 0x03AA
    1c48:	b0 91 ab 03 	lds	r27, 0x03AB
    1c4c:	28 17       	cp	r18, r24
    1c4e:	39 07       	cpc	r19, r25
    1c50:	4a 07       	cpc	r20, r26
    1c52:	5b 07       	cpc	r21, r27
    1c54:	14 f4       	brge	.+4      	; 0x1c5a <fork_step_count+0x4f8>
	{
		motor6_slow();
    1c56:	0e 94 c4 06 	call	0xd88	; 0xd88 <motor6_slow>
	 }
	 }

     if (global_yon_motor1_running==TRUE) {
    1c5a:	80 91 55 03 	lds	r24, 0x0355
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	09 f5       	brne	.+66     	; 0x1ca4 <fork_step_count+0x542>
		if(motor1CommandStep<=motor1Step)
    1c62:	20 91 a8 03 	lds	r18, 0x03A8
    1c66:	30 91 a9 03 	lds	r19, 0x03A9
    1c6a:	40 91 aa 03 	lds	r20, 0x03AA
    1c6e:	50 91 ab 03 	lds	r21, 0x03AB
    1c72:	80 91 c8 03 	lds	r24, 0x03C8
    1c76:	90 91 c9 03 	lds	r25, 0x03C9
    1c7a:	a0 91 ca 03 	lds	r26, 0x03CA
    1c7e:	b0 91 cb 03 	lds	r27, 0x03CB
    1c82:	82 17       	cp	r24, r18
    1c84:	93 07       	cpc	r25, r19
    1c86:	a4 07       	cpc	r26, r20
    1c88:	b5 07       	cpc	r27, r21
    1c8a:	64 f0       	brlt	.+24     	; 0x1ca4 <fork_step_count+0x542>
	{
		motor1_stop();
    1c8c:	0e 94 1f 03 	call	0x63e	; 0x63e <motor1_stop>
        global_yon_motor1_running=FALSE;
    1c90:	10 92 55 03 	sts	0x0355, r1
		motor1Step=0;
    1c94:	10 92 c8 03 	sts	0x03C8, r1
    1c98:	10 92 c9 03 	sts	0x03C9, r1
    1c9c:	10 92 ca 03 	sts	0x03CA, r1
    1ca0:	10 92 cb 03 	sts	0x03CB, r1
	 }
	 }

     if (global_yon_motor2_running==TRUE) {
    1ca4:	80 91 c2 03 	lds	r24, 0x03C2
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f5       	brne	.+66     	; 0x1cee <fork_step_count+0x58c>
	 	if(motor2CommandStep<=motor2Step)  
    1cac:	20 91 0a 03 	lds	r18, 0x030A
    1cb0:	30 91 0b 03 	lds	r19, 0x030B
    1cb4:	40 91 0c 03 	lds	r20, 0x030C
    1cb8:	50 91 0d 03 	lds	r21, 0x030D
    1cbc:	80 91 ba 03 	lds	r24, 0x03BA
    1cc0:	90 91 bb 03 	lds	r25, 0x03BB
    1cc4:	a0 91 bc 03 	lds	r26, 0x03BC
    1cc8:	b0 91 bd 03 	lds	r27, 0x03BD
    1ccc:	82 17       	cp	r24, r18
    1cce:	93 07       	cpc	r25, r19
    1cd0:	a4 07       	cpc	r26, r20
    1cd2:	b5 07       	cpc	r27, r21
    1cd4:	64 f0       	brlt	.+24     	; 0x1cee <fork_step_count+0x58c>
	{
		motor2_stop();
    1cd6:	0e 94 ba 03 	call	0x774	; 0x774 <motor2_stop>
        global_yon_motor2_running=FALSE;
    1cda:	10 92 c2 03 	sts	0x03C2, r1
		motor2Step=0;
    1cde:	10 92 ba 03 	sts	0x03BA, r1
    1ce2:	10 92 bb 03 	sts	0x03BB, r1
    1ce6:	10 92 bc 03 	sts	0x03BC, r1
    1cea:	10 92 bd 03 	sts	0x03BD, r1
	 }
	 }

     if (global_yon_motor3_running==TRUE) {
    1cee:	80 91 b9 03 	lds	r24, 0x03B9
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	09 f5       	brne	.+66     	; 0x1d38 <fork_step_count+0x5d6>
		if(motor3CommandStep<=motor3Step)
    1cf6:	20 91 82 03 	lds	r18, 0x0382
    1cfa:	30 91 83 03 	lds	r19, 0x0383
    1cfe:	40 91 84 03 	lds	r20, 0x0384
    1d02:	50 91 85 03 	lds	r21, 0x0385
    1d06:	80 91 25 03 	lds	r24, 0x0325
    1d0a:	90 91 26 03 	lds	r25, 0x0326
    1d0e:	a0 91 27 03 	lds	r26, 0x0327
    1d12:	b0 91 28 03 	lds	r27, 0x0328
    1d16:	82 17       	cp	r24, r18
    1d18:	93 07       	cpc	r25, r19
    1d1a:	a4 07       	cpc	r26, r20
    1d1c:	b5 07       	cpc	r27, r21
    1d1e:	64 f0       	brlt	.+24     	; 0x1d38 <fork_step_count+0x5d6>
	{
		motor3_stop();
    1d20:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motor3_stop>
        global_yon_motor3_running=FALSE;
    1d24:	10 92 b9 03 	sts	0x03B9, r1
		motor3Step=0;
    1d28:	10 92 25 03 	sts	0x0325, r1
    1d2c:	10 92 26 03 	sts	0x0326, r1
    1d30:	10 92 27 03 	sts	0x0327, r1
    1d34:	10 92 28 03 	sts	0x0328, r1
	 }
	 }

     if (global_yon_motor4_running==TRUE) {
    1d38:	80 91 89 03 	lds	r24, 0x0389
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	09 f5       	brne	.+66     	; 0x1d82 <fork_step_count+0x620>
	 	if(motor4CommandStep<=motor4Step)
    1d40:	20 91 a4 03 	lds	r18, 0x03A4
    1d44:	30 91 a5 03 	lds	r19, 0x03A5
    1d48:	40 91 a6 03 	lds	r20, 0x03A6
    1d4c:	50 91 a7 03 	lds	r21, 0x03A7
    1d50:	80 91 be 03 	lds	r24, 0x03BE
    1d54:	90 91 bf 03 	lds	r25, 0x03BF
    1d58:	a0 91 c0 03 	lds	r26, 0x03C0
    1d5c:	b0 91 c1 03 	lds	r27, 0x03C1
    1d60:	82 17       	cp	r24, r18
    1d62:	93 07       	cpc	r25, r19
    1d64:	a4 07       	cpc	r26, r20
    1d66:	b5 07       	cpc	r27, r21
    1d68:	64 f0       	brlt	.+24     	; 0x1d82 <fork_step_count+0x620>
	{
		motor4_stop();
    1d6a:	0e 94 73 05 	call	0xae6	; 0xae6 <motor4_stop>
        global_yon_motor4_running=FALSE;
    1d6e:	10 92 89 03 	sts	0x0389, r1
		motor4Step=0;
    1d72:	10 92 be 03 	sts	0x03BE, r1
    1d76:	10 92 bf 03 	sts	0x03BF, r1
    1d7a:	10 92 c0 03 	sts	0x03C0, r1
    1d7e:	10 92 c1 03 	sts	0x03C1, r1
	 }
	 }

     if (global_yon_motor5_running==TRUE) {
    1d82:	80 91 33 03 	lds	r24, 0x0333
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	09 f5       	brne	.+66     	; 0x1dcc <fork_step_count+0x66a>
	 	if(motor5CommandStep<=motor5Step)
    1d8a:	20 91 21 03 	lds	r18, 0x0321
    1d8e:	30 91 22 03 	lds	r19, 0x0322
    1d92:	40 91 23 03 	lds	r20, 0x0323
    1d96:	50 91 24 03 	lds	r21, 0x0324
    1d9a:	80 91 7c 03 	lds	r24, 0x037C
    1d9e:	90 91 7d 03 	lds	r25, 0x037D
    1da2:	a0 91 7e 03 	lds	r26, 0x037E
    1da6:	b0 91 7f 03 	lds	r27, 0x037F
    1daa:	82 17       	cp	r24, r18
    1dac:	93 07       	cpc	r25, r19
    1dae:	a4 07       	cpc	r26, r20
    1db0:	b5 07       	cpc	r27, r21
    1db2:	64 f0       	brlt	.+24     	; 0x1dcc <fork_step_count+0x66a>
	{
		motor5_stop();
    1db4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <motor5_stop>
        global_yon_motor5_running=FALSE;
    1db8:	10 92 33 03 	sts	0x0333, r1
		motor5Step=0;
    1dbc:	10 92 7c 03 	sts	0x037C, r1
    1dc0:	10 92 7d 03 	sts	0x037D, r1
    1dc4:	10 92 7e 03 	sts	0x037E, r1
    1dc8:	10 92 7f 03 	sts	0x037F, r1
	 }
	 }

     if (global_yon_motor6_running==TRUE) {
    1dcc:	80 91 c5 03 	lds	r24, 0x03C5
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	09 f5       	brne	.+66     	; 0x1e16 <fork_step_count+0x6b4>
	    if(motor6CommandStep<=motor6Step)
    1dd4:	20 91 92 03 	lds	r18, 0x0392
    1dd8:	30 91 93 03 	lds	r19, 0x0393
    1ddc:	40 91 94 03 	lds	r20, 0x0394
    1de0:	50 91 95 03 	lds	r21, 0x0395
    1de4:	80 91 47 03 	lds	r24, 0x0347
    1de8:	90 91 48 03 	lds	r25, 0x0348
    1dec:	a0 91 49 03 	lds	r26, 0x0349
    1df0:	b0 91 4a 03 	lds	r27, 0x034A
    1df4:	82 17       	cp	r24, r18
    1df6:	93 07       	cpc	r25, r19
    1df8:	a4 07       	cpc	r26, r20
    1dfa:	b5 07       	cpc	r27, r21
    1dfc:	64 f0       	brlt	.+24     	; 0x1e16 <fork_step_count+0x6b4>
	{
		motor6_stop();
    1dfe:	0e 94 a8 06 	call	0xd50	; 0xd50 <motor6_stop>
        global_yon_motor6_running=FALSE;
    1e02:	10 92 c5 03 	sts	0x03C5, r1
		motor6Step=0;
    1e06:	10 92 47 03 	sts	0x0347, r1
    1e0a:	10 92 48 03 	sts	0x0348, r1
    1e0e:	10 92 49 03 	sts	0x0349, r1
    1e12:	10 92 4a 03 	sts	0x034A, r1
	 }
	 }
}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	cf 90       	pop	r12
    1e26:	bf 90       	pop	r11
    1e28:	af 90       	pop	r10
    1e2a:	08 95       	ret

00001e2c <fork_jiance>:

void fork_jiance()
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
	
	
	if(((PINK&0x01)==0&&Motor1Status==MOTOR_FORWARD)||((PINK&0x02)==0&&Motor1Status==MOTOR_BACKWARD))
    1e34:	e6 e0       	ldi	r30, 0x06	; 6
    1e36:	f1 e0       	ldi	r31, 0x01	; 1
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	81 70       	andi	r24, 0x01	; 1
    1e40:	90 70       	andi	r25, 0x00	; 0
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	21 f4       	brne	.+8      	; 0x1e4e <fork_jiance+0x22>
    1e46:	80 91 96 03 	lds	r24, 0x0396
    1e4a:	81 33       	cpi	r24, 0x31	; 49
    1e4c:	69 f0       	breq	.+26     	; 0x1e68 <fork_jiance+0x3c>
    1e4e:	e6 e0       	ldi	r30, 0x06	; 6
    1e50:	f1 e0       	ldi	r31, 0x01	; 1
    1e52:	80 81       	ld	r24, Z
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	82 70       	andi	r24, 0x02	; 2
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	81 f4       	brne	.+32     	; 0x1e80 <fork_jiance+0x54>
    1e60:	80 91 96 03 	lds	r24, 0x0396
    1e64:	80 33       	cpi	r24, 0x30	; 48
    1e66:	61 f4       	brne	.+24     	; 0x1e80 <fork_jiance+0x54>
	{
		motor1_stop();
    1e68:	0e 94 1f 03 	call	0x63e	; 0x63e <motor1_stop>
		
        global_yon_motor1_running=FALSE;
    1e6c:	10 92 55 03 	sts	0x0355, r1
      
		motor1Step=0;
    1e70:	10 92 c8 03 	sts	0x03C8, r1
    1e74:	10 92 c9 03 	sts	0x03C9, r1
    1e78:	10 92 ca 03 	sts	0x03CA, r1
    1e7c:	10 92 cb 03 	sts	0x03CB, r1
		
	}
	if(((PINK&0x04)==0&&Motor2Status==MOTOR_FORWARD)||((PINK&0x08)==0&&Motor2Status==MOTOR_BACKWARD))
    1e80:	e6 e0       	ldi	r30, 0x06	; 6
    1e82:	f1 e0       	ldi	r31, 0x01	; 1
    1e84:	80 81       	ld	r24, Z
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	84 70       	andi	r24, 0x04	; 4
    1e8c:	90 70       	andi	r25, 0x00	; 0
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	21 f4       	brne	.+8      	; 0x1e9a <fork_jiance+0x6e>
    1e92:	80 91 88 03 	lds	r24, 0x0388
    1e96:	81 33       	cpi	r24, 0x31	; 49
    1e98:	69 f0       	breq	.+26     	; 0x1eb4 <fork_jiance+0x88>
    1e9a:	e6 e0       	ldi	r30, 0x06	; 6
    1e9c:	f1 e0       	ldi	r31, 0x01	; 1
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	88 70       	andi	r24, 0x08	; 8
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	81 f4       	brne	.+32     	; 0x1ecc <fork_jiance+0xa0>
    1eac:	80 91 88 03 	lds	r24, 0x0388
    1eb0:	80 33       	cpi	r24, 0x30	; 48
    1eb2:	61 f4       	brne	.+24     	; 0x1ecc <fork_jiance+0xa0>
	{
		motor2_stop();
    1eb4:	0e 94 ba 03 	call	0x774	; 0x774 <motor2_stop>
        global_yon_motor2_running=FALSE;
    1eb8:	10 92 c2 03 	sts	0x03C2, r1
		motor2Step=0;
    1ebc:	10 92 ba 03 	sts	0x03BA, r1
    1ec0:	10 92 bb 03 	sts	0x03BB, r1
    1ec4:	10 92 bc 03 	sts	0x03BC, r1
    1ec8:	10 92 bd 03 	sts	0x03BD, r1
	
	}

	if(((PINK&0x10)==0&&Motor4Status==MOTOR_FORWARD)||((PINK&0x20)==0&&Motor4Status==MOTOR_BACKWARD))
    1ecc:	e6 e0       	ldi	r30, 0x06	; 6
    1ece:	f1 e0       	ldi	r31, 0x01	; 1
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	80 71       	andi	r24, 0x10	; 16
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <fork_jiance+0xba>
    1ede:	80 91 39 03 	lds	r24, 0x0339
    1ee2:	81 33       	cpi	r24, 0x31	; 49
    1ee4:	69 f0       	breq	.+26     	; 0x1f00 <fork_jiance+0xd4>
    1ee6:	e6 e0       	ldi	r30, 0x06	; 6
    1ee8:	f1 e0       	ldi	r31, 0x01	; 1
    1eea:	80 81       	ld	r24, Z
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	80 72       	andi	r24, 0x20	; 32
    1ef2:	90 70       	andi	r25, 0x00	; 0
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	81 f4       	brne	.+32     	; 0x1f18 <fork_jiance+0xec>
    1ef8:	80 91 39 03 	lds	r24, 0x0339
    1efc:	80 33       	cpi	r24, 0x30	; 48
    1efe:	61 f4       	brne	.+24     	; 0x1f18 <fork_jiance+0xec>
	{
		motor3_stop();
    1f00:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motor3_stop>
        global_yon_motor3_running=FALSE;
    1f04:	10 92 b9 03 	sts	0x03B9, r1
		motor3Step=0;
    1f08:	10 92 25 03 	sts	0x0325, r1
    1f0c:	10 92 26 03 	sts	0x0326, r1
    1f10:	10 92 27 03 	sts	0x0327, r1
    1f14:	10 92 28 03 	sts	0x0328, r1
	
	}

	if(((PINK&0x40)==0&&Motor5Status==MOTOR_FORWARD)||((PINK&0x80)==0&&Motor5Status==MOTOR_BACKWARD))
    1f18:	e6 e0       	ldi	r30, 0x06	; 6
    1f1a:	f1 e0       	ldi	r31, 0x01	; 1
    1f1c:	80 81       	ld	r24, Z
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	80 74       	andi	r24, 0x40	; 64
    1f24:	90 70       	andi	r25, 0x00	; 0
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	21 f4       	brne	.+8      	; 0x1f32 <fork_jiance+0x106>
    1f2a:	80 91 58 03 	lds	r24, 0x0358
    1f2e:	81 33       	cpi	r24, 0x31	; 49
    1f30:	49 f0       	breq	.+18     	; 0x1f44 <fork_jiance+0x118>
    1f32:	e6 e0       	ldi	r30, 0x06	; 6
    1f34:	f1 e0       	ldi	r31, 0x01	; 1
    1f36:	80 81       	ld	r24, Z
    1f38:	88 23       	and	r24, r24
    1f3a:	84 f0       	brlt	.+32     	; 0x1f5c <fork_jiance+0x130>
    1f3c:	80 91 58 03 	lds	r24, 0x0358
    1f40:	80 33       	cpi	r24, 0x30	; 48
    1f42:	61 f4       	brne	.+24     	; 0x1f5c <fork_jiance+0x130>
	{
		motor4_stop();
    1f44:	0e 94 73 05 	call	0xae6	; 0xae6 <motor4_stop>
        global_yon_motor4_running=FALSE;
    1f48:	10 92 89 03 	sts	0x0389, r1
		motor4Step=0;
    1f4c:	10 92 be 03 	sts	0x03BE, r1
    1f50:	10 92 bf 03 	sts	0x03BF, r1
    1f54:	10 92 c0 03 	sts	0x03C0, r1
    1f58:	10 92 c1 03 	sts	0x03C1, r1
	}
	

}
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <USART0_Transmit_Str>:

void USART0_Transmit_Str(char *data)

{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <USART0_Transmit_Str+0x6>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	0b c0       	rjmp	.+22     	; 0x1f88 <USART0_Transmit_Str+0x26>
  while(*data!='\0')
     USART0_Transmit(*data++);
    1f72:	e9 81       	ldd	r30, Y+1	; 0x01
    1f74:	fa 81       	ldd	r31, Y+2	; 0x02
    1f76:	20 81       	ld	r18, Z
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	82 2f       	mov	r24, r18
    1f84:	0e 94 87 02 	call	0x50e	; 0x50e <USART0_Transmit>
}

void USART0_Transmit_Str(char *data)

{
  while(*data!='\0')
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 23       	and	r24, r24
    1f90:	81 f7       	brne	.-32     	; 0x1f72 <USART0_Transmit_Str+0x10>
     USART0_Transmit(*data++);
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <main>:
int main()
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	2a 97       	sbiw	r28, 0x0a	; 10
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
 
	init_device();
    1fb0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <init_device>
//	motor3_start(motor_command.MotorDirection);
	char  des[10];
	while(1)
	{
//	
	    fork_uart0_command();               //´¦ÀíÃüÁî
    1fb4:	0e 94 cc 08 	call	0x1198	; 0x1198 <fork_uart0_command>
		fork_uart1_command();
    1fb8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <fork_uart1_command>
		fork_step_count();					//¼ì²â²½Êý£¬¼õËÙ£¬Í£Ö¹
    1fbc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <fork_step_count>
		fork_jiance();                      //ÏÞÎ»¿ª¹Ø¼ì²â
    1fc0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fork_jiance>
    1fc4:	f7 cf       	rjmp	.-18     	; 0x1fb4 <main+0x18>

00001fc6 <test>:
	}
}


void test(void)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	6c 97       	sbiw	r28, 0x1c	; 28
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61

	global_yon_motor5_running=TRUE;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 33 03 	sts	0x0333, r24
	motor5_start('1');
    1fe0:	81 e3       	ldi	r24, 0x31	; 49
    1fe2:	0e 94 c2 05 	call	0xb84	; 0xb84 <motor5_start>
	Motor5Status='1';
    1fe6:	81 e3       	ldi	r24, 0x31	; 49
    1fe8:	80 93 58 03 	sts	0x0358, r24
	motor5CommandStep=200000;
    1fec:	80 e4       	ldi	r24, 0x40	; 64
    1fee:	9d e0       	ldi	r25, 0x0D	; 13
    1ff0:	a3 e0       	ldi	r26, 0x03	; 3
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	80 93 21 03 	sts	0x0321, r24
    1ff8:	90 93 22 03 	sts	0x0322, r25
    1ffc:	a0 93 23 03 	sts	0x0323, r26
    2000:	b0 93 24 03 	sts	0x0324, r27
    2004:	02 c0       	rjmp	.+4      	; 0x200a <test+0x44>
  
    while (global_yon_motor5_running==TRUE) 
	{
		fork_step_count();					//¼ì²â²½Êý£¬¼õËÙ£¬Í£Ö¹
    2006:	0e 94 b1 0b 	call	0x1762	; 0x1762 <fork_step_count>
	global_yon_motor5_running=TRUE;
	motor5_start('1');
	Motor5Status='1';
	motor5CommandStep=200000;
  
    while (global_yon_motor5_running==TRUE) 
    200a:	80 91 33 03 	lds	r24, 0x0333
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	d1 f3       	breq	.-12     	; 0x2006 <test+0x40>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a8 ec       	ldi	r26, 0xC8	; 200
    2018:	b2 e4       	ldi	r27, 0x42	; 66
    201a:	89 8f       	std	Y+25, r24	; 0x19
    201c:	9a 8f       	std	Y+26, r25	; 0x1a
    201e:	ab 8f       	std	Y+27, r26	; 0x1b
    2020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	69 8d       	ldd	r22, Y+25	; 0x19
    2024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    202a:	2d ec       	ldi	r18, 0xCD	; 205
    202c:	3c ec       	ldi	r19, 0xCC	; 204
    202e:	4c e2       	ldi	r20, 0x2C	; 44
    2030:	55 e4       	ldi	r21, 0x45	; 69
    2032:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8d 8b       	std	Y+21, r24	; 0x15
    203c:	9e 8b       	std	Y+22, r25	; 0x16
    203e:	af 8b       	std	Y+23, r26	; 0x17
    2040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 42 14 	call	0x2884	; 0x2884 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <test+0x9e>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 8b       	std	Y+20, r25	; 0x14
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <test+0x11c>
	else if (__tmp > 65535)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <test+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 8b       	std	Y+20, r25	; 0x14
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <test+0xfe>
    20a6:	84 e1       	ldi	r24, 0x14	; 20
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	9a 8b       	std	Y+18, r25	; 0x12
    20ac:	89 8b       	std	Y+17, r24	; 0x11
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	9a 89       	ldd	r25, Y+18	; 0x12
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <test+0xec>
    20b6:	9a 8b       	std	Y+18, r25	; 0x12
    20b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <test+0xe0>
    20cc:	14 c0       	rjmp	.+40     	; 0x20f6 <test+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	98 8b       	std	Y+16, r25	; 0x10
    20e8:	8f 87       	std	Y+15, r24	; 0x0f
    20ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ec:	98 89       	ldd	r25, Y+16	; 0x10
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <test+0x128>
    20f2:	98 8b       	std	Y+16, r25	; 0x10
    20f4:	8f 87       	std	Y+15, r24	; 0x0f
	
	} 
    
	_delay_ms(100);    
  
	global_yon_motor5_running=TRUE;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 33 03 	sts	0x0333, r24
	motor5_start('0');
    20fc:	80 e3       	ldi	r24, 0x30	; 48
    20fe:	0e 94 c2 05 	call	0xb84	; 0xb84 <motor5_start>
	Motor5Status='1';
    2102:	81 e3       	ldi	r24, 0x31	; 49
    2104:	80 93 58 03 	sts	0x0358, r24
	motor5CommandStep=200000;
    2108:	80 e4       	ldi	r24, 0x40	; 64
    210a:	9d e0       	ldi	r25, 0x0D	; 13
    210c:	a3 e0       	ldi	r26, 0x03	; 3
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	80 93 21 03 	sts	0x0321, r24
    2114:	90 93 22 03 	sts	0x0322, r25
    2118:	a0 93 23 03 	sts	0x0323, r26
    211c:	b0 93 24 03 	sts	0x0324, r27
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <test+0x160>
    while (global_yon_motor5_running==TRUE) 
	{
		fork_step_count();					//¼ì²â²½Êý£¬¼õËÙ£¬Í£Ö¹
    2122:	0e 94 b1 0b 	call	0x1762	; 0x1762 <fork_step_count>
  
	global_yon_motor5_running=TRUE;
	motor5_start('0');
	Motor5Status='1';
	motor5CommandStep=200000;
    while (global_yon_motor5_running==TRUE) 
    2126:	80 91 33 03 	lds	r24, 0x0333
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	d1 f3       	breq	.-12     	; 0x2122 <test+0x15c>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a8 ec       	ldi	r26, 0xC8	; 200
    2134:	b2 e4       	ldi	r27, 0x42	; 66
    2136:	8b 87       	std	Y+11, r24	; 0x0b
    2138:	9c 87       	std	Y+12, r25	; 0x0c
    213a:	ad 87       	std	Y+13, r26	; 0x0d
    213c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	2d ec       	ldi	r18, 0xCD	; 205
    2148:	3c ec       	ldi	r19, 0xCC	; 204
    214a:	4c e2       	ldi	r20, 0x2C	; 44
    214c:	55 e4       	ldi	r21, 0x45	; 69
    214e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8f 83       	std	Y+7, r24	; 0x07
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	a9 87       	std	Y+9, r26	; 0x09
    215c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 42 14 	call	0x2884	; 0x2884 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <test+0x1ba>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <test+0x238>
	else if (__tmp > 65535)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <test+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <test+0x21a>
    21c2:	84 e1       	ldi	r24, 0x14	; 20
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <test+0x208>
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <test+0x1fc>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <__stack+0x13>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <__stack+0xb>
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
	
	} 
    _delay_ms(100);


}
    2212:	6c 96       	adiw	r28, 0x1c	; 28
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <__fixunssfsi>:
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	7b 01       	movw	r14, r22
    222e:	8c 01       	movw	r16, r24
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	5f e4       	ldi	r21, 0x4F	; 79
    2238:	0e 94 12 14 	call	0x2824	; 0x2824 <__gesf2>
    223c:	88 23       	and	r24, r24
    223e:	8c f0       	brlt	.+34     	; 0x2262 <__fixunssfsi+0x3e>
    2240:	c8 01       	movw	r24, r16
    2242:	b7 01       	movw	r22, r14
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	5f e4       	ldi	r21, 0x4F	; 79
    224c:	0e 94 8a 12 	call	0x2514	; 0x2514 <__subsf3>
    2250:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__fixsfsi>
    2254:	9b 01       	movw	r18, r22
    2256:	ac 01       	movw	r20, r24
    2258:	20 50       	subi	r18, 0x00	; 0
    225a:	30 40       	sbci	r19, 0x00	; 0
    225c:	40 40       	sbci	r20, 0x00	; 0
    225e:	50 48       	sbci	r21, 0x80	; 128
    2260:	06 c0       	rjmp	.+12     	; 0x226e <__fixunssfsi+0x4a>
    2262:	c8 01       	movw	r24, r16
    2264:	b7 01       	movw	r22, r14
    2266:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__fixsfsi>
    226a:	9b 01       	movw	r18, r22
    226c:	ac 01       	movw	r20, r24
    226e:	b9 01       	movw	r22, r18
    2270:	ca 01       	movw	r24, r20
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	08 95       	ret

0000227c <_fpadd_parts>:
    227c:	a0 e0       	ldi	r26, 0x00	; 0
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e4 e4       	ldi	r30, 0x44	; 68
    2282:	f1 e1       	ldi	r31, 0x11	; 17
    2284:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__prologue_saves__>
    2288:	dc 01       	movw	r26, r24
    228a:	2b 01       	movw	r4, r22
    228c:	fa 01       	movw	r30, r20
    228e:	9c 91       	ld	r25, X
    2290:	92 30       	cpi	r25, 0x02	; 2
    2292:	08 f4       	brcc	.+2      	; 0x2296 <_fpadd_parts+0x1a>
    2294:	39 c1       	rjmp	.+626    	; 0x2508 <_fpadd_parts+0x28c>
    2296:	eb 01       	movw	r28, r22
    2298:	88 81       	ld	r24, Y
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <_fpadd_parts+0x24>
    229e:	33 c1       	rjmp	.+614    	; 0x2506 <_fpadd_parts+0x28a>
    22a0:	94 30       	cpi	r25, 0x04	; 4
    22a2:	69 f4       	brne	.+26     	; 0x22be <_fpadd_parts+0x42>
    22a4:	84 30       	cpi	r24, 0x04	; 4
    22a6:	09 f0       	breq	.+2      	; 0x22aa <_fpadd_parts+0x2e>
    22a8:	2f c1       	rjmp	.+606    	; 0x2508 <_fpadd_parts+0x28c>
    22aa:	11 96       	adiw	r26, 0x01	; 1
    22ac:	9c 91       	ld	r25, X
    22ae:	11 97       	sbiw	r26, 0x01	; 1
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	98 17       	cp	r25, r24
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <_fpadd_parts+0x3c>
    22b6:	28 c1       	rjmp	.+592    	; 0x2508 <_fpadd_parts+0x28c>
    22b8:	a0 e0       	ldi	r26, 0x00	; 0
    22ba:	b2 e0       	ldi	r27, 0x02	; 2
    22bc:	25 c1       	rjmp	.+586    	; 0x2508 <_fpadd_parts+0x28c>
    22be:	84 30       	cpi	r24, 0x04	; 4
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <_fpadd_parts+0x48>
    22c2:	21 c1       	rjmp	.+578    	; 0x2506 <_fpadd_parts+0x28a>
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	a9 f4       	brne	.+42     	; 0x22f2 <_fpadd_parts+0x76>
    22c8:	92 30       	cpi	r25, 0x02	; 2
    22ca:	09 f0       	breq	.+2      	; 0x22ce <_fpadd_parts+0x52>
    22cc:	1d c1       	rjmp	.+570    	; 0x2508 <_fpadd_parts+0x28c>
    22ce:	9a 01       	movw	r18, r20
    22d0:	ad 01       	movw	r20, r26
    22d2:	88 e0       	ldi	r24, 0x08	; 8
    22d4:	ea 01       	movw	r28, r20
    22d6:	09 90       	ld	r0, Y+
    22d8:	ae 01       	movw	r20, r28
    22da:	e9 01       	movw	r28, r18
    22dc:	09 92       	st	Y+, r0
    22de:	9e 01       	movw	r18, r28
    22e0:	81 50       	subi	r24, 0x01	; 1
    22e2:	c1 f7       	brne	.-16     	; 0x22d4 <_fpadd_parts+0x58>
    22e4:	e2 01       	movw	r28, r4
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 91       	ld	r25, X
    22ec:	89 23       	and	r24, r25
    22ee:	81 83       	std	Z+1, r24	; 0x01
    22f0:	08 c1       	rjmp	.+528    	; 0x2502 <_fpadd_parts+0x286>
    22f2:	92 30       	cpi	r25, 0x02	; 2
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <_fpadd_parts+0x7c>
    22f6:	07 c1       	rjmp	.+526    	; 0x2506 <_fpadd_parts+0x28a>
    22f8:	12 96       	adiw	r26, 0x02	; 2
    22fa:	2d 90       	ld	r2, X+
    22fc:	3c 90       	ld	r3, X
    22fe:	13 97       	sbiw	r26, 0x03	; 3
    2300:	eb 01       	movw	r28, r22
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	14 96       	adiw	r26, 0x04	; 4
    2308:	ad 90       	ld	r10, X+
    230a:	bd 90       	ld	r11, X+
    230c:	cd 90       	ld	r12, X+
    230e:	dc 90       	ld	r13, X
    2310:	17 97       	sbiw	r26, 0x07	; 7
    2312:	ec 80       	ldd	r14, Y+4	; 0x04
    2314:	fd 80       	ldd	r15, Y+5	; 0x05
    2316:	0e 81       	ldd	r16, Y+6	; 0x06
    2318:	1f 81       	ldd	r17, Y+7	; 0x07
    231a:	91 01       	movw	r18, r2
    231c:	28 1b       	sub	r18, r24
    231e:	39 0b       	sbc	r19, r25
    2320:	b9 01       	movw	r22, r18
    2322:	37 ff       	sbrs	r19, 7
    2324:	04 c0       	rjmp	.+8      	; 0x232e <_fpadd_parts+0xb2>
    2326:	66 27       	eor	r22, r22
    2328:	77 27       	eor	r23, r23
    232a:	62 1b       	sub	r22, r18
    232c:	73 0b       	sbc	r23, r19
    232e:	60 32       	cpi	r22, 0x20	; 32
    2330:	71 05       	cpc	r23, r1
    2332:	0c f0       	brlt	.+2      	; 0x2336 <_fpadd_parts+0xba>
    2334:	61 c0       	rjmp	.+194    	; 0x23f8 <_fpadd_parts+0x17c>
    2336:	12 16       	cp	r1, r18
    2338:	13 06       	cpc	r1, r19
    233a:	6c f5       	brge	.+90     	; 0x2396 <_fpadd_parts+0x11a>
    233c:	37 01       	movw	r6, r14
    233e:	48 01       	movw	r8, r16
    2340:	06 2e       	mov	r0, r22
    2342:	04 c0       	rjmp	.+8      	; 0x234c <_fpadd_parts+0xd0>
    2344:	96 94       	lsr	r9
    2346:	87 94       	ror	r8
    2348:	77 94       	ror	r7
    234a:	67 94       	ror	r6
    234c:	0a 94       	dec	r0
    234e:	d2 f7       	brpl	.-12     	; 0x2344 <_fpadd_parts+0xc8>
    2350:	21 e0       	ldi	r18, 0x01	; 1
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <_fpadd_parts+0xe6>
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	44 1f       	adc	r20, r20
    2360:	55 1f       	adc	r21, r21
    2362:	6a 95       	dec	r22
    2364:	d2 f7       	brpl	.-12     	; 0x235a <_fpadd_parts+0xde>
    2366:	21 50       	subi	r18, 0x01	; 1
    2368:	30 40       	sbci	r19, 0x00	; 0
    236a:	40 40       	sbci	r20, 0x00	; 0
    236c:	50 40       	sbci	r21, 0x00	; 0
    236e:	2e 21       	and	r18, r14
    2370:	3f 21       	and	r19, r15
    2372:	40 23       	and	r20, r16
    2374:	51 23       	and	r21, r17
    2376:	21 15       	cp	r18, r1
    2378:	31 05       	cpc	r19, r1
    237a:	41 05       	cpc	r20, r1
    237c:	51 05       	cpc	r21, r1
    237e:	21 f0       	breq	.+8      	; 0x2388 <_fpadd_parts+0x10c>
    2380:	21 e0       	ldi	r18, 0x01	; 1
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	79 01       	movw	r14, r18
    238a:	8a 01       	movw	r16, r20
    238c:	e6 28       	or	r14, r6
    238e:	f7 28       	or	r15, r7
    2390:	08 29       	or	r16, r8
    2392:	19 29       	or	r17, r9
    2394:	3c c0       	rjmp	.+120    	; 0x240e <_fpadd_parts+0x192>
    2396:	23 2b       	or	r18, r19
    2398:	d1 f1       	breq	.+116    	; 0x240e <_fpadd_parts+0x192>
    239a:	26 0e       	add	r2, r22
    239c:	37 1e       	adc	r3, r23
    239e:	35 01       	movw	r6, r10
    23a0:	46 01       	movw	r8, r12
    23a2:	06 2e       	mov	r0, r22
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <_fpadd_parts+0x132>
    23a6:	96 94       	lsr	r9
    23a8:	87 94       	ror	r8
    23aa:	77 94       	ror	r7
    23ac:	67 94       	ror	r6
    23ae:	0a 94       	dec	r0
    23b0:	d2 f7       	brpl	.-12     	; 0x23a6 <_fpadd_parts+0x12a>
    23b2:	21 e0       	ldi	r18, 0x01	; 1
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <_fpadd_parts+0x148>
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	44 1f       	adc	r20, r20
    23c2:	55 1f       	adc	r21, r21
    23c4:	6a 95       	dec	r22
    23c6:	d2 f7       	brpl	.-12     	; 0x23bc <_fpadd_parts+0x140>
    23c8:	21 50       	subi	r18, 0x01	; 1
    23ca:	30 40       	sbci	r19, 0x00	; 0
    23cc:	40 40       	sbci	r20, 0x00	; 0
    23ce:	50 40       	sbci	r21, 0x00	; 0
    23d0:	2a 21       	and	r18, r10
    23d2:	3b 21       	and	r19, r11
    23d4:	4c 21       	and	r20, r12
    23d6:	5d 21       	and	r21, r13
    23d8:	21 15       	cp	r18, r1
    23da:	31 05       	cpc	r19, r1
    23dc:	41 05       	cpc	r20, r1
    23de:	51 05       	cpc	r21, r1
    23e0:	21 f0       	breq	.+8      	; 0x23ea <_fpadd_parts+0x16e>
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	59 01       	movw	r10, r18
    23ec:	6a 01       	movw	r12, r20
    23ee:	a6 28       	or	r10, r6
    23f0:	b7 28       	or	r11, r7
    23f2:	c8 28       	or	r12, r8
    23f4:	d9 28       	or	r13, r9
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <_fpadd_parts+0x192>
    23f8:	82 15       	cp	r24, r2
    23fa:	93 05       	cpc	r25, r3
    23fc:	2c f0       	brlt	.+10     	; 0x2408 <_fpadd_parts+0x18c>
    23fe:	1c 01       	movw	r2, r24
    2400:	aa 24       	eor	r10, r10
    2402:	bb 24       	eor	r11, r11
    2404:	65 01       	movw	r12, r10
    2406:	03 c0       	rjmp	.+6      	; 0x240e <_fpadd_parts+0x192>
    2408:	ee 24       	eor	r14, r14
    240a:	ff 24       	eor	r15, r15
    240c:	87 01       	movw	r16, r14
    240e:	11 96       	adiw	r26, 0x01	; 1
    2410:	9c 91       	ld	r25, X
    2412:	d2 01       	movw	r26, r4
    2414:	11 96       	adiw	r26, 0x01	; 1
    2416:	8c 91       	ld	r24, X
    2418:	98 17       	cp	r25, r24
    241a:	09 f4       	brne	.+2      	; 0x241e <_fpadd_parts+0x1a2>
    241c:	45 c0       	rjmp	.+138    	; 0x24a8 <_fpadd_parts+0x22c>
    241e:	99 23       	and	r25, r25
    2420:	39 f0       	breq	.+14     	; 0x2430 <_fpadd_parts+0x1b4>
    2422:	a8 01       	movw	r20, r16
    2424:	97 01       	movw	r18, r14
    2426:	2a 19       	sub	r18, r10
    2428:	3b 09       	sbc	r19, r11
    242a:	4c 09       	sbc	r20, r12
    242c:	5d 09       	sbc	r21, r13
    242e:	06 c0       	rjmp	.+12     	; 0x243c <_fpadd_parts+0x1c0>
    2430:	a6 01       	movw	r20, r12
    2432:	95 01       	movw	r18, r10
    2434:	2e 19       	sub	r18, r14
    2436:	3f 09       	sbc	r19, r15
    2438:	40 0b       	sbc	r20, r16
    243a:	51 0b       	sbc	r21, r17
    243c:	57 fd       	sbrc	r21, 7
    243e:	08 c0       	rjmp	.+16     	; 0x2450 <_fpadd_parts+0x1d4>
    2440:	11 82       	std	Z+1, r1	; 0x01
    2442:	33 82       	std	Z+3, r3	; 0x03
    2444:	22 82       	std	Z+2, r2	; 0x02
    2446:	24 83       	std	Z+4, r18	; 0x04
    2448:	35 83       	std	Z+5, r19	; 0x05
    244a:	46 83       	std	Z+6, r20	; 0x06
    244c:	57 83       	std	Z+7, r21	; 0x07
    244e:	1d c0       	rjmp	.+58     	; 0x248a <_fpadd_parts+0x20e>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	81 83       	std	Z+1, r24	; 0x01
    2454:	33 82       	std	Z+3, r3	; 0x03
    2456:	22 82       	std	Z+2, r2	; 0x02
    2458:	88 27       	eor	r24, r24
    245a:	99 27       	eor	r25, r25
    245c:	dc 01       	movw	r26, r24
    245e:	82 1b       	sub	r24, r18
    2460:	93 0b       	sbc	r25, r19
    2462:	a4 0b       	sbc	r26, r20
    2464:	b5 0b       	sbc	r27, r21
    2466:	84 83       	std	Z+4, r24	; 0x04
    2468:	95 83       	std	Z+5, r25	; 0x05
    246a:	a6 83       	std	Z+6, r26	; 0x06
    246c:	b7 83       	std	Z+7, r27	; 0x07
    246e:	0d c0       	rjmp	.+26     	; 0x248a <_fpadd_parts+0x20e>
    2470:	22 0f       	add	r18, r18
    2472:	33 1f       	adc	r19, r19
    2474:	44 1f       	adc	r20, r20
    2476:	55 1f       	adc	r21, r21
    2478:	24 83       	std	Z+4, r18	; 0x04
    247a:	35 83       	std	Z+5, r19	; 0x05
    247c:	46 83       	std	Z+6, r20	; 0x06
    247e:	57 83       	std	Z+7, r21	; 0x07
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	93 83       	std	Z+3, r25	; 0x03
    2488:	82 83       	std	Z+2, r24	; 0x02
    248a:	24 81       	ldd	r18, Z+4	; 0x04
    248c:	35 81       	ldd	r19, Z+5	; 0x05
    248e:	46 81       	ldd	r20, Z+6	; 0x06
    2490:	57 81       	ldd	r21, Z+7	; 0x07
    2492:	da 01       	movw	r26, r20
    2494:	c9 01       	movw	r24, r18
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	a1 09       	sbc	r26, r1
    249a:	b1 09       	sbc	r27, r1
    249c:	8f 5f       	subi	r24, 0xFF	; 255
    249e:	9f 4f       	sbci	r25, 0xFF	; 255
    24a0:	af 4f       	sbci	r26, 0xFF	; 255
    24a2:	bf 43       	sbci	r27, 0x3F	; 63
    24a4:	28 f3       	brcs	.-54     	; 0x2470 <_fpadd_parts+0x1f4>
    24a6:	0b c0       	rjmp	.+22     	; 0x24be <_fpadd_parts+0x242>
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	33 82       	std	Z+3, r3	; 0x03
    24ac:	22 82       	std	Z+2, r2	; 0x02
    24ae:	ea 0c       	add	r14, r10
    24b0:	fb 1c       	adc	r15, r11
    24b2:	0c 1d       	adc	r16, r12
    24b4:	1d 1d       	adc	r17, r13
    24b6:	e4 82       	std	Z+4, r14	; 0x04
    24b8:	f5 82       	std	Z+5, r15	; 0x05
    24ba:	06 83       	std	Z+6, r16	; 0x06
    24bc:	17 83       	std	Z+7, r17	; 0x07
    24be:	83 e0       	ldi	r24, 0x03	; 3
    24c0:	80 83       	st	Z, r24
    24c2:	24 81       	ldd	r18, Z+4	; 0x04
    24c4:	35 81       	ldd	r19, Z+5	; 0x05
    24c6:	46 81       	ldd	r20, Z+6	; 0x06
    24c8:	57 81       	ldd	r21, Z+7	; 0x07
    24ca:	57 ff       	sbrs	r21, 7
    24cc:	1a c0       	rjmp	.+52     	; 0x2502 <_fpadd_parts+0x286>
    24ce:	c9 01       	movw	r24, r18
    24d0:	aa 27       	eor	r26, r26
    24d2:	97 fd       	sbrc	r25, 7
    24d4:	a0 95       	com	r26
    24d6:	ba 2f       	mov	r27, r26
    24d8:	81 70       	andi	r24, 0x01	; 1
    24da:	90 70       	andi	r25, 0x00	; 0
    24dc:	a0 70       	andi	r26, 0x00	; 0
    24de:	b0 70       	andi	r27, 0x00	; 0
    24e0:	56 95       	lsr	r21
    24e2:	47 95       	ror	r20
    24e4:	37 95       	ror	r19
    24e6:	27 95       	ror	r18
    24e8:	82 2b       	or	r24, r18
    24ea:	93 2b       	or	r25, r19
    24ec:	a4 2b       	or	r26, r20
    24ee:	b5 2b       	or	r27, r21
    24f0:	84 83       	std	Z+4, r24	; 0x04
    24f2:	95 83       	std	Z+5, r25	; 0x05
    24f4:	a6 83       	std	Z+6, r26	; 0x06
    24f6:	b7 83       	std	Z+7, r27	; 0x07
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	93 83       	std	Z+3, r25	; 0x03
    2500:	82 83       	std	Z+2, r24	; 0x02
    2502:	df 01       	movw	r26, r30
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <_fpadd_parts+0x28c>
    2506:	d2 01       	movw	r26, r4
    2508:	cd 01       	movw	r24, r26
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	e2 e1       	ldi	r30, 0x12	; 18
    2510:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__epilogue_restores__>

00002514 <__subsf3>:
    2514:	a0 e2       	ldi	r26, 0x20	; 32
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e0 e9       	ldi	r30, 0x90	; 144
    251a:	f2 e1       	ldi	r31, 0x12	; 18
    251c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__prologue_saves__+0x18>
    2520:	69 83       	std	Y+1, r22	; 0x01
    2522:	7a 83       	std	Y+2, r23	; 0x02
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	2d 83       	std	Y+5, r18	; 0x05
    252a:	3e 83       	std	Y+6, r19	; 0x06
    252c:	4f 83       	std	Y+7, r20	; 0x07
    252e:	58 87       	std	Y+8, r21	; 0x08
    2530:	e9 e0       	ldi	r30, 0x09	; 9
    2532:	ee 2e       	mov	r14, r30
    2534:	f1 2c       	mov	r15, r1
    2536:	ec 0e       	add	r14, r28
    2538:	fd 1e       	adc	r15, r29
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	b7 01       	movw	r22, r14
    2540:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    2544:	8e 01       	movw	r16, r28
    2546:	0f 5e       	subi	r16, 0xEF	; 239
    2548:	1f 4f       	sbci	r17, 0xFF	; 255
    254a:	ce 01       	movw	r24, r28
    254c:	05 96       	adiw	r24, 0x05	; 5
    254e:	b8 01       	movw	r22, r16
    2550:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    2554:	8a 89       	ldd	r24, Y+18	; 0x12
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	89 27       	eor	r24, r25
    255a:	8a 8b       	std	Y+18, r24	; 0x12
    255c:	c7 01       	movw	r24, r14
    255e:	b8 01       	movw	r22, r16
    2560:	ae 01       	movw	r20, r28
    2562:	47 5e       	subi	r20, 0xE7	; 231
    2564:	5f 4f       	sbci	r21, 0xFF	; 255
    2566:	0e 94 3e 11 	call	0x227c	; 0x227c <_fpadd_parts>
    256a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__pack_f>
    256e:	a0 96       	adiw	r28, 0x20	; 32
    2570:	e6 e0       	ldi	r30, 0x06	; 6
    2572:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__epilogue_restores__+0x18>

00002576 <__addsf3>:
    2576:	a0 e2       	ldi	r26, 0x20	; 32
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e1 ec       	ldi	r30, 0xC1	; 193
    257c:	f2 e1       	ldi	r31, 0x12	; 18
    257e:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__prologue_saves__+0x18>
    2582:	69 83       	std	Y+1, r22	; 0x01
    2584:	7a 83       	std	Y+2, r23	; 0x02
    2586:	8b 83       	std	Y+3, r24	; 0x03
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	2d 83       	std	Y+5, r18	; 0x05
    258c:	3e 83       	std	Y+6, r19	; 0x06
    258e:	4f 83       	std	Y+7, r20	; 0x07
    2590:	58 87       	std	Y+8, r21	; 0x08
    2592:	f9 e0       	ldi	r31, 0x09	; 9
    2594:	ef 2e       	mov	r14, r31
    2596:	f1 2c       	mov	r15, r1
    2598:	ec 0e       	add	r14, r28
    259a:	fd 1e       	adc	r15, r29
    259c:	ce 01       	movw	r24, r28
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	b7 01       	movw	r22, r14
    25a2:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    25a6:	8e 01       	movw	r16, r28
    25a8:	0f 5e       	subi	r16, 0xEF	; 239
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	ce 01       	movw	r24, r28
    25ae:	05 96       	adiw	r24, 0x05	; 5
    25b0:	b8 01       	movw	r22, r16
    25b2:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    25b6:	c7 01       	movw	r24, r14
    25b8:	b8 01       	movw	r22, r16
    25ba:	ae 01       	movw	r20, r28
    25bc:	47 5e       	subi	r20, 0xE7	; 231
    25be:	5f 4f       	sbci	r21, 0xFF	; 255
    25c0:	0e 94 3e 11 	call	0x227c	; 0x227c <_fpadd_parts>
    25c4:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__pack_f>
    25c8:	a0 96       	adiw	r28, 0x20	; 32
    25ca:	e6 e0       	ldi	r30, 0x06	; 6
    25cc:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__epilogue_restores__+0x18>

000025d0 <__mulsf3>:
    25d0:	a0 e2       	ldi	r26, 0x20	; 32
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ee ee       	ldi	r30, 0xEE	; 238
    25d6:	f2 e1       	ldi	r31, 0x12	; 18
    25d8:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__prologue_saves__>
    25dc:	69 83       	std	Y+1, r22	; 0x01
    25de:	7a 83       	std	Y+2, r23	; 0x02
    25e0:	8b 83       	std	Y+3, r24	; 0x03
    25e2:	9c 83       	std	Y+4, r25	; 0x04
    25e4:	2d 83       	std	Y+5, r18	; 0x05
    25e6:	3e 83       	std	Y+6, r19	; 0x06
    25e8:	4f 83       	std	Y+7, r20	; 0x07
    25ea:	58 87       	std	Y+8, r21	; 0x08
    25ec:	ce 01       	movw	r24, r28
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	be 01       	movw	r22, r28
    25f2:	67 5f       	subi	r22, 0xF7	; 247
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    25fa:	ce 01       	movw	r24, r28
    25fc:	05 96       	adiw	r24, 0x05	; 5
    25fe:	be 01       	movw	r22, r28
    2600:	6f 5e       	subi	r22, 0xEF	; 239
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    2608:	99 85       	ldd	r25, Y+9	; 0x09
    260a:	92 30       	cpi	r25, 0x02	; 2
    260c:	88 f0       	brcs	.+34     	; 0x2630 <__mulsf3+0x60>
    260e:	89 89       	ldd	r24, Y+17	; 0x11
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	c8 f0       	brcs	.+50     	; 0x2646 <__mulsf3+0x76>
    2614:	94 30       	cpi	r25, 0x04	; 4
    2616:	19 f4       	brne	.+6      	; 0x261e <__mulsf3+0x4e>
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	51 f4       	brne	.+20     	; 0x2630 <__mulsf3+0x60>
    261c:	04 c0       	rjmp	.+8      	; 0x2626 <__mulsf3+0x56>
    261e:	84 30       	cpi	r24, 0x04	; 4
    2620:	29 f4       	brne	.+10     	; 0x262c <__mulsf3+0x5c>
    2622:	92 30       	cpi	r25, 0x02	; 2
    2624:	81 f4       	brne	.+32     	; 0x2646 <__mulsf3+0x76>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	c6 c0       	rjmp	.+396    	; 0x27b8 <__mulsf3+0x1e8>
    262c:	92 30       	cpi	r25, 0x02	; 2
    262e:	49 f4       	brne	.+18     	; 0x2642 <__mulsf3+0x72>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	9a 85       	ldd	r25, Y+10	; 0x0a
    2634:	8a 89       	ldd	r24, Y+18	; 0x12
    2636:	98 13       	cpse	r25, r24
    2638:	21 e0       	ldi	r18, 0x01	; 1
    263a:	2a 87       	std	Y+10, r18	; 0x0a
    263c:	ce 01       	movw	r24, r28
    263e:	09 96       	adiw	r24, 0x09	; 9
    2640:	bb c0       	rjmp	.+374    	; 0x27b8 <__mulsf3+0x1e8>
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	49 f4       	brne	.+18     	; 0x2658 <__mulsf3+0x88>
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	8a 89       	ldd	r24, Y+18	; 0x12
    264c:	98 13       	cpse	r25, r24
    264e:	21 e0       	ldi	r18, 0x01	; 1
    2650:	2a 8b       	std	Y+18, r18	; 0x12
    2652:	ce 01       	movw	r24, r28
    2654:	41 96       	adiw	r24, 0x11	; 17
    2656:	b0 c0       	rjmp	.+352    	; 0x27b8 <__mulsf3+0x1e8>
    2658:	2d 84       	ldd	r2, Y+13	; 0x0d
    265a:	3e 84       	ldd	r3, Y+14	; 0x0e
    265c:	4f 84       	ldd	r4, Y+15	; 0x0f
    265e:	58 88       	ldd	r5, Y+16	; 0x10
    2660:	6d 88       	ldd	r6, Y+21	; 0x15
    2662:	7e 88       	ldd	r7, Y+22	; 0x16
    2664:	8f 88       	ldd	r8, Y+23	; 0x17
    2666:	98 8c       	ldd	r9, Y+24	; 0x18
    2668:	ee 24       	eor	r14, r14
    266a:	ff 24       	eor	r15, r15
    266c:	87 01       	movw	r16, r14
    266e:	aa 24       	eor	r10, r10
    2670:	bb 24       	eor	r11, r11
    2672:	65 01       	movw	r12, r10
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	e0 e0       	ldi	r30, 0x00	; 0
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	c1 01       	movw	r24, r2
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	89 2b       	or	r24, r25
    2688:	e9 f0       	breq	.+58     	; 0x26c4 <__mulsf3+0xf4>
    268a:	e6 0c       	add	r14, r6
    268c:	f7 1c       	adc	r15, r7
    268e:	08 1d       	adc	r16, r8
    2690:	19 1d       	adc	r17, r9
    2692:	9a 01       	movw	r18, r20
    2694:	ab 01       	movw	r20, r22
    2696:	2a 0d       	add	r18, r10
    2698:	3b 1d       	adc	r19, r11
    269a:	4c 1d       	adc	r20, r12
    269c:	5d 1d       	adc	r21, r13
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e6 14       	cp	r14, r6
    26a8:	f7 04       	cpc	r15, r7
    26aa:	08 05       	cpc	r16, r8
    26ac:	19 05       	cpc	r17, r9
    26ae:	20 f4       	brcc	.+8      	; 0x26b8 <__mulsf3+0xe8>
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	a0 e0       	ldi	r26, 0x00	; 0
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	ba 01       	movw	r22, r20
    26ba:	a9 01       	movw	r20, r18
    26bc:	48 0f       	add	r20, r24
    26be:	59 1f       	adc	r21, r25
    26c0:	6a 1f       	adc	r22, r26
    26c2:	7b 1f       	adc	r23, r27
    26c4:	aa 0c       	add	r10, r10
    26c6:	bb 1c       	adc	r11, r11
    26c8:	cc 1c       	adc	r12, r12
    26ca:	dd 1c       	adc	r13, r13
    26cc:	97 fe       	sbrs	r9, 7
    26ce:	08 c0       	rjmp	.+16     	; 0x26e0 <__mulsf3+0x110>
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e0       	ldi	r26, 0x00	; 0
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	a8 2a       	or	r10, r24
    26da:	b9 2a       	or	r11, r25
    26dc:	ca 2a       	or	r12, r26
    26de:	db 2a       	or	r13, r27
    26e0:	31 96       	adiw	r30, 0x01	; 1
    26e2:	e0 32       	cpi	r30, 0x20	; 32
    26e4:	f1 05       	cpc	r31, r1
    26e6:	49 f0       	breq	.+18     	; 0x26fa <__mulsf3+0x12a>
    26e8:	66 0c       	add	r6, r6
    26ea:	77 1c       	adc	r7, r7
    26ec:	88 1c       	adc	r8, r8
    26ee:	99 1c       	adc	r9, r9
    26f0:	56 94       	lsr	r5
    26f2:	47 94       	ror	r4
    26f4:	37 94       	ror	r3
    26f6:	27 94       	ror	r2
    26f8:	c3 cf       	rjmp	.-122    	; 0x2680 <__mulsf3+0xb0>
    26fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    26fc:	ea 89       	ldd	r30, Y+18	; 0x12
    26fe:	2b 89       	ldd	r18, Y+19	; 0x13
    2700:	3c 89       	ldd	r19, Y+20	; 0x14
    2702:	8b 85       	ldd	r24, Y+11	; 0x0b
    2704:	9c 85       	ldd	r25, Y+12	; 0x0c
    2706:	28 0f       	add	r18, r24
    2708:	39 1f       	adc	r19, r25
    270a:	2e 5f       	subi	r18, 0xFE	; 254
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
    270e:	17 c0       	rjmp	.+46     	; 0x273e <__mulsf3+0x16e>
    2710:	ca 01       	movw	r24, r20
    2712:	81 70       	andi	r24, 0x01	; 1
    2714:	90 70       	andi	r25, 0x00	; 0
    2716:	89 2b       	or	r24, r25
    2718:	61 f0       	breq	.+24     	; 0x2732 <__mulsf3+0x162>
    271a:	16 95       	lsr	r17
    271c:	07 95       	ror	r16
    271e:	f7 94       	ror	r15
    2720:	e7 94       	ror	r14
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e0       	ldi	r26, 0x00	; 0
    2728:	b0 e8       	ldi	r27, 0x80	; 128
    272a:	e8 2a       	or	r14, r24
    272c:	f9 2a       	or	r15, r25
    272e:	0a 2b       	or	r16, r26
    2730:	1b 2b       	or	r17, r27
    2732:	76 95       	lsr	r23
    2734:	67 95       	ror	r22
    2736:	57 95       	ror	r21
    2738:	47 95       	ror	r20
    273a:	2f 5f       	subi	r18, 0xFF	; 255
    273c:	3f 4f       	sbci	r19, 0xFF	; 255
    273e:	77 fd       	sbrc	r23, 7
    2740:	e7 cf       	rjmp	.-50     	; 0x2710 <__mulsf3+0x140>
    2742:	0c c0       	rjmp	.+24     	; 0x275c <__mulsf3+0x18c>
    2744:	44 0f       	add	r20, r20
    2746:	55 1f       	adc	r21, r21
    2748:	66 1f       	adc	r22, r22
    274a:	77 1f       	adc	r23, r23
    274c:	17 fd       	sbrc	r17, 7
    274e:	41 60       	ori	r20, 0x01	; 1
    2750:	ee 0c       	add	r14, r14
    2752:	ff 1c       	adc	r15, r15
    2754:	00 1f       	adc	r16, r16
    2756:	11 1f       	adc	r17, r17
    2758:	21 50       	subi	r18, 0x01	; 1
    275a:	30 40       	sbci	r19, 0x00	; 0
    275c:	40 30       	cpi	r20, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	59 07       	cpc	r21, r25
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	69 07       	cpc	r22, r25
    2766:	90 e4       	ldi	r25, 0x40	; 64
    2768:	79 07       	cpc	r23, r25
    276a:	60 f3       	brcs	.-40     	; 0x2744 <__mulsf3+0x174>
    276c:	2b 8f       	std	Y+27, r18	; 0x1b
    276e:	3c 8f       	std	Y+28, r19	; 0x1c
    2770:	db 01       	movw	r26, r22
    2772:	ca 01       	movw	r24, r20
    2774:	8f 77       	andi	r24, 0x7F	; 127
    2776:	90 70       	andi	r25, 0x00	; 0
    2778:	a0 70       	andi	r26, 0x00	; 0
    277a:	b0 70       	andi	r27, 0x00	; 0
    277c:	80 34       	cpi	r24, 0x40	; 64
    277e:	91 05       	cpc	r25, r1
    2780:	a1 05       	cpc	r26, r1
    2782:	b1 05       	cpc	r27, r1
    2784:	61 f4       	brne	.+24     	; 0x279e <__mulsf3+0x1ce>
    2786:	47 fd       	sbrc	r20, 7
    2788:	0a c0       	rjmp	.+20     	; 0x279e <__mulsf3+0x1ce>
    278a:	e1 14       	cp	r14, r1
    278c:	f1 04       	cpc	r15, r1
    278e:	01 05       	cpc	r16, r1
    2790:	11 05       	cpc	r17, r1
    2792:	29 f0       	breq	.+10     	; 0x279e <__mulsf3+0x1ce>
    2794:	40 5c       	subi	r20, 0xC0	; 192
    2796:	5f 4f       	sbci	r21, 0xFF	; 255
    2798:	6f 4f       	sbci	r22, 0xFF	; 255
    279a:	7f 4f       	sbci	r23, 0xFF	; 255
    279c:	40 78       	andi	r20, 0x80	; 128
    279e:	1a 8e       	std	Y+26, r1	; 0x1a
    27a0:	fe 17       	cp	r31, r30
    27a2:	11 f0       	breq	.+4      	; 0x27a8 <__mulsf3+0x1d8>
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	8a 8f       	std	Y+26, r24	; 0x1a
    27a8:	4d 8f       	std	Y+29, r20	; 0x1d
    27aa:	5e 8f       	std	Y+30, r21	; 0x1e
    27ac:	6f 8f       	std	Y+31, r22	; 0x1f
    27ae:	78 a3       	std	Y+32, r23	; 0x20
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	89 8f       	std	Y+25, r24	; 0x19
    27b4:	ce 01       	movw	r24, r28
    27b6:	49 96       	adiw	r24, 0x19	; 25
    27b8:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__pack_f>
    27bc:	a0 96       	adiw	r28, 0x20	; 32
    27be:	e2 e1       	ldi	r30, 0x12	; 18
    27c0:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__epilogue_restores__>

000027c4 <__gtsf2>:
    27c4:	a8 e1       	ldi	r26, 0x18	; 24
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 ee       	ldi	r30, 0xE8	; 232
    27ca:	f3 e1       	ldi	r31, 0x13	; 19
    27cc:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__prologue_saves__+0x18>
    27d0:	69 83       	std	Y+1, r22	; 0x01
    27d2:	7a 83       	std	Y+2, r23	; 0x02
    27d4:	8b 83       	std	Y+3, r24	; 0x03
    27d6:	9c 83       	std	Y+4, r25	; 0x04
    27d8:	2d 83       	std	Y+5, r18	; 0x05
    27da:	3e 83       	std	Y+6, r19	; 0x06
    27dc:	4f 83       	std	Y+7, r20	; 0x07
    27de:	58 87       	std	Y+8, r21	; 0x08
    27e0:	89 e0       	ldi	r24, 0x09	; 9
    27e2:	e8 2e       	mov	r14, r24
    27e4:	f1 2c       	mov	r15, r1
    27e6:	ec 0e       	add	r14, r28
    27e8:	fd 1e       	adc	r15, r29
    27ea:	ce 01       	movw	r24, r28
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	b7 01       	movw	r22, r14
    27f0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    27f4:	8e 01       	movw	r16, r28
    27f6:	0f 5e       	subi	r16, 0xEF	; 239
    27f8:	1f 4f       	sbci	r17, 0xFF	; 255
    27fa:	ce 01       	movw	r24, r28
    27fc:	05 96       	adiw	r24, 0x05	; 5
    27fe:	b8 01       	movw	r22, r16
    2800:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	82 30       	cpi	r24, 0x02	; 2
    2808:	40 f0       	brcs	.+16     	; 0x281a <__gtsf2+0x56>
    280a:	89 89       	ldd	r24, Y+17	; 0x11
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	28 f0       	brcs	.+10     	; 0x281a <__gtsf2+0x56>
    2810:	c7 01       	movw	r24, r14
    2812:	b8 01       	movw	r22, r16
    2814:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__fpcmp_parts_f>
    2818:	01 c0       	rjmp	.+2      	; 0x281c <__gtsf2+0x58>
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	68 96       	adiw	r28, 0x18	; 24
    281e:	e6 e0       	ldi	r30, 0x06	; 6
    2820:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__epilogue_restores__+0x18>

00002824 <__gesf2>:
    2824:	a8 e1       	ldi	r26, 0x18	; 24
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e8 e1       	ldi	r30, 0x18	; 24
    282a:	f4 e1       	ldi	r31, 0x14	; 20
    282c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__prologue_saves__+0x18>
    2830:	69 83       	std	Y+1, r22	; 0x01
    2832:	7a 83       	std	Y+2, r23	; 0x02
    2834:	8b 83       	std	Y+3, r24	; 0x03
    2836:	9c 83       	std	Y+4, r25	; 0x04
    2838:	2d 83       	std	Y+5, r18	; 0x05
    283a:	3e 83       	std	Y+6, r19	; 0x06
    283c:	4f 83       	std	Y+7, r20	; 0x07
    283e:	58 87       	std	Y+8, r21	; 0x08
    2840:	89 e0       	ldi	r24, 0x09	; 9
    2842:	e8 2e       	mov	r14, r24
    2844:	f1 2c       	mov	r15, r1
    2846:	ec 0e       	add	r14, r28
    2848:	fd 1e       	adc	r15, r29
    284a:	ce 01       	movw	r24, r28
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	b7 01       	movw	r22, r14
    2850:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    2854:	8e 01       	movw	r16, r28
    2856:	0f 5e       	subi	r16, 0xEF	; 239
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	ce 01       	movw	r24, r28
    285c:	05 96       	adiw	r24, 0x05	; 5
    285e:	b8 01       	movw	r22, r16
    2860:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	82 30       	cpi	r24, 0x02	; 2
    2868:	40 f0       	brcs	.+16     	; 0x287a <__gesf2+0x56>
    286a:	89 89       	ldd	r24, Y+17	; 0x11
    286c:	82 30       	cpi	r24, 0x02	; 2
    286e:	28 f0       	brcs	.+10     	; 0x287a <__gesf2+0x56>
    2870:	c7 01       	movw	r24, r14
    2872:	b8 01       	movw	r22, r16
    2874:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__fpcmp_parts_f>
    2878:	01 c0       	rjmp	.+2      	; 0x287c <__gesf2+0x58>
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	68 96       	adiw	r28, 0x18	; 24
    287e:	e6 e0       	ldi	r30, 0x06	; 6
    2880:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__epilogue_restores__+0x18>

00002884 <__ltsf2>:
    2884:	a8 e1       	ldi	r26, 0x18	; 24
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e8 e4       	ldi	r30, 0x48	; 72
    288a:	f4 e1       	ldi	r31, 0x14	; 20
    288c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__prologue_saves__+0x18>
    2890:	69 83       	std	Y+1, r22	; 0x01
    2892:	7a 83       	std	Y+2, r23	; 0x02
    2894:	8b 83       	std	Y+3, r24	; 0x03
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	2d 83       	std	Y+5, r18	; 0x05
    289a:	3e 83       	std	Y+6, r19	; 0x06
    289c:	4f 83       	std	Y+7, r20	; 0x07
    289e:	58 87       	std	Y+8, r21	; 0x08
    28a0:	89 e0       	ldi	r24, 0x09	; 9
    28a2:	e8 2e       	mov	r14, r24
    28a4:	f1 2c       	mov	r15, r1
    28a6:	ec 0e       	add	r14, r28
    28a8:	fd 1e       	adc	r15, r29
    28aa:	ce 01       	movw	r24, r28
    28ac:	01 96       	adiw	r24, 0x01	; 1
    28ae:	b7 01       	movw	r22, r14
    28b0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    28b4:	8e 01       	movw	r16, r28
    28b6:	0f 5e       	subi	r16, 0xEF	; 239
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	ce 01       	movw	r24, r28
    28bc:	05 96       	adiw	r24, 0x05	; 5
    28be:	b8 01       	movw	r22, r16
    28c0:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	82 30       	cpi	r24, 0x02	; 2
    28c8:	40 f0       	brcs	.+16     	; 0x28da <__ltsf2+0x56>
    28ca:	89 89       	ldd	r24, Y+17	; 0x11
    28cc:	82 30       	cpi	r24, 0x02	; 2
    28ce:	28 f0       	brcs	.+10     	; 0x28da <__ltsf2+0x56>
    28d0:	c7 01       	movw	r24, r14
    28d2:	b8 01       	movw	r22, r16
    28d4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__fpcmp_parts_f>
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <__ltsf2+0x58>
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	68 96       	adiw	r28, 0x18	; 24
    28de:	e6 e0       	ldi	r30, 0x06	; 6
    28e0:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__epilogue_restores__+0x18>

000028e4 <__floatsisf>:
    28e4:	a8 e0       	ldi	r26, 0x08	; 8
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 e7       	ldi	r30, 0x78	; 120
    28ea:	f4 e1       	ldi	r31, 0x14	; 20
    28ec:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__+0x12>
    28f0:	9b 01       	movw	r18, r22
    28f2:	ac 01       	movw	r20, r24
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	da 01       	movw	r26, r20
    28fa:	c9 01       	movw	r24, r18
    28fc:	88 27       	eor	r24, r24
    28fe:	b7 fd       	sbrc	r27, 7
    2900:	83 95       	inc	r24
    2902:	99 27       	eor	r25, r25
    2904:	aa 27       	eor	r26, r26
    2906:	bb 27       	eor	r27, r27
    2908:	b8 2e       	mov	r11, r24
    290a:	21 15       	cp	r18, r1
    290c:	31 05       	cpc	r19, r1
    290e:	41 05       	cpc	r20, r1
    2910:	51 05       	cpc	r21, r1
    2912:	19 f4       	brne	.+6      	; 0x291a <__floatsisf+0x36>
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	3a c0       	rjmp	.+116    	; 0x298e <__floatsisf+0xaa>
    291a:	88 23       	and	r24, r24
    291c:	a9 f0       	breq	.+42     	; 0x2948 <__floatsisf+0x64>
    291e:	20 30       	cpi	r18, 0x00	; 0
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	38 07       	cpc	r19, r24
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	48 07       	cpc	r20, r24
    2928:	80 e8       	ldi	r24, 0x80	; 128
    292a:	58 07       	cpc	r21, r24
    292c:	29 f4       	brne	.+10     	; 0x2938 <__floatsisf+0x54>
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	9f ec       	ldi	r25, 0xCF	; 207
    2936:	30 c0       	rjmp	.+96     	; 0x2998 <__floatsisf+0xb4>
    2938:	ee 24       	eor	r14, r14
    293a:	ff 24       	eor	r15, r15
    293c:	87 01       	movw	r16, r14
    293e:	e2 1a       	sub	r14, r18
    2940:	f3 0a       	sbc	r15, r19
    2942:	04 0b       	sbc	r16, r20
    2944:	15 0b       	sbc	r17, r21
    2946:	02 c0       	rjmp	.+4      	; 0x294c <__floatsisf+0x68>
    2948:	79 01       	movw	r14, r18
    294a:	8a 01       	movw	r16, r20
    294c:	8e e1       	ldi	r24, 0x1E	; 30
    294e:	c8 2e       	mov	r12, r24
    2950:	d1 2c       	mov	r13, r1
    2952:	dc 82       	std	Y+4, r13	; 0x04
    2954:	cb 82       	std	Y+3, r12	; 0x03
    2956:	ed 82       	std	Y+5, r14	; 0x05
    2958:	fe 82       	std	Y+6, r15	; 0x06
    295a:	0f 83       	std	Y+7, r16	; 0x07
    295c:	18 87       	std	Y+8, r17	; 0x08
    295e:	c8 01       	movw	r24, r16
    2960:	b7 01       	movw	r22, r14
    2962:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__clzsi2>
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	18 16       	cp	r1, r24
    296a:	19 06       	cpc	r1, r25
    296c:	84 f4       	brge	.+32     	; 0x298e <__floatsisf+0xaa>
    296e:	08 2e       	mov	r0, r24
    2970:	04 c0       	rjmp	.+8      	; 0x297a <__floatsisf+0x96>
    2972:	ee 0c       	add	r14, r14
    2974:	ff 1c       	adc	r15, r15
    2976:	00 1f       	adc	r16, r16
    2978:	11 1f       	adc	r17, r17
    297a:	0a 94       	dec	r0
    297c:	d2 f7       	brpl	.-12     	; 0x2972 <__floatsisf+0x8e>
    297e:	ed 82       	std	Y+5, r14	; 0x05
    2980:	fe 82       	std	Y+6, r15	; 0x06
    2982:	0f 83       	std	Y+7, r16	; 0x07
    2984:	18 87       	std	Y+8, r17	; 0x08
    2986:	c8 1a       	sub	r12, r24
    2988:	d9 0a       	sbc	r13, r25
    298a:	dc 82       	std	Y+4, r13	; 0x04
    298c:	cb 82       	std	Y+3, r12	; 0x03
    298e:	ba 82       	std	Y+2, r11	; 0x02
    2990:	ce 01       	movw	r24, r28
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <__pack_f>
    2998:	28 96       	adiw	r28, 0x08	; 8
    299a:	e9 e0       	ldi	r30, 0x09	; 9
    299c:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__+0x12>

000029a0 <__fixsfsi>:
    29a0:	ac e0       	ldi	r26, 0x0C	; 12
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e6 ed       	ldi	r30, 0xD6	; 214
    29a6:	f4 e1       	ldi	r31, 0x14	; 20
    29a8:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__prologue_saves__+0x20>
    29ac:	69 83       	std	Y+1, r22	; 0x01
    29ae:	7a 83       	std	Y+2, r23	; 0x02
    29b0:	8b 83       	std	Y+3, r24	; 0x03
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	ce 01       	movw	r24, r28
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	be 01       	movw	r22, r28
    29ba:	6b 5f       	subi	r22, 0xFB	; 251
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255
    29be:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__unpack_f>
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	61 f1       	breq	.+88     	; 0x2a20 <__fixsfsi+0x80>
    29c8:	82 30       	cpi	r24, 0x02	; 2
    29ca:	50 f1       	brcs	.+84     	; 0x2a20 <__fixsfsi+0x80>
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	21 f4       	brne	.+8      	; 0x29d8 <__fixsfsi+0x38>
    29d0:	8e 81       	ldd	r24, Y+6	; 0x06
    29d2:	88 23       	and	r24, r24
    29d4:	51 f1       	breq	.+84     	; 0x2a2a <__fixsfsi+0x8a>
    29d6:	2e c0       	rjmp	.+92     	; 0x2a34 <__fixsfsi+0x94>
    29d8:	2f 81       	ldd	r18, Y+7	; 0x07
    29da:	38 85       	ldd	r19, Y+8	; 0x08
    29dc:	37 fd       	sbrc	r19, 7
    29de:	20 c0       	rjmp	.+64     	; 0x2a20 <__fixsfsi+0x80>
    29e0:	6e 81       	ldd	r22, Y+6	; 0x06
    29e2:	2f 31       	cpi	r18, 0x1F	; 31
    29e4:	31 05       	cpc	r19, r1
    29e6:	1c f0       	brlt	.+6      	; 0x29ee <__fixsfsi+0x4e>
    29e8:	66 23       	and	r22, r22
    29ea:	f9 f0       	breq	.+62     	; 0x2a2a <__fixsfsi+0x8a>
    29ec:	23 c0       	rjmp	.+70     	; 0x2a34 <__fixsfsi+0x94>
    29ee:	8e e1       	ldi	r24, 0x1E	; 30
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	82 1b       	sub	r24, r18
    29f4:	93 0b       	sbc	r25, r19
    29f6:	29 85       	ldd	r18, Y+9	; 0x09
    29f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    29fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    29fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    29fe:	04 c0       	rjmp	.+8      	; 0x2a08 <__fixsfsi+0x68>
    2a00:	56 95       	lsr	r21
    2a02:	47 95       	ror	r20
    2a04:	37 95       	ror	r19
    2a06:	27 95       	ror	r18
    2a08:	8a 95       	dec	r24
    2a0a:	d2 f7       	brpl	.-12     	; 0x2a00 <__fixsfsi+0x60>
    2a0c:	66 23       	and	r22, r22
    2a0e:	b1 f0       	breq	.+44     	; 0x2a3c <__fixsfsi+0x9c>
    2a10:	50 95       	com	r21
    2a12:	40 95       	com	r20
    2a14:	30 95       	com	r19
    2a16:	21 95       	neg	r18
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1e:	0e c0       	rjmp	.+28     	; 0x2a3c <__fixsfsi+0x9c>
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	09 c0       	rjmp	.+18     	; 0x2a3c <__fixsfsi+0x9c>
    2a2a:	2f ef       	ldi	r18, 0xFF	; 255
    2a2c:	3f ef       	ldi	r19, 0xFF	; 255
    2a2e:	4f ef       	ldi	r20, 0xFF	; 255
    2a30:	5f e7       	ldi	r21, 0x7F	; 127
    2a32:	04 c0       	rjmp	.+8      	; 0x2a3c <__fixsfsi+0x9c>
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	50 e8       	ldi	r21, 0x80	; 128
    2a3c:	b9 01       	movw	r22, r18
    2a3e:	ca 01       	movw	r24, r20
    2a40:	2c 96       	adiw	r28, 0x0c	; 12
    2a42:	e2 e0       	ldi	r30, 0x02	; 2
    2a44:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__epilogue_restores__+0x20>

00002a48 <__clzsi2>:
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	7b 01       	movw	r14, r22
    2a52:	8c 01       	movw	r16, r24
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	e8 16       	cp	r14, r24
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	f8 06       	cpc	r15, r24
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	08 07       	cpc	r16, r24
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	18 07       	cpc	r17, r24
    2a64:	88 f4       	brcc	.+34     	; 0x2a88 <__clzsi2+0x40>
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
    2a68:	e8 16       	cp	r14, r24
    2a6a:	f1 04       	cpc	r15, r1
    2a6c:	01 05       	cpc	r16, r1
    2a6e:	11 05       	cpc	r17, r1
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <__clzsi2+0x36>
    2a72:	28 f0       	brcs	.+10     	; 0x2a7e <__clzsi2+0x36>
    2a74:	88 e0       	ldi	r24, 0x08	; 8
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	a0 e0       	ldi	r26, 0x00	; 0
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	17 c0       	rjmp	.+46     	; 0x2aac <__clzsi2+0x64>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	12 c0       	rjmp	.+36     	; 0x2aac <__clzsi2+0x64>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	e8 16       	cp	r14, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	f8 06       	cpc	r15, r24
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	08 07       	cpc	r16, r24
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	18 07       	cpc	r17, r24
    2a98:	28 f0       	brcs	.+10     	; 0x2aa4 <__clzsi2+0x5c>
    2a9a:	88 e1       	ldi	r24, 0x18	; 24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e0       	ldi	r26, 0x00	; 0
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <__clzsi2+0x64>
    2aa4:	80 e1       	ldi	r24, 0x10	; 16
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	a0 e0       	ldi	r26, 0x00	; 0
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	20 e2       	ldi	r18, 0x20	; 32
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	50 e0       	ldi	r21, 0x00	; 0
    2ab4:	28 1b       	sub	r18, r24
    2ab6:	39 0b       	sbc	r19, r25
    2ab8:	4a 0b       	sbc	r20, r26
    2aba:	5b 0b       	sbc	r21, r27
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <__clzsi2+0x7e>
    2abe:	16 95       	lsr	r17
    2ac0:	07 95       	ror	r16
    2ac2:	f7 94       	ror	r15
    2ac4:	e7 94       	ror	r14
    2ac6:	8a 95       	dec	r24
    2ac8:	d2 f7       	brpl	.-12     	; 0x2abe <__clzsi2+0x76>
    2aca:	f7 01       	movw	r30, r14
    2acc:	e8 5f       	subi	r30, 0xF8	; 248
    2ace:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad0:	80 81       	ld	r24, Z
    2ad2:	28 1b       	sub	r18, r24
    2ad4:	31 09       	sbc	r19, r1
    2ad6:	41 09       	sbc	r20, r1
    2ad8:	51 09       	sbc	r21, r1
    2ada:	c9 01       	movw	r24, r18
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <__pack_f>:
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	ff 92       	push	r15
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
    2af0:	fc 01       	movw	r30, r24
    2af2:	e4 80       	ldd	r14, Z+4	; 0x04
    2af4:	f5 80       	ldd	r15, Z+5	; 0x05
    2af6:	06 81       	ldd	r16, Z+6	; 0x06
    2af8:	17 81       	ldd	r17, Z+7	; 0x07
    2afa:	d1 80       	ldd	r13, Z+1	; 0x01
    2afc:	80 81       	ld	r24, Z
    2afe:	82 30       	cpi	r24, 0x02	; 2
    2b00:	48 f4       	brcc	.+18     	; 0x2b14 <__pack_f+0x2e>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e1       	ldi	r26, 0x10	; 16
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e8 2a       	or	r14, r24
    2b0c:	f9 2a       	or	r15, r25
    2b0e:	0a 2b       	or	r16, r26
    2b10:	1b 2b       	or	r17, r27
    2b12:	a5 c0       	rjmp	.+330    	; 0x2c5e <__pack_f+0x178>
    2b14:	84 30       	cpi	r24, 0x04	; 4
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <__pack_f+0x34>
    2b18:	9f c0       	rjmp	.+318    	; 0x2c58 <__pack_f+0x172>
    2b1a:	82 30       	cpi	r24, 0x02	; 2
    2b1c:	21 f4       	brne	.+8      	; 0x2b26 <__pack_f+0x40>
    2b1e:	ee 24       	eor	r14, r14
    2b20:	ff 24       	eor	r15, r15
    2b22:	87 01       	movw	r16, r14
    2b24:	05 c0       	rjmp	.+10     	; 0x2b30 <__pack_f+0x4a>
    2b26:	e1 14       	cp	r14, r1
    2b28:	f1 04       	cpc	r15, r1
    2b2a:	01 05       	cpc	r16, r1
    2b2c:	11 05       	cpc	r17, r1
    2b2e:	19 f4       	brne	.+6      	; 0x2b36 <__pack_f+0x50>
    2b30:	e0 e0       	ldi	r30, 0x00	; 0
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	96 c0       	rjmp	.+300    	; 0x2c62 <__pack_f+0x17c>
    2b36:	62 81       	ldd	r22, Z+2	; 0x02
    2b38:	73 81       	ldd	r23, Z+3	; 0x03
    2b3a:	9f ef       	ldi	r25, 0xFF	; 255
    2b3c:	62 38       	cpi	r22, 0x82	; 130
    2b3e:	79 07       	cpc	r23, r25
    2b40:	0c f0       	brlt	.+2      	; 0x2b44 <__pack_f+0x5e>
    2b42:	5b c0       	rjmp	.+182    	; 0x2bfa <__pack_f+0x114>
    2b44:	22 e8       	ldi	r18, 0x82	; 130
    2b46:	3f ef       	ldi	r19, 0xFF	; 255
    2b48:	26 1b       	sub	r18, r22
    2b4a:	37 0b       	sbc	r19, r23
    2b4c:	2a 31       	cpi	r18, 0x1A	; 26
    2b4e:	31 05       	cpc	r19, r1
    2b50:	2c f0       	brlt	.+10     	; 0x2b5c <__pack_f+0x76>
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	2a c0       	rjmp	.+84     	; 0x2bb0 <__pack_f+0xca>
    2b5c:	b8 01       	movw	r22, r16
    2b5e:	a7 01       	movw	r20, r14
    2b60:	02 2e       	mov	r0, r18
    2b62:	04 c0       	rjmp	.+8      	; 0x2b6c <__pack_f+0x86>
    2b64:	76 95       	lsr	r23
    2b66:	67 95       	ror	r22
    2b68:	57 95       	ror	r21
    2b6a:	47 95       	ror	r20
    2b6c:	0a 94       	dec	r0
    2b6e:	d2 f7       	brpl	.-12     	; 0x2b64 <__pack_f+0x7e>
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	a0 e0       	ldi	r26, 0x00	; 0
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <__pack_f+0x9c>
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	aa 1f       	adc	r26, r26
    2b80:	bb 1f       	adc	r27, r27
    2b82:	2a 95       	dec	r18
    2b84:	d2 f7       	brpl	.-12     	; 0x2b7a <__pack_f+0x94>
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	a1 09       	sbc	r26, r1
    2b8a:	b1 09       	sbc	r27, r1
    2b8c:	8e 21       	and	r24, r14
    2b8e:	9f 21       	and	r25, r15
    2b90:	a0 23       	and	r26, r16
    2b92:	b1 23       	and	r27, r17
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	a1 05       	cpc	r26, r1
    2b98:	b1 05       	cpc	r27, r1
    2b9a:	21 f0       	breq	.+8      	; 0x2ba4 <__pack_f+0xbe>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	9a 01       	movw	r18, r20
    2ba6:	ab 01       	movw	r20, r22
    2ba8:	28 2b       	or	r18, r24
    2baa:	39 2b       	or	r19, r25
    2bac:	4a 2b       	or	r20, r26
    2bae:	5b 2b       	or	r21, r27
    2bb0:	da 01       	movw	r26, r20
    2bb2:	c9 01       	movw	r24, r18
    2bb4:	8f 77       	andi	r24, 0x7F	; 127
    2bb6:	90 70       	andi	r25, 0x00	; 0
    2bb8:	a0 70       	andi	r26, 0x00	; 0
    2bba:	b0 70       	andi	r27, 0x00	; 0
    2bbc:	80 34       	cpi	r24, 0x40	; 64
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	a1 05       	cpc	r26, r1
    2bc2:	b1 05       	cpc	r27, r1
    2bc4:	39 f4       	brne	.+14     	; 0x2bd4 <__pack_f+0xee>
    2bc6:	27 ff       	sbrs	r18, 7
    2bc8:	09 c0       	rjmp	.+18     	; 0x2bdc <__pack_f+0xf6>
    2bca:	20 5c       	subi	r18, 0xC0	; 192
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	4f 4f       	sbci	r20, 0xFF	; 255
    2bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <__pack_f+0xf6>
    2bd4:	21 5c       	subi	r18, 0xC1	; 193
    2bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd8:	4f 4f       	sbci	r20, 0xFF	; 255
    2bda:	5f 4f       	sbci	r21, 0xFF	; 255
    2bdc:	e0 e0       	ldi	r30, 0x00	; 0
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	20 30       	cpi	r18, 0x00	; 0
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	3a 07       	cpc	r19, r26
    2be6:	a0 e0       	ldi	r26, 0x00	; 0
    2be8:	4a 07       	cpc	r20, r26
    2bea:	a0 e4       	ldi	r26, 0x40	; 64
    2bec:	5a 07       	cpc	r21, r26
    2bee:	10 f0       	brcs	.+4      	; 0x2bf4 <__pack_f+0x10e>
    2bf0:	e1 e0       	ldi	r30, 0x01	; 1
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	79 01       	movw	r14, r18
    2bf6:	8a 01       	movw	r16, r20
    2bf8:	27 c0       	rjmp	.+78     	; 0x2c48 <__pack_f+0x162>
    2bfa:	60 38       	cpi	r22, 0x80	; 128
    2bfc:	71 05       	cpc	r23, r1
    2bfe:	64 f5       	brge	.+88     	; 0x2c58 <__pack_f+0x172>
    2c00:	fb 01       	movw	r30, r22
    2c02:	e1 58       	subi	r30, 0x81	; 129
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	d8 01       	movw	r26, r16
    2c08:	c7 01       	movw	r24, r14
    2c0a:	8f 77       	andi	r24, 0x7F	; 127
    2c0c:	90 70       	andi	r25, 0x00	; 0
    2c0e:	a0 70       	andi	r26, 0x00	; 0
    2c10:	b0 70       	andi	r27, 0x00	; 0
    2c12:	80 34       	cpi	r24, 0x40	; 64
    2c14:	91 05       	cpc	r25, r1
    2c16:	a1 05       	cpc	r26, r1
    2c18:	b1 05       	cpc	r27, r1
    2c1a:	39 f4       	brne	.+14     	; 0x2c2a <__pack_f+0x144>
    2c1c:	e7 fe       	sbrs	r14, 7
    2c1e:	0d c0       	rjmp	.+26     	; 0x2c3a <__pack_f+0x154>
    2c20:	80 e4       	ldi	r24, 0x40	; 64
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 e0       	ldi	r26, 0x00	; 0
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	04 c0       	rjmp	.+8      	; 0x2c32 <__pack_f+0x14c>
    2c2a:	8f e3       	ldi	r24, 0x3F	; 63
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e8 0e       	add	r14, r24
    2c34:	f9 1e       	adc	r15, r25
    2c36:	0a 1f       	adc	r16, r26
    2c38:	1b 1f       	adc	r17, r27
    2c3a:	17 ff       	sbrs	r17, 7
    2c3c:	05 c0       	rjmp	.+10     	; 0x2c48 <__pack_f+0x162>
    2c3e:	16 95       	lsr	r17
    2c40:	07 95       	ror	r16
    2c42:	f7 94       	ror	r15
    2c44:	e7 94       	ror	r14
    2c46:	31 96       	adiw	r30, 0x01	; 1
    2c48:	87 e0       	ldi	r24, 0x07	; 7
    2c4a:	16 95       	lsr	r17
    2c4c:	07 95       	ror	r16
    2c4e:	f7 94       	ror	r15
    2c50:	e7 94       	ror	r14
    2c52:	8a 95       	dec	r24
    2c54:	d1 f7       	brne	.-12     	; 0x2c4a <__pack_f+0x164>
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <__pack_f+0x17c>
    2c58:	ee 24       	eor	r14, r14
    2c5a:	ff 24       	eor	r15, r15
    2c5c:	87 01       	movw	r16, r14
    2c5e:	ef ef       	ldi	r30, 0xFF	; 255
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	6e 2f       	mov	r22, r30
    2c64:	67 95       	ror	r22
    2c66:	66 27       	eor	r22, r22
    2c68:	67 95       	ror	r22
    2c6a:	90 2f       	mov	r25, r16
    2c6c:	9f 77       	andi	r25, 0x7F	; 127
    2c6e:	d7 94       	ror	r13
    2c70:	dd 24       	eor	r13, r13
    2c72:	d7 94       	ror	r13
    2c74:	8e 2f       	mov	r24, r30
    2c76:	86 95       	lsr	r24
    2c78:	49 2f       	mov	r20, r25
    2c7a:	46 2b       	or	r20, r22
    2c7c:	58 2f       	mov	r21, r24
    2c7e:	5d 29       	or	r21, r13
    2c80:	b7 01       	movw	r22, r14
    2c82:	ca 01       	movw	r24, r20
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	08 95       	ret

00002c90 <__unpack_f>:
    2c90:	fc 01       	movw	r30, r24
    2c92:	db 01       	movw	r26, r22
    2c94:	40 81       	ld	r20, Z
    2c96:	51 81       	ldd	r21, Z+1	; 0x01
    2c98:	22 81       	ldd	r18, Z+2	; 0x02
    2c9a:	62 2f       	mov	r22, r18
    2c9c:	6f 77       	andi	r22, 0x7F	; 127
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	22 1f       	adc	r18, r18
    2ca2:	22 27       	eor	r18, r18
    2ca4:	22 1f       	adc	r18, r18
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	89 2f       	mov	r24, r25
    2caa:	88 0f       	add	r24, r24
    2cac:	82 2b       	or	r24, r18
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	99 27       	eor	r25, r25
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	11 96       	adiw	r26, 0x01	; 1
    2cba:	9c 93       	st	X, r25
    2cbc:	11 97       	sbiw	r26, 0x01	; 1
    2cbe:	21 15       	cp	r18, r1
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	a9 f5       	brne	.+106    	; 0x2d2e <__unpack_f+0x9e>
    2cc4:	41 15       	cp	r20, r1
    2cc6:	51 05       	cpc	r21, r1
    2cc8:	61 05       	cpc	r22, r1
    2cca:	71 05       	cpc	r23, r1
    2ccc:	11 f4       	brne	.+4      	; 0x2cd2 <__unpack_f+0x42>
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	37 c0       	rjmp	.+110    	; 0x2d40 <__unpack_f+0xb0>
    2cd2:	82 e8       	ldi	r24, 0x82	; 130
    2cd4:	9f ef       	ldi	r25, 0xFF	; 255
    2cd6:	13 96       	adiw	r26, 0x03	; 3
    2cd8:	9c 93       	st	X, r25
    2cda:	8e 93       	st	-X, r24
    2cdc:	12 97       	sbiw	r26, 0x02	; 2
    2cde:	9a 01       	movw	r18, r20
    2ce0:	ab 01       	movw	r20, r22
    2ce2:	67 e0       	ldi	r22, 0x07	; 7
    2ce4:	22 0f       	add	r18, r18
    2ce6:	33 1f       	adc	r19, r19
    2ce8:	44 1f       	adc	r20, r20
    2cea:	55 1f       	adc	r21, r21
    2cec:	6a 95       	dec	r22
    2cee:	d1 f7       	brne	.-12     	; 0x2ce4 <__unpack_f+0x54>
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
    2cf2:	8c 93       	st	X, r24
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <__unpack_f+0x80>
    2cf6:	22 0f       	add	r18, r18
    2cf8:	33 1f       	adc	r19, r19
    2cfa:	44 1f       	adc	r20, r20
    2cfc:	55 1f       	adc	r21, r21
    2cfe:	12 96       	adiw	r26, 0x02	; 2
    2d00:	8d 91       	ld	r24, X+
    2d02:	9c 91       	ld	r25, X
    2d04:	13 97       	sbiw	r26, 0x03	; 3
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	13 96       	adiw	r26, 0x03	; 3
    2d0a:	9c 93       	st	X, r25
    2d0c:	8e 93       	st	-X, r24
    2d0e:	12 97       	sbiw	r26, 0x02	; 2
    2d10:	20 30       	cpi	r18, 0x00	; 0
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	38 07       	cpc	r19, r24
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	48 07       	cpc	r20, r24
    2d1a:	80 e4       	ldi	r24, 0x40	; 64
    2d1c:	58 07       	cpc	r21, r24
    2d1e:	58 f3       	brcs	.-42     	; 0x2cf6 <__unpack_f+0x66>
    2d20:	14 96       	adiw	r26, 0x04	; 4
    2d22:	2d 93       	st	X+, r18
    2d24:	3d 93       	st	X+, r19
    2d26:	4d 93       	st	X+, r20
    2d28:	5c 93       	st	X, r21
    2d2a:	17 97       	sbiw	r26, 0x07	; 7
    2d2c:	08 95       	ret
    2d2e:	2f 3f       	cpi	r18, 0xFF	; 255
    2d30:	31 05       	cpc	r19, r1
    2d32:	79 f4       	brne	.+30     	; 0x2d52 <__unpack_f+0xc2>
    2d34:	41 15       	cp	r20, r1
    2d36:	51 05       	cpc	r21, r1
    2d38:	61 05       	cpc	r22, r1
    2d3a:	71 05       	cpc	r23, r1
    2d3c:	19 f4       	brne	.+6      	; 0x2d44 <__unpack_f+0xb4>
    2d3e:	84 e0       	ldi	r24, 0x04	; 4
    2d40:	8c 93       	st	X, r24
    2d42:	08 95       	ret
    2d44:	64 ff       	sbrs	r22, 4
    2d46:	03 c0       	rjmp	.+6      	; 0x2d4e <__unpack_f+0xbe>
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	8c 93       	st	X, r24
    2d4c:	12 c0       	rjmp	.+36     	; 0x2d72 <__unpack_f+0xe2>
    2d4e:	1c 92       	st	X, r1
    2d50:	10 c0       	rjmp	.+32     	; 0x2d72 <__unpack_f+0xe2>
    2d52:	2f 57       	subi	r18, 0x7F	; 127
    2d54:	30 40       	sbci	r19, 0x00	; 0
    2d56:	13 96       	adiw	r26, 0x03	; 3
    2d58:	3c 93       	st	X, r19
    2d5a:	2e 93       	st	-X, r18
    2d5c:	12 97       	sbiw	r26, 0x02	; 2
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	8c 93       	st	X, r24
    2d62:	87 e0       	ldi	r24, 0x07	; 7
    2d64:	44 0f       	add	r20, r20
    2d66:	55 1f       	adc	r21, r21
    2d68:	66 1f       	adc	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	8a 95       	dec	r24
    2d6e:	d1 f7       	brne	.-12     	; 0x2d64 <__unpack_f+0xd4>
    2d70:	70 64       	ori	r23, 0x40	; 64
    2d72:	14 96       	adiw	r26, 0x04	; 4
    2d74:	4d 93       	st	X+, r20
    2d76:	5d 93       	st	X+, r21
    2d78:	6d 93       	st	X+, r22
    2d7a:	7c 93       	st	X, r23
    2d7c:	17 97       	sbiw	r26, 0x07	; 7
    2d7e:	08 95       	ret

00002d80 <__fpcmp_parts_f>:
    2d80:	1f 93       	push	r17
    2d82:	dc 01       	movw	r26, r24
    2d84:	fb 01       	movw	r30, r22
    2d86:	9c 91       	ld	r25, X
    2d88:	92 30       	cpi	r25, 0x02	; 2
    2d8a:	08 f4       	brcc	.+2      	; 0x2d8e <__fpcmp_parts_f+0xe>
    2d8c:	47 c0       	rjmp	.+142    	; 0x2e1c <__fpcmp_parts_f+0x9c>
    2d8e:	80 81       	ld	r24, Z
    2d90:	82 30       	cpi	r24, 0x02	; 2
    2d92:	08 f4       	brcc	.+2      	; 0x2d96 <__fpcmp_parts_f+0x16>
    2d94:	43 c0       	rjmp	.+134    	; 0x2e1c <__fpcmp_parts_f+0x9c>
    2d96:	94 30       	cpi	r25, 0x04	; 4
    2d98:	51 f4       	brne	.+20     	; 0x2dae <__fpcmp_parts_f+0x2e>
    2d9a:	11 96       	adiw	r26, 0x01	; 1
    2d9c:	1c 91       	ld	r17, X
    2d9e:	84 30       	cpi	r24, 0x04	; 4
    2da0:	99 f5       	brne	.+102    	; 0x2e08 <__fpcmp_parts_f+0x88>
    2da2:	81 81       	ldd	r24, Z+1	; 0x01
    2da4:	68 2f       	mov	r22, r24
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	61 1b       	sub	r22, r17
    2daa:	71 09       	sbc	r23, r1
    2dac:	3f c0       	rjmp	.+126    	; 0x2e2c <__fpcmp_parts_f+0xac>
    2dae:	84 30       	cpi	r24, 0x04	; 4
    2db0:	21 f0       	breq	.+8      	; 0x2dba <__fpcmp_parts_f+0x3a>
    2db2:	92 30       	cpi	r25, 0x02	; 2
    2db4:	31 f4       	brne	.+12     	; 0x2dc2 <__fpcmp_parts_f+0x42>
    2db6:	82 30       	cpi	r24, 0x02	; 2
    2db8:	b9 f1       	breq	.+110    	; 0x2e28 <__fpcmp_parts_f+0xa8>
    2dba:	81 81       	ldd	r24, Z+1	; 0x01
    2dbc:	88 23       	and	r24, r24
    2dbe:	89 f1       	breq	.+98     	; 0x2e22 <__fpcmp_parts_f+0xa2>
    2dc0:	2d c0       	rjmp	.+90     	; 0x2e1c <__fpcmp_parts_f+0x9c>
    2dc2:	11 96       	adiw	r26, 0x01	; 1
    2dc4:	1c 91       	ld	r17, X
    2dc6:	11 97       	sbiw	r26, 0x01	; 1
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	f1 f0       	breq	.+60     	; 0x2e08 <__fpcmp_parts_f+0x88>
    2dcc:	81 81       	ldd	r24, Z+1	; 0x01
    2dce:	18 17       	cp	r17, r24
    2dd0:	d9 f4       	brne	.+54     	; 0x2e08 <__fpcmp_parts_f+0x88>
    2dd2:	12 96       	adiw	r26, 0x02	; 2
    2dd4:	2d 91       	ld	r18, X+
    2dd6:	3c 91       	ld	r19, X
    2dd8:	13 97       	sbiw	r26, 0x03	; 3
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	82 17       	cp	r24, r18
    2de0:	93 07       	cpc	r25, r19
    2de2:	94 f0       	brlt	.+36     	; 0x2e08 <__fpcmp_parts_f+0x88>
    2de4:	28 17       	cp	r18, r24
    2de6:	39 07       	cpc	r19, r25
    2de8:	bc f0       	brlt	.+46     	; 0x2e18 <__fpcmp_parts_f+0x98>
    2dea:	14 96       	adiw	r26, 0x04	; 4
    2dec:	8d 91       	ld	r24, X+
    2dee:	9d 91       	ld	r25, X+
    2df0:	0d 90       	ld	r0, X+
    2df2:	bc 91       	ld	r27, X
    2df4:	a0 2d       	mov	r26, r0
    2df6:	24 81       	ldd	r18, Z+4	; 0x04
    2df8:	35 81       	ldd	r19, Z+5	; 0x05
    2dfa:	46 81       	ldd	r20, Z+6	; 0x06
    2dfc:	57 81       	ldd	r21, Z+7	; 0x07
    2dfe:	28 17       	cp	r18, r24
    2e00:	39 07       	cpc	r19, r25
    2e02:	4a 07       	cpc	r20, r26
    2e04:	5b 07       	cpc	r21, r27
    2e06:	18 f4       	brcc	.+6      	; 0x2e0e <__fpcmp_parts_f+0x8e>
    2e08:	11 23       	and	r17, r17
    2e0a:	41 f0       	breq	.+16     	; 0x2e1c <__fpcmp_parts_f+0x9c>
    2e0c:	0a c0       	rjmp	.+20     	; 0x2e22 <__fpcmp_parts_f+0xa2>
    2e0e:	82 17       	cp	r24, r18
    2e10:	93 07       	cpc	r25, r19
    2e12:	a4 07       	cpc	r26, r20
    2e14:	b5 07       	cpc	r27, r21
    2e16:	40 f4       	brcc	.+16     	; 0x2e28 <__fpcmp_parts_f+0xa8>
    2e18:	11 23       	and	r17, r17
    2e1a:	19 f0       	breq	.+6      	; 0x2e22 <__fpcmp_parts_f+0xa2>
    2e1c:	61 e0       	ldi	r22, 0x01	; 1
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	05 c0       	rjmp	.+10     	; 0x2e2c <__fpcmp_parts_f+0xac>
    2e22:	6f ef       	ldi	r22, 0xFF	; 255
    2e24:	7f ef       	ldi	r23, 0xFF	; 255
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <__fpcmp_parts_f+0xac>
    2e28:	60 e0       	ldi	r22, 0x00	; 0
    2e2a:	70 e0       	ldi	r23, 0x00	; 0
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	1f 91       	pop	r17
    2e30:	08 95       	ret

00002e32 <atol>:
    2e32:	1f 93       	push	r17
    2e34:	fc 01       	movw	r30, r24
    2e36:	99 27       	eor	r25, r25
    2e38:	88 27       	eor	r24, r24
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	e8 94       	clt
    2e3e:	11 91       	ld	r17, Z+
    2e40:	10 32       	cpi	r17, 0x20	; 32
    2e42:	e9 f3       	breq	.-6      	; 0x2e3e <atol+0xc>
    2e44:	19 30       	cpi	r17, 0x09	; 9
    2e46:	10 f0       	brcs	.+4      	; 0x2e4c <atol+0x1a>
    2e48:	1e 30       	cpi	r17, 0x0E	; 14
    2e4a:	c8 f3       	brcs	.-14     	; 0x2e3e <atol+0xc>
    2e4c:	1b 32       	cpi	r17, 0x2B	; 43
    2e4e:	51 f0       	breq	.+20     	; 0x2e64 <atol+0x32>
    2e50:	1d 32       	cpi	r17, 0x2D	; 45
    2e52:	49 f4       	brne	.+18     	; 0x2e66 <atol+0x34>
    2e54:	68 94       	set
    2e56:	06 c0       	rjmp	.+12     	; 0x2e64 <atol+0x32>
    2e58:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__mulsi_const_10>
    2e5c:	61 0f       	add	r22, r17
    2e5e:	71 1d       	adc	r23, r1
    2e60:	81 1d       	adc	r24, r1
    2e62:	91 1d       	adc	r25, r1
    2e64:	11 91       	ld	r17, Z+
    2e66:	10 53       	subi	r17, 0x30	; 48
    2e68:	1a 30       	cpi	r17, 0x0A	; 10
    2e6a:	b0 f3       	brcs	.-20     	; 0x2e58 <atol+0x26>
    2e6c:	3e f4       	brtc	.+14     	; 0x2e7c <atol+0x4a>
    2e6e:	90 95       	com	r25
    2e70:	80 95       	com	r24
    2e72:	70 95       	com	r23
    2e74:	61 95       	neg	r22
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7c:	1f 91       	pop	r17
    2e7e:	08 95       	ret

00002e80 <memcpy>:
    2e80:	fb 01       	movw	r30, r22
    2e82:	dc 01       	movw	r26, r24
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <memcpy+0xa>
    2e86:	01 90       	ld	r0, Z+
    2e88:	0d 92       	st	X+, r0
    2e8a:	41 50       	subi	r20, 0x01	; 1
    2e8c:	50 40       	sbci	r21, 0x00	; 0
    2e8e:	d8 f7       	brcc	.-10     	; 0x2e86 <memcpy+0x6>
    2e90:	08 95       	ret

00002e92 <__mulsi_const_10>:
    2e92:	59 2f       	mov	r21, r25
    2e94:	48 2f       	mov	r20, r24
    2e96:	37 2f       	mov	r19, r23
    2e98:	26 2f       	mov	r18, r22
    2e9a:	66 0f       	add	r22, r22
    2e9c:	77 1f       	adc	r23, r23
    2e9e:	88 1f       	adc	r24, r24
    2ea0:	99 1f       	adc	r25, r25
    2ea2:	66 0f       	add	r22, r22
    2ea4:	77 1f       	adc	r23, r23
    2ea6:	88 1f       	adc	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	62 0f       	add	r22, r18
    2eac:	73 1f       	adc	r23, r19
    2eae:	84 1f       	adc	r24, r20
    2eb0:	95 1f       	adc	r25, r21
    2eb2:	66 0f       	add	r22, r22
    2eb4:	77 1f       	adc	r23, r23
    2eb6:	88 1f       	adc	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	08 95       	ret

00002ebc <__prologue_saves__>:
    2ebc:	2f 92       	push	r2
    2ebe:	3f 92       	push	r3
    2ec0:	4f 92       	push	r4
    2ec2:	5f 92       	push	r5
    2ec4:	6f 92       	push	r6
    2ec6:	7f 92       	push	r7
    2ec8:	8f 92       	push	r8
    2eca:	9f 92       	push	r9
    2ecc:	af 92       	push	r10
    2ece:	bf 92       	push	r11
    2ed0:	cf 92       	push	r12
    2ed2:	df 92       	push	r13
    2ed4:	ef 92       	push	r14
    2ed6:	ff 92       	push	r15
    2ed8:	0f 93       	push	r16
    2eda:	1f 93       	push	r17
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	ca 1b       	sub	r28, r26
    2ee6:	db 0b       	sbc	r29, r27
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	09 94       	ijmp

00002ef4 <__epilogue_restores__>:
    2ef4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ef6:	39 88       	ldd	r3, Y+17	; 0x11
    2ef8:	48 88       	ldd	r4, Y+16	; 0x10
    2efa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2efc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2efe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f06:	b9 84       	ldd	r11, Y+9	; 0x09
    2f08:	c8 84       	ldd	r12, Y+8	; 0x08
    2f0a:	df 80       	ldd	r13, Y+7	; 0x07
    2f0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f10:	0c 81       	ldd	r16, Y+4	; 0x04
    2f12:	1b 81       	ldd	r17, Y+3	; 0x03
    2f14:	aa 81       	ldd	r26, Y+2	; 0x02
    2f16:	b9 81       	ldd	r27, Y+1	; 0x01
    2f18:	ce 0f       	add	r28, r30
    2f1a:	d1 1d       	adc	r29, r1
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	ed 01       	movw	r28, r26
    2f28:	08 95       	ret

00002f2a <fmin>:
    2f2a:	99 0f       	add	r25, r25
    2f2c:	bb 0b       	sbc	r27, r27
    2f2e:	55 0f       	add	r21, r21
    2f30:	aa 0b       	sbc	r26, r26
    2f32:	e0 e8       	ldi	r30, 0x80	; 128
    2f34:	fe ef       	ldi	r31, 0xFE	; 254
    2f36:	16 16       	cp	r1, r22
    2f38:	17 06       	cpc	r1, r23
    2f3a:	e8 07       	cpc	r30, r24
    2f3c:	f9 07       	cpc	r31, r25
    2f3e:	70 f0       	brcs	.+28     	; 0x2f5c <fmin+0x32>
    2f40:	12 16       	cp	r1, r18
    2f42:	13 06       	cpc	r1, r19
    2f44:	e4 07       	cpc	r30, r20
    2f46:	f5 07       	cpc	r31, r21
    2f48:	60 f0       	brcs	.+24     	; 0x2f62 <fmin+0x38>
    2f4a:	ba 17       	cp	r27, r26
    2f4c:	54 f0       	brlt	.+20     	; 0x2f62 <fmin+0x38>
    2f4e:	31 f4       	brne	.+12     	; 0x2f5c <fmin+0x32>
    2f50:	26 17       	cp	r18, r22
    2f52:	37 07       	cpc	r19, r23
    2f54:	48 07       	cpc	r20, r24
    2f56:	59 07       	cpc	r21, r25
    2f58:	a7 95       	ror	r26
    2f5a:	1b f4       	brvc	.+6      	; 0x2f62 <fmin+0x38>
    2f5c:	b9 01       	movw	r22, r18
    2f5e:	ca 01       	movw	r24, r20
    2f60:	ba 2f       	mov	r27, r26
    2f62:	b6 95       	lsr	r27
    2f64:	97 95       	ror	r25
    2f66:	08 95       	ret

00002f68 <_exit>:
    2f68:	f8 94       	cli

00002f6a <__stop_program>:
    2f6a:	ff cf       	rjmp	.-2      	; 0x2f6a <__stop_program>
