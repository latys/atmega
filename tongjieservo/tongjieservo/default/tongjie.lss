
tongjie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800200  0000306c  00003100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000306c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080030c  0080030c  0000320c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000070b  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c14  00000000  00000000  00003937  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  0000454b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001239  00000000  00000000  000046fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00005938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000697  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_16>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      58:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      5c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      64:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_25>
      68:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      6c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      70:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      7c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_31>
      80:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      84:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      8c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      90:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_36>
      94:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      98:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      9c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_41>
      a8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      ac:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      b8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_46>
      bc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      c8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      cc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      d8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      dc:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      e0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ec e6       	ldi	r30, 0x6C	; 108
      f8:	f0 e3       	ldi	r31, 0x30	; 48
      fa:	02 c0       	rjmp	.+4      	; 0x100 <.do_copy_data_start>

000000fc <.do_copy_data_loop>:
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0

00000100 <.do_copy_data_start>:
     100:	ac 30       	cpi	r26, 0x0C	; 12
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <.do_copy_data_loop>

00000106 <__do_clear_bss>:
     106:	13 e0       	ldi	r17, 0x03	; 3
     108:	ac e0       	ldi	r26, 0x0C	; 12
     10a:	b3 e0       	ldi	r27, 0x03	; 3
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a1 3d       	cpi	r26, 0xD1	; 209
     112:	b1 07       	cpc	r27, r17
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 4e 10 	call	0x209c	; 0x209c <main>
     11a:	0c 94 34 18 	jmp	0x3068	; 0x3068 <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <__vector_16>:
/*****************************************ÖÐ¶Ïº¯Êý**********************************************************************************/



ISR(TIMER1_CAPT_vect)
{
     122:	1f 92       	push	r1
     124:	0f 92       	push	r0
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	0f 92       	push	r0
     12a:	11 24       	eor	r1, r1
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
     130:	af 93       	push	r26
     132:	bf 93       	push	r27
     134:	df 93       	push	r29
     136:	cf 93       	push	r28
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
	motor1Step++;
     13c:	80 91 cc 03 	lds	r24, 0x03CC
     140:	90 91 cd 03 	lds	r25, 0x03CD
     144:	a0 91 ce 03 	lds	r26, 0x03CE
     148:	b0 91 cf 03 	lds	r27, 0x03CF
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	a1 1d       	adc	r26, r1
     150:	b1 1d       	adc	r27, r1
     152:	80 93 cc 03 	sts	0x03CC, r24
     156:	90 93 cd 03 	sts	0x03CD, r25
     15a:	a0 93 ce 03 	sts	0x03CE, r26
     15e:	b0 93 cf 03 	sts	0x03CF, r27
	
	if(Motor1Status==MOTOR_FORWARD)
     162:	80 91 9a 03 	lds	r24, 0x039A
     166:	81 33       	cpi	r24, 0x31	; 49
     168:	a1 f4       	brne	.+40     	; 0x192 <__vector_16+0x70>
	{
		Position1++;
     16a:	80 91 72 03 	lds	r24, 0x0372
     16e:	90 91 73 03 	lds	r25, 0x0373
     172:	a0 91 74 03 	lds	r26, 0x0374
     176:	b0 91 75 03 	lds	r27, 0x0375
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	a1 1d       	adc	r26, r1
     17e:	b1 1d       	adc	r27, r1
     180:	80 93 72 03 	sts	0x0372, r24
     184:	90 93 73 03 	sts	0x0373, r25
     188:	a0 93 74 03 	sts	0x0374, r26
     18c:	b0 93 75 03 	sts	0x0375, r27
     190:	17 c0       	rjmp	.+46     	; 0x1c0 <__vector_16+0x9e>
	}
	else if(Motor1Status==MOTOR_BACKWARD)
     192:	80 91 9a 03 	lds	r24, 0x039A
     196:	80 33       	cpi	r24, 0x30	; 48
     198:	99 f4       	brne	.+38     	; 0x1c0 <__vector_16+0x9e>
	{
		Position1--;
     19a:	80 91 72 03 	lds	r24, 0x0372
     19e:	90 91 73 03 	lds	r25, 0x0373
     1a2:	a0 91 74 03 	lds	r26, 0x0374
     1a6:	b0 91 75 03 	lds	r27, 0x0375
     1aa:	01 97       	sbiw	r24, 0x01	; 1
     1ac:	a1 09       	sbc	r26, r1
     1ae:	b1 09       	sbc	r27, r1
     1b0:	80 93 72 03 	sts	0x0372, r24
     1b4:	90 93 73 03 	sts	0x0373, r25
     1b8:	a0 93 74 03 	sts	0x0374, r26
     1bc:	b0 93 75 03 	sts	0x0375, r27
	}

}
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	8f 93       	push	r24
     1e2:	9f 93       	push	r25
     1e4:	af 93       	push	r26
     1e6:	bf 93       	push	r27
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
	motor2Step++;
     1f0:	80 91 be 03 	lds	r24, 0x03BE
     1f4:	90 91 bf 03 	lds	r25, 0x03BF
     1f8:	a0 91 c0 03 	lds	r26, 0x03C0
     1fc:	b0 91 c1 03 	lds	r27, 0x03C1
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	a1 1d       	adc	r26, r1
     204:	b1 1d       	adc	r27, r1
     206:	80 93 be 03 	sts	0x03BE, r24
     20a:	90 93 bf 03 	sts	0x03BF, r25
     20e:	a0 93 c0 03 	sts	0x03C0, r26
     212:	b0 93 c1 03 	sts	0x03C1, r27
		if(Motor2Status==MOTOR_FORWARD)
     216:	80 91 8c 03 	lds	r24, 0x038C
     21a:	81 33       	cpi	r24, 0x31	; 49
     21c:	a1 f4       	brne	.+40     	; 0x246 <__vector_31+0x70>
	{
		Position2++;
     21e:	80 91 13 03 	lds	r24, 0x0313
     222:	90 91 14 03 	lds	r25, 0x0314
     226:	a0 91 15 03 	lds	r26, 0x0315
     22a:	b0 91 16 03 	lds	r27, 0x0316
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	a1 1d       	adc	r26, r1
     232:	b1 1d       	adc	r27, r1
     234:	80 93 13 03 	sts	0x0313, r24
     238:	90 93 14 03 	sts	0x0314, r25
     23c:	a0 93 15 03 	sts	0x0315, r26
     240:	b0 93 16 03 	sts	0x0316, r27
     244:	17 c0       	rjmp	.+46     	; 0x274 <__vector_31+0x9e>
	}
	else if(Motor2Status==MOTOR_BACKWARD)
     246:	80 91 8c 03 	lds	r24, 0x038C
     24a:	80 33       	cpi	r24, 0x30	; 48
     24c:	99 f4       	brne	.+38     	; 0x274 <__vector_31+0x9e>
	{
		Position2--;
     24e:	80 91 13 03 	lds	r24, 0x0313
     252:	90 91 14 03 	lds	r25, 0x0314
     256:	a0 91 15 03 	lds	r26, 0x0315
     25a:	b0 91 16 03 	lds	r27, 0x0316
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	a1 09       	sbc	r26, r1
     262:	b1 09       	sbc	r27, r1
     264:	80 93 13 03 	sts	0x0313, r24
     268:	90 93 14 03 	sts	0x0314, r25
     26c:	a0 93 15 03 	sts	0x0315, r26
     270:	b0 93 16 03 	sts	0x0316, r27
	}

}
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	bf 91       	pop	r27
     27a:	af 91       	pop	r26
     27c:	9f 91       	pop	r25
     27e:	8f 91       	pop	r24
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_41>:

ISR(TIMER4_CAPT_vect)
{
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	8f 93       	push	r24
     296:	9f 93       	push	r25
     298:	af 93       	push	r26
     29a:	bf 93       	push	r27
     29c:	df 93       	push	r29
     29e:	cf 93       	push	r28
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	motor3Step++;
     2a4:	80 91 29 03 	lds	r24, 0x0329
     2a8:	90 91 2a 03 	lds	r25, 0x032A
     2ac:	a0 91 2b 03 	lds	r26, 0x032B
     2b0:	b0 91 2c 03 	lds	r27, 0x032C
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	a1 1d       	adc	r26, r1
     2b8:	b1 1d       	adc	r27, r1
     2ba:	80 93 29 03 	sts	0x0329, r24
     2be:	90 93 2a 03 	sts	0x032A, r25
     2c2:	a0 93 2b 03 	sts	0x032B, r26
     2c6:	b0 93 2c 03 	sts	0x032C, r27
	if(Motor3Status==MOTOR_FORWARD)
     2ca:	80 91 3c 03 	lds	r24, 0x033C
     2ce:	81 33       	cpi	r24, 0x31	; 49
     2d0:	a1 f4       	brne	.+40     	; 0x2fa <__vector_41+0x70>
	{
		Position3++;
     2d2:	80 91 92 03 	lds	r24, 0x0392
     2d6:	90 91 93 03 	lds	r25, 0x0393
     2da:	a0 91 94 03 	lds	r26, 0x0394
     2de:	b0 91 95 03 	lds	r27, 0x0395
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	a1 1d       	adc	r26, r1
     2e6:	b1 1d       	adc	r27, r1
     2e8:	80 93 92 03 	sts	0x0392, r24
     2ec:	90 93 93 03 	sts	0x0393, r25
     2f0:	a0 93 94 03 	sts	0x0394, r26
     2f4:	b0 93 95 03 	sts	0x0395, r27
     2f8:	17 c0       	rjmp	.+46     	; 0x328 <__vector_41+0x9e>
	}
	else if(Motor3Status==MOTOR_BACKWARD)
     2fa:	80 91 3c 03 	lds	r24, 0x033C
     2fe:	80 33       	cpi	r24, 0x30	; 48
     300:	99 f4       	brne	.+38     	; 0x328 <__vector_41+0x9e>
	{
		Position3--;
     302:	80 91 92 03 	lds	r24, 0x0392
     306:	90 91 93 03 	lds	r25, 0x0393
     30a:	a0 91 94 03 	lds	r26, 0x0394
     30e:	b0 91 95 03 	lds	r27, 0x0395
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	a1 09       	sbc	r26, r1
     316:	b1 09       	sbc	r27, r1
     318:	80 93 92 03 	sts	0x0392, r24
     31c:	90 93 93 03 	sts	0x0393, r25
     320:	a0 93 94 03 	sts	0x0394, r26
     324:	b0 93 95 03 	sts	0x0395, r27
	}

}
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <__vector_46>:
ISR(TIMER5_CAPT_vect)
{
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	8f 93       	push	r24
     34a:	9f 93       	push	r25
     34c:	af 93       	push	r26
     34e:	bf 93       	push	r27
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	motor4Step++;
     358:	80 91 c2 03 	lds	r24, 0x03C2
     35c:	90 91 c3 03 	lds	r25, 0x03C3
     360:	a0 91 c4 03 	lds	r26, 0x03C4
     364:	b0 91 c5 03 	lds	r27, 0x03C5
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	a1 1d       	adc	r26, r1
     36c:	b1 1d       	adc	r27, r1
     36e:	80 93 c2 03 	sts	0x03C2, r24
     372:	90 93 c3 03 	sts	0x03C3, r25
     376:	a0 93 c4 03 	sts	0x03C4, r26
     37a:	b0 93 c5 03 	sts	0x03C5, r27
	if(Motor4Status==MOTOR_FORWARD)
     37e:	80 91 3d 03 	lds	r24, 0x033D
     382:	81 33       	cpi	r24, 0x31	; 49
     384:	a1 f4       	brne	.+40     	; 0x3ae <__vector_46+0x70>
	{
		Position4++;
     386:	80 91 8e 03 	lds	r24, 0x038E
     38a:	90 91 8f 03 	lds	r25, 0x038F
     38e:	a0 91 90 03 	lds	r26, 0x0390
     392:	b0 91 91 03 	lds	r27, 0x0391
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	a1 1d       	adc	r26, r1
     39a:	b1 1d       	adc	r27, r1
     39c:	80 93 8e 03 	sts	0x038E, r24
     3a0:	90 93 8f 03 	sts	0x038F, r25
     3a4:	a0 93 90 03 	sts	0x0390, r26
     3a8:	b0 93 91 03 	sts	0x0391, r27
     3ac:	17 c0       	rjmp	.+46     	; 0x3dc <__vector_46+0x9e>
	}
	else if(Motor4Status==MOTOR_BACKWARD)
     3ae:	80 91 3d 03 	lds	r24, 0x033D
     3b2:	80 33       	cpi	r24, 0x30	; 48
     3b4:	99 f4       	brne	.+38     	; 0x3dc <__vector_46+0x9e>
	{
		Position4--;
     3b6:	80 91 8e 03 	lds	r24, 0x038E
     3ba:	90 91 8f 03 	lds	r25, 0x038F
     3be:	a0 91 90 03 	lds	r26, 0x0390
     3c2:	b0 91 91 03 	lds	r27, 0x0391
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	a1 09       	sbc	r26, r1
     3ca:	b1 09       	sbc	r27, r1
     3cc:	80 93 8e 03 	sts	0x038E, r24
     3d0:	90 93 8f 03 	sts	0x038F, r25
     3d4:	a0 93 90 03 	sts	0x0390, r26
     3d8:	b0 93 91 03 	sts	0x0391, r27
	}

}
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <__vector_36>:


ISR(USART1_RX_vect)
   {
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	0f 92       	push	r0
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
    unsigned char temp;
	
	temp=UDR1;
     40e:	ee ec       	ldi	r30, 0xCE	; 206
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	89 83       	std	Y+1, r24	; 0x01
	UART1_RECV_BUFFER[UART1_RECV_INDEX]=temp;
     416:	80 91 0d 03 	lds	r24, 0x030D
     41a:	88 2f       	mov	r24, r24
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	e9 5e       	subi	r30, 0xE9	; 233
     422:	fc 4f       	sbci	r31, 0xFC	; 252
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	80 83       	st	Z, r24
	
	if(UART1_RECV_INDEX==3)
     428:	80 91 0d 03 	lds	r24, 0x030D
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	31 f4       	brne	.+12     	; 0x43c <__vector_36+0x4a>
	   {
	     UART1_RECV_FLAG=1;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 48 03 	sts	0x0348, r24
		 UART1_RECV_INDEX=0;
     436:	10 92 0d 03 	sts	0x030D, r1
     43a:	07 c0       	rjmp	.+14     	; 0x44a <__vector_36+0x58>
	   
	   }
	   
	 else
	 {
		 UART1_RECV_INDEX++;
     43c:	80 91 0d 03 	lds	r24, 0x030D
     440:	8f 5f       	subi	r24, 0xFF	; 255
     442:	80 93 0d 03 	sts	0x030D, r24
		 UART1_RECV_FLAG=0;
     446:	10 92 48 03 	sts	0x0348, r1
	else
	   {	 
	   global_232_receive_buffer[0]=UDR1;
       global_yon_232_receive=TRUE;     
	   }*/
   }
     44a:	0f 90       	pop	r0
     44c:	cf 91       	pop	r28
     44e:	df 91       	pop	r29
     450:	ff 91       	pop	r31
     452:	ef 91       	pop	r30
     454:	9f 91       	pop	r25
     456:	8f 91       	pop	r24
     458:	0f 90       	pop	r0
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	0f 90       	pop	r0
     45e:	1f 90       	pop	r1
     460:	18 95       	reti

00000462 <__vector_25>:


ISR(USART0_RX_vect)
    {
     462:	1f 92       	push	r1
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	00 d0       	rcall	.+0      	; 0x48a <__vector_25+0x28>
     48a:	00 d0       	rcall	.+0      	; 0x48c <__vector_25+0x2a>
     48c:	00 d0       	rcall	.+0      	; 0x48e <__vector_25+0x2c>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
    unsigned char temp;
	unsigned char pwm[5];

	temp=UDR0;
     492:	e6 ec       	ldi	r30, 0xC6	; 198
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	89 83       	std	Y+1, r24	; 0x01
	UART0_RECV_BUFFER[UART0_RECV_INDEX]=temp;
     49a:	80 91 0c 03 	lds	r24, 0x030C
     49e:	88 2f       	mov	r24, r24
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	fc 01       	movw	r30, r24
     4a4:	e5 56       	subi	r30, 0x65	; 101
     4a6:	fc 4f       	sbci	r31, 0xFC	; 252
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	80 83       	st	Z, r24
	if(temp==0x0D)
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	8d 30       	cpi	r24, 0x0D	; 13
     4b0:	11 f5       	brne	.+68     	; 0x4f6 <__vector_25+0x94>
	{
		if(UART0_RECV_INDEX>=10)
     4b2:	80 91 0c 03 	lds	r24, 0x030C
     4b6:	8a 30       	cpi	r24, 0x0A	; 10
     4b8:	20 f0       	brcs	.+8      	; 0x4c2 <__vector_25+0x60>
		{
			UART0_RECV_FLAG=1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 5d 03 	sts	0x035D, r24
     4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <__vector_25+0x8e>
		
		}
		else
		{
			memcpy(pwm,UART0_RECV_BUFFER,4);
     4c2:	ce 01       	movw	r24, r28
     4c4:	02 96       	adiw	r24, 0x02	; 2
     4c6:	2b e9       	ldi	r18, 0x9B	; 155
     4c8:	33 e0       	ldi	r19, 0x03	; 3
     4ca:	b9 01       	movw	r22, r18
     4cc:	44 e0       	ldi	r20, 0x04	; 4
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
			global_pwm_c=atol(pwm);
     4d4:	ce 01       	movw	r24, r28
     4d6:	02 96       	adiw	r24, 0x02	; 2
     4d8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	80 93 00 02 	sts	0x0200, r24
     4e4:	90 93 01 02 	sts	0x0201, r25
     4e8:	a0 93 02 02 	sts	0x0202, r26
     4ec:	b0 93 03 02 	sts	0x0203, r27
		//global_pwm_c=1023;
		
		}
		UART0_RECV_INDEX=0;
     4f0:	10 92 0c 03 	sts	0x030C, r1
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <__vector_25+0xa2>
	}
	else
	{
		
		UART0_RECV_INDEX++;
     4f6:	80 91 0c 03 	lds	r24, 0x030C
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	80 93 0c 03 	sts	0x030C, r24
		UART0_RECV_FLAG=0;
     500:	10 92 5d 03 	sts	0x035D, r1
	}


   }
     504:	26 96       	adiw	r28, 0x06	; 6
     506:	de bf       	out	0x3e, r29	; 62
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <USART0_Init>:
/************************************************************************************************************************************/
void USART0_Init( unsigned int ubrr){
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	00 d0       	rcall	.+0      	; 0x536 <USART0_Init+0x6>
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	9a 83       	std	Y+2, r25	; 0x02
     53c:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     53e:	e5 ec       	ldi	r30, 0xC5	; 197
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	89 2f       	mov	r24, r25
     548:	99 27       	eor	r25, r25
     54a:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr;
     54c:	e4 ec       	ldi	r30, 0xC4	; 196
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	80 83       	st	Z, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<7);  //ÔÊÐíÖÐ¶Ï
     554:	e1 ec       	ldi	r30, 0xC1	; 193
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = 0x06;
     55c:	e2 ec       	ldi	r30, 0xC2	; 194
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	86 e0       	ldi	r24, 0x06	; 6
     562:	80 83       	st	Z, r24
} // USART_Init
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <USART0_Transmit>:




void USART0_Transmit( unsigned char data )
{
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	0f 92       	push	r0
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     57a:	e0 ec       	ldi	r30, 0xC0	; 192
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	80 81       	ld	r24, Z
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	80 72       	andi	r24, 0x20	; 32
     586:	90 70       	andi	r25, 0x00	; 0
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	b9 f3       	breq	.-18     	; 0x57a <USART0_Transmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     58c:	e6 ec       	ldi	r30, 0xC6	; 198
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	80 83       	st	Z, r24
}
     594:	0f 90       	pop	r0
     596:	cf 91       	pop	r28
     598:	df 91       	pop	r29
     59a:	08 95       	ret

0000059c <USART1_Init>:

void USART1_Init( unsigned int ubrr){
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <USART1_Init+0x6>
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	9a 83       	std	Y+2, r25	; 0x02
     5a8:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     5aa:	ed ec       	ldi	r30, 0xCD	; 205
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	9a 81       	ldd	r25, Y+2	; 0x02
     5b2:	89 2f       	mov	r24, r25
     5b4:	99 27       	eor	r25, r25
     5b6:	80 83       	st	Z, r24
	UBRR1L = (unsigned char)ubrr;
     5b8:	ec ec       	ldi	r30, 0xCC	; 204
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	80 83       	st	Z, r24

	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<7);  //ÔÊÐíÖÐ¶Ï
     5c0:	e9 ec       	ldi	r30, 0xC9	; 201
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	88 e9       	ldi	r24, 0x98	; 152
     5c6:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = 0x06;
     5c8:	ea ec       	ldi	r30, 0xCA	; 202
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	86 e0       	ldi	r24, 0x06	; 6
     5ce:	80 83       	st	Z, r24
} // USART_Init
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	08 95       	ret

000005da <USART1_Transmit>:

void USART1_Transmit( unsigned char data )
{
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	0f 92       	push	r0
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     5e6:	e8 ec       	ldi	r30, 0xC8	; 200
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	88 2f       	mov	r24, r24
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	80 72       	andi	r24, 0x20	; 32
     5f2:	90 70       	andi	r25, 0x00	; 0
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	b9 f3       	breq	.-18     	; 0x5e6 <USART1_Transmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
     5f8:	ee ec       	ldi	r30, 0xCE	; 206
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	80 83       	st	Z, r24
}
     600:	0f 90       	pop	r0
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	08 95       	ret

00000608 <motor1_start>:


/***************************************motor1********************************************************************/
void motor1_start(char direct)
{
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	0f 92       	push	r0
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	89 83       	std	Y+1, r24	; 0x01

	motor1Step=0;
     614:	10 92 cc 03 	sts	0x03CC, r1
     618:	10 92 cd 03 	sts	0x03CD, r1
     61c:	10 92 ce 03 	sts	0x03CE, r1
     620:	10 92 cf 03 	sts	0x03CF, r1
	
	OCR1AH=global_pwm_c>>8;
     624:	e9 e8       	ldi	r30, 0x89	; 137
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 91 00 02 	lds	r24, 0x0200
     62c:	90 91 01 02 	lds	r25, 0x0201
     630:	a0 91 02 02 	lds	r26, 0x0202
     634:	b0 91 03 02 	lds	r27, 0x0203
     638:	89 2f       	mov	r24, r25
     63a:	9a 2f       	mov	r25, r26
     63c:	ab 2f       	mov	r26, r27
     63e:	bb 27       	eor	r27, r27
     640:	a7 fd       	sbrc	r26, 7
     642:	ba 95       	dec	r27
     644:	80 83       	st	Z, r24
	OCR1AL=global_pwm_c&0xff;
     646:	e8 e8       	ldi	r30, 0x88	; 136
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 91 00 02 	lds	r24, 0x0200
     64e:	90 91 01 02 	lds	r25, 0x0201
     652:	a0 91 02 02 	lds	r26, 0x0202
     656:	b0 91 03 02 	lds	r27, 0x0203
     65a:	80 83       	st	Z, r24
	//OCR1A = PULSE_WIDTH;
	DDRL |=(1<<2)|(1<<3) ;
     65c:	aa e0       	ldi	r26, 0x0A	; 10
     65e:	b1 e0       	ldi	r27, 0x01	; 1
     660:	ea e0       	ldi	r30, 0x0A	; 10
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	80 81       	ld	r24, Z
     666:	8c 60       	ori	r24, 0x0C	; 12
     668:	8c 93       	st	X, r24
	
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	80 33       	cpi	r24, 0x30	; 48
     66e:	41 f4       	brne	.+16     	; 0x680 <motor1_start+0x78>
		
		PORTL &=~(1<<3);
     670:	ab e0       	ldi	r26, 0x0B	; 11
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	eb e0       	ldi	r30, 0x0B	; 11
     676:	f1 e0       	ldi	r31, 0x01	; 1
     678:	80 81       	ld	r24, Z
     67a:	87 7f       	andi	r24, 0xF7	; 247
     67c:	8c 93       	st	X, r24
     67e:	0a c0       	rjmp	.+20     	; 0x694 <motor1_start+0x8c>
	else if(direct=='1')
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	81 33       	cpi	r24, 0x31	; 49
     684:	39 f4       	brne	.+14     	; 0x694 <motor1_start+0x8c>
		PORTL |=(1<<3);
     686:	ab e0       	ldi	r26, 0x0B	; 11
     688:	b1 e0       	ldi	r27, 0x01	; 1
     68a:	eb e0       	ldi	r30, 0x0B	; 11
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	80 81       	ld	r24, Z
     690:	88 60       	ori	r24, 0x08	; 8
     692:	8c 93       	st	X, r24

	PORTL |=(1<<2);     //enable
     694:	ab e0       	ldi	r26, 0x0B	; 11
     696:	b1 e0       	ldi	r27, 0x01	; 1
     698:	eb e0       	ldi	r30, 0x0B	; 11
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	80 81       	ld	r24, Z
     69e:	84 60       	ori	r24, 0x04	; 4
     6a0:	8c 93       	st	X, r24
		
	TCCR1A|=1<<7;                 //Æô¶¯PWM
     6a2:	a0 e8       	ldi	r26, 0x80	; 128
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	e0 e8       	ldi	r30, 0x80	; 128
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	80 68       	ori	r24, 0x80	; 128
     6ae:	8c 93       	st	X, r24
	PORTH &=0xFE<<5;            //LED
     6b0:	a2 e0       	ldi	r26, 0x02	; 2
     6b2:	b1 e0       	ldi	r27, 0x01	; 1
     6b4:	e2 e0       	ldi	r30, 0x02	; 2
     6b6:	f1 e0       	ldi	r31, 0x01	; 1
     6b8:	80 81       	ld	r24, Z
     6ba:	80 7c       	andi	r24, 0xC0	; 192
     6bc:	8c 93       	st	X, r24
	
}
     6be:	0f 90       	pop	r0
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <motor1_stop>:

void motor1_stop()
{    
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62

	PORTL &=~(1<<2);    //disable
     6ce:	ab e0       	ldi	r26, 0x0B	; 11
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	eb e0       	ldi	r30, 0x0B	; 11
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	80 81       	ld	r24, Z
     6d8:	8b 7f       	andi	r24, 0xFB	; 251
     6da:	8c 93       	st	X, r24
	TCCR1A &=~(1<<7);                 //Í£Ö¹PWM
     6dc:	a0 e8       	ldi	r26, 0x80	; 128
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e0 e8       	ldi	r30, 0x80	; 128
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	8f 77       	andi	r24, 0x7F	; 127
     6e8:	8c 93       	st	X, r24
	PORTH |=0x01<<5;            //LED
     6ea:	a2 e0       	ldi	r26, 0x02	; 2
     6ec:	b1 e0       	ldi	r27, 0x01	; 1
     6ee:	e2 e0       	ldi	r30, 0x02	; 2
     6f0:	f1 e0       	ldi	r31, 0x01	; 1
     6f2:	80 81       	ld	r24, Z
     6f4:	80 62       	ori	r24, 0x20	; 32
     6f6:	8c 93       	st	X, r24

}
     6f8:	cf 91       	pop	r28
     6fa:	df 91       	pop	r29
     6fc:	08 95       	ret

000006fe <motor1_slow>:

void motor1_slow()
{
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
	OCR1BH= PULSE_WIDTH/2>>8;
     706:	eb e8       	ldi	r30, 0x8B	; 139
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	10 82       	st	Z, r1
	OCR1BL = PULSE_WIDTH/2;	//Load Pulse width
     70c:	ea e8       	ldi	r30, 0x8A	; 138
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	80 83       	st	Z, r24
	
	
	PORTL |=(1<<2);     //enable
     714:	ab e0       	ldi	r26, 0x0B	; 11
     716:	b1 e0       	ldi	r27, 0x01	; 1
     718:	eb e0       	ldi	r30, 0x0B	; 11
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	80 81       	ld	r24, Z
     71e:	84 60       	ori	r24, 0x04	; 4
     720:	8c 93       	st	X, r24
	TCCR1A|=1<<7;                 //Æô¶¯PWM
     722:	a0 e8       	ldi	r26, 0x80	; 128
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e0 e8       	ldi	r30, 0x80	; 128
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	80 68       	ori	r24, 0x80	; 128
     72e:	8c 93       	st	X, r24

}
     730:	cf 91       	pop	r28
     732:	df 91       	pop	r29
     734:	08 95       	ret

00000736 <motor1_speed>:

void motor1_speed(int pwm)
{
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	00 d0       	rcall	.+0      	; 0x73c <motor1_speed+0x6>
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	9a 83       	std	Y+2, r25	; 0x02
     742:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH= pwm>>8;
     744:	e9 e8       	ldi	r30, 0x89	; 137
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	89 2f       	mov	r24, r25
     74e:	99 0f       	add	r25, r25
     750:	99 0b       	sbc	r25, r25
     752:	80 83       	st	Z, r24
	OCR1AL = pwm;	//Load Pulse width
     754:	e8 e8       	ldi	r30, 0x88	; 136
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	80 83       	st	Z, r24
	//OCR1AH= 3;
	//OCR1AL = 255;	//Load Pulse width
}
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <motor2_start>:
/***************************************motor2********************************************************************/




void motor2_start(char direct){
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	0f 92       	push	r0
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	89 83       	std	Y+1, r24	; 0x01


	motor2Step=0;
     772:	10 92 be 03 	sts	0x03BE, r1
     776:	10 92 bf 03 	sts	0x03BF, r1
     77a:	10 92 c0 03 	sts	0x03C0, r1
     77e:	10 92 c1 03 	sts	0x03C1, r1
	OCR1BH=global_pwm_c>>8;
     782:	eb e8       	ldi	r30, 0x8B	; 139
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 91 00 02 	lds	r24, 0x0200
     78a:	90 91 01 02 	lds	r25, 0x0201
     78e:	a0 91 02 02 	lds	r26, 0x0202
     792:	b0 91 03 02 	lds	r27, 0x0203
     796:	89 2f       	mov	r24, r25
     798:	9a 2f       	mov	r25, r26
     79a:	ab 2f       	mov	r26, r27
     79c:	bb 27       	eor	r27, r27
     79e:	a7 fd       	sbrc	r26, 7
     7a0:	ba 95       	dec	r27
     7a2:	80 83       	st	Z, r24
	OCR1BL=global_pwm_c&0xff;
     7a4:	ea e8       	ldi	r30, 0x8A	; 138
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 91 00 02 	lds	r24, 0x0200
     7ac:	90 91 01 02 	lds	r25, 0x0201
     7b0:	a0 91 02 02 	lds	r26, 0x0202
     7b4:	b0 91 03 02 	lds	r27, 0x0203
     7b8:	80 83       	st	Z, r24
	//OCR1B = PULSE_WIDTH;
	DDRL |=(1<<4)|(1<<5) ;
     7ba:	aa e0       	ldi	r26, 0x0A	; 10
     7bc:	b1 e0       	ldi	r27, 0x01	; 1
     7be:	ea e0       	ldi	r30, 0x0A	; 10
     7c0:	f1 e0       	ldi	r31, 0x01	; 1
     7c2:	80 81       	ld	r24, Z
     7c4:	80 63       	ori	r24, 0x30	; 48
     7c6:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	80 33       	cpi	r24, 0x30	; 48
     7cc:	41 f4       	brne	.+16     	; 0x7de <motor2_start+0x78>
		PORTL &=~(1<<5);
     7ce:	ab e0       	ldi	r26, 0x0B	; 11
     7d0:	b1 e0       	ldi	r27, 0x01	; 1
     7d2:	eb e0       	ldi	r30, 0x0B	; 11
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	80 81       	ld	r24, Z
     7d8:	8f 7d       	andi	r24, 0xDF	; 223
     7da:	8c 93       	st	X, r24
     7dc:	0a c0       	rjmp	.+20     	; 0x7f2 <motor2_start+0x8c>
	else if(direct=='1')
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	81 33       	cpi	r24, 0x31	; 49
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <motor2_start+0x8c>
		PORTL |=(1<<5);	
     7e4:	ab e0       	ldi	r26, 0x0B	; 11
     7e6:	b1 e0       	ldi	r27, 0x01	; 1
     7e8:	eb e0       	ldi	r30, 0x0B	; 11
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	80 81       	ld	r24, Z
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	8c 93       	st	X, r24
	
	PORTL |=(1<<4);     //enable
     7f2:	ab e0       	ldi	r26, 0x0B	; 11
     7f4:	b1 e0       	ldi	r27, 0x01	; 1
     7f6:	eb e0       	ldi	r30, 0x0B	; 11
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	80 81       	ld	r24, Z
     7fc:	80 61       	ori	r24, 0x10	; 16
     7fe:	8c 93       	st	X, r24
	

	TCCR1A|=1<<5;                //Æô¶¯PWM
     800:	a0 e8       	ldi	r26, 0x80	; 128
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	e0 e8       	ldi	r30, 0x80	; 128
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	80 62       	ori	r24, 0x20	; 32
     80c:	8c 93       	st	X, r24
	PORTH &=0xFE<<6;
     80e:	a2 e0       	ldi	r26, 0x02	; 2
     810:	b1 e0       	ldi	r27, 0x01	; 1
     812:	e2 e0       	ldi	r30, 0x02	; 2
     814:	f1 e0       	ldi	r31, 0x01	; 1
     816:	80 81       	ld	r24, Z
     818:	80 78       	andi	r24, 0x80	; 128
     81a:	8c 93       	st	X, r24
}
     81c:	0f 90       	pop	r0
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <motor2_stop>:

void motor2_stop()
{
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
	PORTL &=~(1<<4);
     82c:	ab e0       	ldi	r26, 0x0B	; 11
     82e:	b1 e0       	ldi	r27, 0x01	; 1
     830:	eb e0       	ldi	r30, 0x0B	; 11
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	80 81       	ld	r24, Z
     836:	8f 7e       	andi	r24, 0xEF	; 239
     838:	8c 93       	st	X, r24
	TCCR1A &=~(1<<5);                 //Í£Ö¹PWM
     83a:	a0 e8       	ldi	r26, 0x80	; 128
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e0 e8       	ldi	r30, 0x80	; 128
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	8f 7d       	andi	r24, 0xDF	; 223
     846:	8c 93       	st	X, r24
	 
	PORTH |=0x01<<6;   
     848:	a2 e0       	ldi	r26, 0x02	; 2
     84a:	b1 e0       	ldi	r27, 0x01	; 1
     84c:	e2 e0       	ldi	r30, 0x02	; 2
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	80 81       	ld	r24, Z
     852:	80 64       	ori	r24, 0x40	; 64
     854:	8c 93       	st	X, r24

}
     856:	cf 91       	pop	r28
     858:	df 91       	pop	r29
     85a:	08 95       	ret

0000085c <motor2_slow>:

void motor2_slow()
{
     85c:	df 93       	push	r29
     85e:	cf 93       	push	r28
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = PULSE_WIDTH/2>>8;	//Load Pulse width
     864:	e9 e8       	ldi	r30, 0x89	; 137
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	10 82       	st	Z, r1
	OCR1AL = PULSE_WIDTH/2;	//Load Pulse width
     86a:	e8 e8       	ldi	r30, 0x88	; 136
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	80 83       	st	Z, r24
	PORTL |=(1<<4);     //enable
     872:	ab e0       	ldi	r26, 0x0B	; 11
     874:	b1 e0       	ldi	r27, 0x01	; 1
     876:	eb e0       	ldi	r30, 0x0B	; 11
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	80 81       	ld	r24, Z
     87c:	80 61       	ori	r24, 0x10	; 16
     87e:	8c 93       	st	X, r24
	TCCR1A|=1<<5;
     880:	a0 e8       	ldi	r26, 0x80	; 128
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	e0 e8       	ldi	r30, 0x80	; 128
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	80 62       	ori	r24, 0x20	; 32
     88c:	8c 93       	st	X, r24
	

}
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	08 95       	ret

00000894 <motor2_speed>:

void motor2_speed(int pwm)
{
     894:	df 93       	push	r29
     896:	cf 93       	push	r28
     898:	00 d0       	rcall	.+0      	; 0x89a <motor2_speed+0x6>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
	
	OCR1BH= pwm>>8;
     8a2:	eb e8       	ldi	r30, 0x8B	; 139
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	9a 81       	ldd	r25, Y+2	; 0x02
     8aa:	89 2f       	mov	r24, r25
     8ac:	99 0f       	add	r25, r25
     8ae:	99 0b       	sbc	r25, r25
     8b0:	80 83       	st	Z, r24
	OCR1BL = pwm;	//Load Pulse width
     8b2:	ea e8       	ldi	r30, 0x8A	; 138
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	80 83       	st	Z, r24

}
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	cf 91       	pop	r28
     8c0:	df 91       	pop	r29
     8c2:	08 95       	ret

000008c4 <motor3_start>:
/***************************************motor3********************************************************************/




void motor3_start(char direct){
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	2f 97       	sbiw	r28, 0x0f	; 15
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	8f 87       	std	Y+15, r24	; 0x0f


	motor3Step=0;
     8da:	10 92 29 03 	sts	0x0329, r1
     8de:	10 92 2a 03 	sts	0x032A, r1
     8e2:	10 92 2b 03 	sts	0x032B, r1
     8e6:	10 92 2c 03 	sts	0x032C, r1
	
	//OCR3A = PULSE_WIDTH;
	DDRL |=(1<<6)|(1<<7) ;
     8ea:	aa e0       	ldi	r26, 0x0A	; 10
     8ec:	b1 e0       	ldi	r27, 0x01	; 1
     8ee:	ea e0       	ldi	r30, 0x0A	; 10
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	80 81       	ld	r24, Z
     8f4:	80 6c       	ori	r24, 0xC0	; 192
     8f6:	8c 93       	st	X, r24

		OCR3AH=global_pwm_c>>8;
     8f8:	e9 e9       	ldi	r30, 0x99	; 153
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 91 00 02 	lds	r24, 0x0200
     900:	90 91 01 02 	lds	r25, 0x0201
     904:	a0 91 02 02 	lds	r26, 0x0202
     908:	b0 91 03 02 	lds	r27, 0x0203
     90c:	89 2f       	mov	r24, r25
     90e:	9a 2f       	mov	r25, r26
     910:	ab 2f       	mov	r26, r27
     912:	bb 27       	eor	r27, r27
     914:	a7 fd       	sbrc	r26, 7
     916:	ba 95       	dec	r27
     918:	80 83       	st	Z, r24
	OCR3AL=global_pwm_c&0xff;
     91a:	e8 e9       	ldi	r30, 0x98	; 152
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 91 00 02 	lds	r24, 0x0200
     922:	90 91 01 02 	lds	r25, 0x0201
     926:	a0 91 02 02 	lds	r26, 0x0202
     92a:	b0 91 03 02 	lds	r27, 0x0203
     92e:	80 83       	st	Z, r24

		PORTL |=(1<<6);     //enable
     930:	ab e0       	ldi	r26, 0x0B	; 11
     932:	b1 e0       	ldi	r27, 0x01	; 1
     934:	eb e0       	ldi	r30, 0x0B	; 11
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	80 81       	ld	r24, Z
     93a:	80 64       	ori	r24, 0x40	; 64
     93c:	8c 93       	st	X, r24

	
		//ÉèÖÃ·½Ïò
	if(direct=='0')
     93e:	8f 85       	ldd	r24, Y+15	; 0x0f
     940:	80 33       	cpi	r24, 0x30	; 48
     942:	41 f4       	brne	.+16     	; 0x954 <motor3_start+0x90>
		PORTL &=~(1<<7);
     944:	ab e0       	ldi	r26, 0x0B	; 11
     946:	b1 e0       	ldi	r27, 0x01	; 1
     948:	eb e0       	ldi	r30, 0x0B	; 11
     94a:	f1 e0       	ldi	r31, 0x01	; 1
     94c:	80 81       	ld	r24, Z
     94e:	8f 77       	andi	r24, 0x7F	; 127
     950:	8c 93       	st	X, r24
     952:	84 c0       	rjmp	.+264    	; 0xa5c <motor3_start+0x198>
	else if(direct=='1')
     954:	8f 85       	ldd	r24, Y+15	; 0x0f
     956:	81 33       	cpi	r24, 0x31	; 49
     958:	09 f0       	breq	.+2      	; 0x95c <motor3_start+0x98>
     95a:	80 c0       	rjmp	.+256    	; 0xa5c <motor3_start+0x198>
	{
			PORTL &=~(1<<7);
     95c:	ab e0       	ldi	r26, 0x0B	; 11
     95e:	b1 e0       	ldi	r27, 0x01	; 1
     960:	eb e0       	ldi	r30, 0x0B	; 11
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	80 81       	ld	r24, Z
     966:	8f 77       	andi	r24, 0x7F	; 127
     968:	8c 93       	st	X, r24
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	aa e7       	ldi	r26, 0x7A	; 122
     970:	b4 e4       	ldi	r27, 0x44	; 68
     972:	8b 87       	std	Y+11, r24	; 0x0b
     974:	9c 87       	std	Y+12, r25	; 0x0c
     976:	ad 87       	std	Y+13, r26	; 0x0d
     978:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     97a:	6b 85       	ldd	r22, Y+11	; 0x0b
     97c:	7c 85       	ldd	r23, Y+12	; 0x0c
     97e:	8d 85       	ldd	r24, Y+13	; 0x0d
     980:	9e 85       	ldd	r25, Y+14	; 0x0e
     982:	2d ec       	ldi	r18, 0xCD	; 205
     984:	3c ec       	ldi	r19, 0xCC	; 204
     986:	4c e2       	ldi	r20, 0x2C	; 44
     988:	55 e4       	ldi	r21, 0x45	; 69
     98a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	8f 83       	std	Y+7, r24	; 0x07
     994:	98 87       	std	Y+8, r25	; 0x08
     996:	a9 87       	std	Y+9, r26	; 0x09
     998:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     99a:	6f 81       	ldd	r22, Y+7	; 0x07
     99c:	78 85       	ldd	r23, Y+8	; 0x08
     99e:	89 85       	ldd	r24, Y+9	; 0x09
     9a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e8       	ldi	r20, 0x80	; 128
     9a8:	5f e3       	ldi	r21, 0x3F	; 63
     9aa:	0e 94 c2 14 	call	0x2984	; 0x2984 <__ltsf2>
     9ae:	88 23       	and	r24, r24
     9b0:	2c f4       	brge	.+10     	; 0x9bc <motor3_start+0xf8>
		__ticks = 1;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	9e 83       	std	Y+6, r25	; 0x06
     9b8:	8d 83       	std	Y+5, r24	; 0x05
     9ba:	3f c0       	rjmp	.+126    	; 0xa3a <motor3_start+0x176>
	else if (__tmp > 65535)
     9bc:	6f 81       	ldd	r22, Y+7	; 0x07
     9be:	78 85       	ldd	r23, Y+8	; 0x08
     9c0:	89 85       	ldd	r24, Y+9	; 0x09
     9c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	4f e7       	ldi	r20, 0x7F	; 127
     9ca:	57 e4       	ldi	r21, 0x47	; 71
     9cc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__gtsf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	4c f5       	brge	.+82     	; 0xa26 <motor3_start+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d4:	6b 85       	ldd	r22, Y+11	; 0x0b
     9d6:	7c 85       	ldd	r23, Y+12	; 0x0c
     9d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9da:	9e 85       	ldd	r25, Y+14	; 0x0e
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e2       	ldi	r20, 0x20	; 32
     9e2:	51 e4       	ldi	r21, 0x41	; 65
     9e4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	bc 01       	movw	r22, r24
     9ee:	cd 01       	movw	r24, r26
     9f0:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	9e 83       	std	Y+6, r25	; 0x06
     9fa:	8d 83       	std	Y+5, r24	; 0x05
     9fc:	0f c0       	rjmp	.+30     	; 0xa1c <motor3_start+0x158>
     9fe:	84 e1       	ldi	r24, 0x14	; 20
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	9c 81       	ldd	r25, Y+4	; 0x04
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <motor3_start+0x146>
     a0e:	9c 83       	std	Y+4, r25	; 0x04
     a10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	9e 81       	ldd	r25, Y+6	; 0x06
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	9e 83       	std	Y+6, r25	; 0x06
     a1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a1c:	8d 81       	ldd	r24, Y+5	; 0x05
     a1e:	9e 81       	ldd	r25, Y+6	; 0x06
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	69 f7       	brne	.-38     	; 0x9fe <motor3_start+0x13a>
     a24:	14 c0       	rjmp	.+40     	; 0xa4e <motor3_start+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a26:	6f 81       	ldd	r22, Y+7	; 0x07
     a28:	78 85       	ldd	r23, Y+8	; 0x08
     a2a:	89 85       	ldd	r24, Y+9	; 0x09
     a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2e:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	9e 83       	std	Y+6, r25	; 0x06
     a38:	8d 83       	std	Y+5, r24	; 0x05
     a3a:	8d 81       	ldd	r24, Y+5	; 0x05
     a3c:	9e 81       	ldd	r25, Y+6	; 0x06
     a3e:	9a 83       	std	Y+2, r25	; 0x02
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <motor3_start+0x182>
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		PORTL |=(1<<7);
     a4e:	ab e0       	ldi	r26, 0x0B	; 11
     a50:	b1 e0       	ldi	r27, 0x01	; 1
     a52:	eb e0       	ldi	r30, 0x0B	; 11
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	80 81       	ld	r24, Z
     a58:	80 68       	ori	r24, 0x80	; 128
     a5a:	8c 93       	st	X, r24
	}


		
		
	TCCR3A|=1<<7;                 //Æô¶¯PWM
     a5c:	a0 e9       	ldi	r26, 0x90	; 144
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	e0 e9       	ldi	r30, 0x90	; 144
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	80 68       	ori	r24, 0x80	; 128
     a68:	8c 93       	st	X, r24

	PORTB &=0xFE<<0;
     a6a:	a5 e2       	ldi	r26, 0x25	; 37
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e5 e2       	ldi	r30, 0x25	; 37
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	8c 93       	st	X, r24

	
}
     a78:	2f 96       	adiw	r28, 0x0f	; 15
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <motor3_stop>:

void motor3_stop()
{
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
	PORTL&=~(1<<6);     //disble
     a92:	ab e0       	ldi	r26, 0x0B	; 11
     a94:	b1 e0       	ldi	r27, 0x01	; 1
     a96:	eb e0       	ldi	r30, 0x0B	; 11
     a98:	f1 e0       	ldi	r31, 0x01	; 1
     a9a:	80 81       	ld	r24, Z
     a9c:	8f 7b       	andi	r24, 0xBF	; 191
     a9e:	8c 93       	st	X, r24
	TCCR3A &=~(1<<7);
     aa0:	a0 e9       	ldi	r26, 0x90	; 144
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e0 e9       	ldi	r30, 0x90	; 144
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	8f 77       	andi	r24, 0x7F	; 127
     aac:	8c 93       	st	X, r24
	
	PORTB |=0x01<<0;
     aae:	a5 e2       	ldi	r26, 0x25	; 37
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e5 e2       	ldi	r30, 0x25	; 37
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	8c 93       	st	X, r24

}
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <motor3_slow>:

void motor3_slow()
{
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	
	OCR3AH = PULSE_WIDTH/2>>8;
     aca:	e9 e9       	ldi	r30, 0x99	; 153
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	10 82       	st	Z, r1
	OCR3AL = PULSE_WIDTH/2;	//Load Pulse width
     ad0:	e8 e9       	ldi	r30, 0x98	; 152
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	80 83       	st	Z, r24
	PORTL |=(1<<6);     //enable
     ad8:	ab e0       	ldi	r26, 0x0B	; 11
     ada:	b1 e0       	ldi	r27, 0x01	; 1
     adc:	eb e0       	ldi	r30, 0x0B	; 11
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	80 81       	ld	r24, Z
     ae2:	80 64       	ori	r24, 0x40	; 64
     ae4:	8c 93       	st	X, r24
	TCCR3A|=1<<7;
     ae6:	a0 e9       	ldi	r26, 0x90	; 144
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e0 e9       	ldi	r30, 0x90	; 144
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	80 68       	ori	r24, 0x80	; 128
     af2:	8c 93       	st	X, r24
}
     af4:	cf 91       	pop	r28
     af6:	df 91       	pop	r29
     af8:	08 95       	ret

00000afa <motor3_speed>:

void motor3_speed(int pwm)
{
     afa:	df 93       	push	r29
     afc:	cf 93       	push	r28
     afe:	00 d0       	rcall	.+0      	; 0xb00 <motor3_speed+0x6>
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	9a 83       	std	Y+2, r25	; 0x02
     b06:	89 83       	std	Y+1, r24	; 0x01
	
	OCR3AH= pwm>>8;
     b08:	e9 e9       	ldi	r30, 0x99	; 153
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	89 2f       	mov	r24, r25
     b12:	99 0f       	add	r25, r25
     b14:	99 0b       	sbc	r25, r25
     b16:	80 83       	st	Z, r24
		
	OCR3AL = pwm;	//Load Pulse width
     b18:	e8 e9       	ldi	r30, 0x98	; 152
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	80 83       	st	Z, r24

}
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	cf 91       	pop	r28
     b26:	df 91       	pop	r29
     b28:	08 95       	ret

00000b2a <motor4_start>:
/***************************************motor4********************************************************************/




void motor4_start(char direct){
     b2a:	df 93       	push	r29
     b2c:	cf 93       	push	r28
     b2e:	0f 92       	push	r0
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	89 83       	std	Y+1, r24	; 0x01

	motor4Step=0;
     b36:	10 92 c2 03 	sts	0x03C2, r1
     b3a:	10 92 c3 03 	sts	0x03C3, r1
     b3e:	10 92 c4 03 	sts	0x03C4, r1
     b42:	10 92 c5 03 	sts	0x03C5, r1
	OCR3BH=global_pwm_c>>8;
     b46:	eb e9       	ldi	r30, 0x9B	; 155
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 91 00 02 	lds	r24, 0x0200
     b4e:	90 91 01 02 	lds	r25, 0x0201
     b52:	a0 91 02 02 	lds	r26, 0x0202
     b56:	b0 91 03 02 	lds	r27, 0x0203
     b5a:	89 2f       	mov	r24, r25
     b5c:	9a 2f       	mov	r25, r26
     b5e:	ab 2f       	mov	r26, r27
     b60:	bb 27       	eor	r27, r27
     b62:	a7 fd       	sbrc	r26, 7
     b64:	ba 95       	dec	r27
     b66:	80 83       	st	Z, r24
	OCR3BL=global_pwm_c&0xff;
     b68:	ea e9       	ldi	r30, 0x9A	; 154
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 91 00 02 	lds	r24, 0x0200
     b70:	90 91 01 02 	lds	r25, 0x0201
     b74:	a0 91 02 02 	lds	r26, 0x0202
     b78:	b0 91 03 02 	lds	r27, 0x0203
     b7c:	80 83       	st	Z, r24
	//OCR3B = PULSE_WIDTH;
	DDRD |=(1<<0)|(1<<1) ;
     b7e:	aa e2       	ldi	r26, 0x2A	; 42
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	ea e2       	ldi	r30, 0x2A	; 42
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	83 60       	ori	r24, 0x03	; 3
     b8a:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	80 33       	cpi	r24, 0x30	; 48
     b90:	41 f4       	brne	.+16     	; 0xba2 <motor4_start+0x78>
		PORTD &=~(1<<1);
     b92:	ab e2       	ldi	r26, 0x2B	; 43
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	eb e2       	ldi	r30, 0x2B	; 43
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8d 7f       	andi	r24, 0xFD	; 253
     b9e:	8c 93       	st	X, r24
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <motor4_start+0x8c>
	else if(direct=='1')
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	81 33       	cpi	r24, 0x31	; 49
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <motor4_start+0x8c>
		PORTD |=(1<<1);
     ba8:	ab e2       	ldi	r26, 0x2B	; 43
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	eb e2       	ldi	r30, 0x2B	; 43
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	8c 93       	st	X, r24
	
	PORTD |=(1<<0);     //enable
     bb6:	ab e2       	ldi	r26, 0x2B	; 43
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	eb e2       	ldi	r30, 0x2B	; 43
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	8c 93       	st	X, r24
		
		
	TCCR3A|=1<<5;
     bc4:	a0 e9       	ldi	r26, 0x90	; 144
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e0 e9       	ldi	r30, 0x90	; 144
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	8c 93       	st	X, r24

	PORTB &=~(0x01<<1);
     bd2:	a5 e2       	ldi	r26, 0x25	; 37
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e5 e2       	ldi	r30, 0x25	; 37
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8d 7f       	andi	r24, 0xFD	; 253
     bde:	8c 93       	st	X, r24
	

	
}
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <motor4_stop>:

void motor4_stop()
{
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
	PORTD &=~(1<<0);     //disble
     bf0:	ab e2       	ldi	r26, 0x2B	; 43
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	eb e2       	ldi	r30, 0x2B	; 43
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8e 7f       	andi	r24, 0xFE	; 254
     bfc:	8c 93       	st	X, r24
	TCCR3A &=~(1<<5);
     bfe:	a0 e9       	ldi	r26, 0x90	; 144
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e0 e9       	ldi	r30, 0x90	; 144
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	8f 7d       	andi	r24, 0xDF	; 223
     c0a:	8c 93       	st	X, r24
	
	PORTB |=0x01<<1;
     c0c:	a5 e2       	ldi	r26, 0x25	; 37
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e5 e2       	ldi	r30, 0x25	; 37
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8c 93       	st	X, r24

}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <motor4_slow>:

void motor4_slow()
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	
	OCR3B = PULSE_WIDTH/2;	//Load Pulse width
     c28:	ea e9       	ldi	r30, 0x9A	; 154
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	80 83       	st	Z, r24
	PORTD |=(1<<0);    //enable
     c34:	ab e2       	ldi	r26, 0x2B	; 43
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e2       	ldi	r30, 0x2B	; 43
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	8c 93       	st	X, r24
	TCCR3A|=1<<5;
     c42:	a0 e9       	ldi	r26, 0x90	; 144
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e0 e9       	ldi	r30, 0x90	; 144
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 62       	ori	r24, 0x20	; 32
     c4e:	8c 93       	st	X, r24
}
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <motor4_speed>:

void motor4_speed(int pwm)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <motor4_speed+0x6>
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
	
	OCR3BH= pwm>>8;
     c64:	eb e9       	ldi	r30, 0x9B	; 155
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	89 2f       	mov	r24, r25
     c6e:	99 0f       	add	r25, r25
     c70:	99 0b       	sbc	r25, r25
     c72:	80 83       	st	Z, r24
		
	OCR3BL = pwm;	//Load Pulse width
     c74:	ea e9       	ldi	r30, 0x9A	; 154
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	80 83       	st	Z, r24

}
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <motor5_start>:
/***************************************motor5********************************************************************/




void motor5_start(char direct){
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	0f 92       	push	r0
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	89 83       	std	Y+1, r24	; 0x01

	motor5Step=0;
     c92:	10 92 80 03 	sts	0x0380, r1
     c96:	10 92 81 03 	sts	0x0381, r1
     c9a:	10 92 82 03 	sts	0x0382, r1
     c9e:	10 92 83 03 	sts	0x0383, r1
	
	OCR4AH=global_pwm_c>>8;
     ca2:	e9 ea       	ldi	r30, 0xA9	; 169
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 91 00 02 	lds	r24, 0x0200
     caa:	90 91 01 02 	lds	r25, 0x0201
     cae:	a0 91 02 02 	lds	r26, 0x0202
     cb2:	b0 91 03 02 	lds	r27, 0x0203
     cb6:	89 2f       	mov	r24, r25
     cb8:	9a 2f       	mov	r25, r26
     cba:	ab 2f       	mov	r26, r27
     cbc:	bb 27       	eor	r27, r27
     cbe:	a7 fd       	sbrc	r26, 7
     cc0:	ba 95       	dec	r27
     cc2:	80 83       	st	Z, r24
	OCR4AL=global_pwm_c&0xff;
     cc4:	e8 ea       	ldi	r30, 0xA8	; 168
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 91 00 02 	lds	r24, 0x0200
     ccc:	90 91 01 02 	lds	r25, 0x0201
     cd0:	a0 91 02 02 	lds	r26, 0x0202
     cd4:	b0 91 03 02 	lds	r27, 0x0203
     cd8:	80 83       	st	Z, r24
	//OCR4A = PULSE_WIDTH;
	DDRD |=(1<<6)|(1<<7) ;
     cda:	aa e2       	ldi	r26, 0x2A	; 42
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	ea e2       	ldi	r30, 0x2A	; 42
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 6c       	ori	r24, 0xC0	; 192
     ce6:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 33       	cpi	r24, 0x30	; 48
     cec:	41 f4       	brne	.+16     	; 0xcfe <motor5_start+0x78>
		PORTD &=~(1<<7);
     cee:	ab e2       	ldi	r26, 0x2B	; 43
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	eb e2       	ldi	r30, 0x2B	; 43
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 77       	andi	r24, 0x7F	; 127
     cfa:	8c 93       	st	X, r24
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <motor5_start+0x8c>
	else if(direct=='1')
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	81 33       	cpi	r24, 0x31	; 49
     d02:	39 f4       	brne	.+14     	; 0xd12 <motor5_start+0x8c>
		PORTD |=(1<<7);
     d04:	ab e2       	ldi	r26, 0x2B	; 43
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	eb e2       	ldi	r30, 0x2B	; 43
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	8c 93       	st	X, r24
	
	PORTD |=(1<<6);     //enable
     d12:	ab e2       	ldi	r26, 0x2B	; 43
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	eb e2       	ldi	r30, 0x2B	; 43
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 64       	ori	r24, 0x40	; 64
     d1e:	8c 93       	st	X, r24
	
	
	TCCR4A|=1<<7;
     d20:	a0 ea       	ldi	r26, 0xA0	; 160
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e0 ea       	ldi	r30, 0xA0	; 160
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8c 93       	st	X, r24
	PORTB &=0xFE<<2;
     d2e:	a5 e2       	ldi	r26, 0x25	; 37
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e2       	ldi	r30, 0x25	; 37
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 7f       	andi	r24, 0xF8	; 248
     d3a:	8c 93       	st	X, r24
}
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <motor5_stop>:

void motor5_stop()
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
	
	PORTD &=~(1<<6);
     d4c:	ab e2       	ldi	r26, 0x2B	; 43
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	eb e2       	ldi	r30, 0x2B	; 43
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8f 7b       	andi	r24, 0xBF	; 191
     d58:	8c 93       	st	X, r24
	TCCR4A &=~(1<<7);
     d5a:	a0 ea       	ldi	r26, 0xA0	; 160
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e0 ea       	ldi	r30, 0xA0	; 160
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	8c 93       	st	X, r24
	PORTB |=0x01<<2;
     d68:	a5 e2       	ldi	r26, 0x25	; 37
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e5 e2       	ldi	r30, 0x25	; 37
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	8c 93       	st	X, r24

}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <motor5_slow>:

void motor5_slow()
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62

	
	OCR4AH=PULSE_WIDTH/2>>8;
     d84:	e9 ea       	ldi	r30, 0xA9	; 169
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	10 82       	st	Z, r1
	OCR4AL = PULSE_WIDTH/2;	//Load Pulse width
     d8a:	e8 ea       	ldi	r30, 0xA8	; 168
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	80 83       	st	Z, r24
	

	PORTD |=(1<<6);     //enable
     d92:	ab e2       	ldi	r26, 0x2B	; 43
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e2       	ldi	r30, 0x2B	; 43
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 64       	ori	r24, 0x40	; 64
     d9e:	8c 93       	st	X, r24
	TCCR4A|=1<<7;
     da0:	a0 ea       	ldi	r26, 0xA0	; 160
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e0 ea       	ldi	r30, 0xA0	; 160
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8c 93       	st	X, r24

}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <motor5_speed>:

void motor5_speed(int pwm)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <motor5_speed+0x6>
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01
	
	OCR4AH= pwm>>8;
     dc2:	e9 ea       	ldi	r30, 0xA9	; 169
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	89 2f       	mov	r24, r25
     dcc:	99 0f       	add	r25, r25
     dce:	99 0b       	sbc	r25, r25
     dd0:	80 83       	st	Z, r24
		
	OCR4AL = pwm;	//Load Pulse width
     dd2:	e8 ea       	ldi	r30, 0xA8	; 168
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	80 83       	st	Z, r24

}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <motor6_start>:
/***************************************motor6********************************************************************/




void motor6_start(char direct){
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	89 83       	std	Y+1, r24	; 0x01

	motor6Step=0;
     df0:	10 92 4b 03 	sts	0x034B, r1
     df4:	10 92 4c 03 	sts	0x034C, r1
     df8:	10 92 4d 03 	sts	0x034D, r1
     dfc:	10 92 4e 03 	sts	0x034E, r1
	
	OCR4BH=global_pwm_c>>8;
     e00:	eb ea       	ldi	r30, 0xAB	; 171
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 91 00 02 	lds	r24, 0x0200
     e08:	90 91 01 02 	lds	r25, 0x0201
     e0c:	a0 91 02 02 	lds	r26, 0x0202
     e10:	b0 91 03 02 	lds	r27, 0x0203
     e14:	89 2f       	mov	r24, r25
     e16:	9a 2f       	mov	r25, r26
     e18:	ab 2f       	mov	r26, r27
     e1a:	bb 27       	eor	r27, r27
     e1c:	a7 fd       	sbrc	r26, 7
     e1e:	ba 95       	dec	r27
     e20:	80 83       	st	Z, r24
	OCR4BL=0xff;
     e22:	ea ea       	ldi	r30, 0xAA	; 170
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	80 83       	st	Z, r24
	//OCR4B = PULSE_WIDTH;
	DDRB |=(1<<3)|(1<<4) ;
     e2a:	a4 e2       	ldi	r26, 0x24	; 36
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e2       	ldi	r30, 0x24	; 36
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	88 61       	ori	r24, 0x18	; 24
     e36:	8c 93       	st	X, r24
	//ÉèÖÃ·½Ïò
	if(direct=='0')
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	80 33       	cpi	r24, 0x30	; 48
     e3c:	41 f4       	brne	.+16     	; 0xe4e <motor6_start+0x6a>
		PORTB &=~(1<<4);
     e3e:	a5 e2       	ldi	r26, 0x25	; 37
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e2       	ldi	r30, 0x25	; 37
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8f 7e       	andi	r24, 0xEF	; 239
     e4a:	8c 93       	st	X, r24
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <motor6_start+0x7e>
	else if(direct=='1')
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	81 33       	cpi	r24, 0x31	; 49
     e52:	39 f4       	brne	.+14     	; 0xe62 <motor6_start+0x7e>
		PORTB |=(1<<4);
     e54:	a5 e2       	ldi	r26, 0x25	; 37
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e2       	ldi	r30, 0x25	; 37
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	8c 93       	st	X, r24
	
	
	PORTB |=(1<<3);
     e62:	a5 e2       	ldi	r26, 0x25	; 37
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e2       	ldi	r30, 0x25	; 37
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 60       	ori	r24, 0x08	; 8
     e6e:	8c 93       	st	X, r24
	
	
	TCCR4A|=1<<5;
     e70:	a0 ea       	ldi	r26, 0xA0	; 160
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e0 ea       	ldi	r30, 0xA0	; 160
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 62       	ori	r24, 0x20	; 32
     e7c:	8c 93       	st	X, r24
	PORTE &=0xFE<<6;
     e7e:	ae e2       	ldi	r26, 0x2E	; 46
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ee e2       	ldi	r30, 0x2E	; 46
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 78       	andi	r24, 0x80	; 128
     e8a:	8c 93       	st	X, r24
	
}
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <motor6_stop>:

void motor6_stop()
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	
	PORTB &=~(1<<3);  
     e9c:	a5 e2       	ldi	r26, 0x25	; 37
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e2       	ldi	r30, 0x25	; 37
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	8c 93       	st	X, r24
	TCCR4A &=~(1<<5);
     eaa:	a0 ea       	ldi	r26, 0xA0	; 160
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e0 ea       	ldi	r30, 0xA0	; 160
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	8f 7d       	andi	r24, 0xDF	; 223
     eb6:	8c 93       	st	X, r24
	PORTE |=0x01<<6;  
     eb8:	ae e2       	ldi	r26, 0x2E	; 46
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e2       	ldi	r30, 0x2E	; 46
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	8c 93       	st	X, r24

}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <motor6_slow>:

void motor6_slow()
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	
	OCR4BH = PULSE_WIDTH/2>>8;
     ed4:	eb ea       	ldi	r30, 0xAB	; 171
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	10 82       	st	Z, r1
	OCR4BL = PULSE_WIDTH/2;	//Load Pulse width
     eda:	ea ea       	ldi	r30, 0xAA	; 170
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	80 83       	st	Z, r24
	
	PORTB |=(1<<3);
     ee2:	a5 e2       	ldi	r26, 0x25	; 37
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e5 e2       	ldi	r30, 0x25	; 37
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
	TCCR4A|=1<<5;
     ef0:	a0 ea       	ldi	r26, 0xA0	; 160
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e0 ea       	ldi	r30, 0xA0	; 160
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 62       	ori	r24, 0x20	; 32
     efc:	8c 93       	st	X, r24

}
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <motor6_speed>:
void motor6_speed(int pwm)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <motor6_speed+0x6>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	
	OCR4BH= pwm>>8;
     f12:	eb ea       	ldi	r30, 0xAB	; 171
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	89 2f       	mov	r24, r25
     f1c:	99 0f       	add	r25, r25
     f1e:	99 0b       	sbc	r25, r25
     f20:	80 83       	st	Z, r24
		
	OCR4BL = pwm;	//Load Pulse width
     f22:	ea ea       	ldi	r30, 0xAA	; 170
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	80 83       	st	Z, r24

}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <timer1_init>:
/****************************************timer1 init**************************************************************/
void timer1_init()
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<5)|(1<<6);		//PortD.5 as o/p
     f3c:	a4 e2       	ldi	r26, 0x24	; 36
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e4 e2       	ldi	r30, 0x24	; 36
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 66       	ori	r24, 0x60	; 96
     f48:	8c 93       	st	X, r24

	//OCR1AH= PULSE_WIDTH>>8;
		
	//OCR1AL = PULSE_WIDTH;	//Load Pulse width
	OCR1AH=0;
     f4a:	e9 e8       	ldi	r30, 0x89	; 137
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	10 82       	st	Z, r1
	OCR1AL=255;
     f50:	e8 e8       	ldi	r30, 0x88	; 136
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	80 83       	st	Z, r24

	//OCR1BH = PULSE_WIDTH>>8;	//Load Pulse width
	//OCR1BL = PULSE_WIDTH;	//Load Pulse width
	OCR1BH=0;
     f58:	eb e8       	ldi	r30, 0x8B	; 139
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	10 82       	st	Z, r1
	OCR1BL=255;
     f5e:	ea e8       	ldi	r30, 0x8A	; 138
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	80 83       	st	Z, r24
	
	
	//DDRD& =(0xff<<4);                   //PD4ÊäÈë
	TCCR1A = 0x03;
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	80 83       	st	Z, r24
	TCCR1B = 0x09;                 //start Timer
     f6e:	e1 e8       	ldi	r30, 0x81	; 129
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	89 e0       	ldi	r24, 0x09	; 9
     f74:	80 83       	st	Z, r24
	TIMSK1	|=(1<<ICIE1);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
     f76:	af e6       	ldi	r26, 0x6F	; 111
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ef e6       	ldi	r30, 0x6F	; 111
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 62       	ori	r24, 0x20	; 32
     f82:	8c 93       	st	X, r24

}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <timer3_init>:
	TIMSK1	|=(1<<TOIE1);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï

}*/

void timer3_init()
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	DDRE |=(1<<3)|(1<<4);
     f92:	ad e2       	ldi	r26, 0x2D	; 45
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ed e2       	ldi	r30, 0x2D	; 45
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 61       	ori	r24, 0x18	; 24
     f9e:	8c 93       	st	X, r24
	//OCR3AL = PULSE_WIDTH;	//Load Pulse width

	//OCR3BH = PULSE_WIDTH>>8;	//Load Pulse width
	//OCR3BL = PULSE_WIDTH;	//Load Pulse width

	OCR3AH=0;
     fa0:	e9 e9       	ldi	r30, 0x99	; 153
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	10 82       	st	Z, r1
	OCR3AL=64;
     fa6:	e8 e9       	ldi	r30, 0x98	; 152
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 e4       	ldi	r24, 0x40	; 64
     fac:	80 83       	st	Z, r24
	OCR3BH=0;
     fae:	eb e9       	ldi	r30, 0x9B	; 155
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1
	OCR3BL=64;
     fb4:	ea e9       	ldi	r30, 0x9A	; 154
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 e4       	ldi	r24, 0x40	; 64
     fba:	80 83       	st	Z, r24


	DDRE&=~(1<<7);                   //PD4ÊäÈë
     fbc:	ad e2       	ldi	r26, 0x2D	; 45
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ed e2       	ldi	r30, 0x2D	; 45
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 77       	andi	r24, 0x7F	; 127
     fc8:	8c 93       	st	X, r24
	TCCR3A = 0x03;
     fca:	e0 e9       	ldi	r30, 0x90	; 144
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	80 83       	st	Z, r24
	TCCR3B = 0x09; //start Timer
     fd2:	e1 e9       	ldi	r30, 0x91	; 145
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	89 e0       	ldi	r24, 0x09	; 9
     fd8:	80 83       	st	Z, r24
	TIMSK3	|=(1<<ICIE3);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
     fda:	a1 e7       	ldi	r26, 0x71	; 113
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e7       	ldi	r30, 0x71	; 113
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 62       	ori	r24, 0x20	; 32
     fe6:	8c 93       	st	X, r24

}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <timer4_init>:

void timer4_init()
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	DDRH |=(1<<3)|(1<<4);
     ff6:	a1 e0       	ldi	r26, 0x01	; 1
     ff8:	b1 e0       	ldi	r27, 0x01	; 1
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	80 81       	ld	r24, Z
    1000:	88 61       	ori	r24, 0x18	; 24
    1002:	8c 93       	st	X, r24
	//OCR4AL = PULSE_WIDTH;	//Load Pulse width

	//OCR4BH = PULSE_WIDTH>>8;	//Load Pulse width
	//OCR4BL = PULSE_WIDTH;	//Load Pulse width
	
	OCR4AH=1;
    1004:	e9 ea       	ldi	r30, 0xA9	; 169
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 83       	st	Z, r24
	OCR4AL=255;
    100c:	e8 ea       	ldi	r30, 0xA8	; 168
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	80 83       	st	Z, r24
	OCR4BH=1;
    1014:	eb ea       	ldi	r30, 0xAB	; 171
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	80 83       	st	Z, r24
	OCR4BL=255 ;
    101c:	ea ea       	ldi	r30, 0xAA	; 170
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	80 83       	st	Z, r24

	DDRL&=~(1<<0);                   //PD4ÊäÈë
    1024:	aa e0       	ldi	r26, 0x0A	; 10
    1026:	b1 e0       	ldi	r27, 0x01	; 1
    1028:	ea e0       	ldi	r30, 0x0A	; 10
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	80 81       	ld	r24, Z
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	8c 93       	st	X, r24
	TCCR4A = 0x03;
    1032:	e0 ea       	ldi	r30, 0xA0	; 160
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	80 83       	st	Z, r24
	TCCR4B = 0x09; //start Timer
    103a:	e1 ea       	ldi	r30, 0xA1	; 161
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	89 e0       	ldi	r24, 0x09	; 9
    1040:	80 83       	st	Z, r24
	TIMSK4	|=(1<<ICIE4);            //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
    1042:	a2 e7       	ldi	r26, 0x72	; 114
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e2 e7       	ldi	r30, 0x72	; 114
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 62       	ori	r24, 0x20	; 32
    104e:	8c 93       	st	X, r24

}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <timer5_init>:


void timer5_init()
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	
	//DDRL & =(0xff<<1);                   //PD4ÊäÈë
	TCCR5A = 0x00;
    105e:	e0 e2       	ldi	r30, 0x20	; 32
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	10 82       	st	Z, r1
	TCCR5B = 0x09; //start Timer
    1064:	e1 e2       	ldi	r30, 0x21	; 33
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	89 e0       	ldi	r24, 0x09	; 9
    106a:	80 83       	st	Z, r24
	TIMSK5	|=(1<<ICIE5) ;           //ÔÊÐíÂö³å²¶»ñÖÐ¶Ï
    106c:	a3 e7       	ldi	r26, 0x73	; 115
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e3 e7       	ldi	r30, 0x73	; 115
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 62       	ori	r24, 0x20	; 32
    1078:	8c 93       	st	X, r24

}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <init_device>:

void init_device(void)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli(); //disable all interrupts
    1088:	f8 94       	cli
 //XDIV  = 0x00; //xtal divider
 XMCRA = 0x00; //external memory
    108a:	e4 e7       	ldi	r30, 0x74	; 116
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	10 82       	st	Z, r1
 
 //INIT PROT
 DDRB=0XFF;
    1090:	e4 e2       	ldi	r30, 0x24	; 36
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	80 83       	st	Z, r24
 PORTB=0X07;
    1098:	e5 e2       	ldi	r30, 0x25	; 37
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	87 e0       	ldi	r24, 0x07	; 7
    109e:	80 83       	st	Z, r24
 
 DDRE=0XFF;
    10a0:	ed e2       	ldi	r30, 0x2D	; 45
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	80 83       	st	Z, r24
 PORTE=0X40;
    10a8:	ee e2       	ldi	r30, 0x2E	; 46
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 e4       	ldi	r24, 0x40	; 64
    10ae:	80 83       	st	Z, r24
 
 DDRH=0XFF;
    10b0:	e1 e0       	ldi	r30, 0x01	; 1
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	80 83       	st	Z, r24
 PORTH=0X60;
    10b8:	e2 e0       	ldi	r30, 0x02	; 2
    10ba:	f1 e0       	ldi	r31, 0x01	; 1
    10bc:	80 e6       	ldi	r24, 0x60	; 96
    10be:	80 83       	st	Z, r24

 //watchdog_init();
 PORTL=0X00;
    10c0:	eb e0       	ldi	r30, 0x0B	; 11
    10c2:	f1 e0       	ldi	r31, 0x01	; 1
    10c4:	10 82       	st	Z, r1
 DDRL=0XFC;     //PL0,1ÊäÈë£¬ÆäËûÊä³ö
    10c6:	ea e0       	ldi	r30, 0x0A	; 10
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	8c ef       	ldi	r24, 0xFC	; 252
    10cc:	80 83       	st	Z, r24
 
 PORTK=0Xff;
    10ce:	e8 e0       	ldi	r30, 0x08	; 8
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	80 83       	st	Z, r24
 DDRK=0X00;
    10d6:	e7 e0       	ldi	r30, 0x07	; 7
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	10 82       	st	Z, r1
 
 //timer1_init();  //Í£Ö¹×´Ì¬»ú
 
 USART0_Init(MYUBRR);
    10dc:	87 e4       	ldi	r24, 0x47	; 71
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 98 02 	call	0x530	; 0x530 <USART0_Init>

 USART1_Init(MYUBRR);
    10e4:	87 e4       	ldi	r24, 0x47	; 71
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 ce 02 	call	0x59c	; 0x59c <USART1_Init>

 /*uart0_init();
 uart1_init();*/
 //MCUCR = 0x00;
 timer1_init();
    10ec:	0e 94 9a 07 	call	0xf34	; 0xf34 <timer1_init>
 timer3_init();
    10f0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <timer3_init>
 timer4_init();
    10f4:	0e 94 f7 07 	call	0xfee	; 0xfee <timer4_init>
 timer5_init();
    10f8:	0e 94 2b 08 	call	0x1056	; 0x1056 <timer5_init>
 
 UART0_RECV_FLAG=0;
    10fc:	10 92 5d 03 	sts	0x035D, r1
 UART1_RECV_FLAG=0;
    1100:	10 92 48 03 	sts	0x0348, r1

  Position1=0;
    1104:	10 92 72 03 	sts	0x0372, r1
    1108:	10 92 73 03 	sts	0x0373, r1
    110c:	10 92 74 03 	sts	0x0374, r1
    1110:	10 92 75 03 	sts	0x0375, r1


 Position2=0;
    1114:	10 92 13 03 	sts	0x0313, r1
    1118:	10 92 14 03 	sts	0x0314, r1
    111c:	10 92 15 03 	sts	0x0315, r1
    1120:	10 92 16 03 	sts	0x0316, r1


 Position3=0;
    1124:	10 92 92 03 	sts	0x0392, r1
    1128:	10 92 93 03 	sts	0x0393, r1
    112c:	10 92 94 03 	sts	0x0394, r1
    1130:	10 92 95 03 	sts	0x0395, r1
 
 Position4=0;
    1134:	10 92 8e 03 	sts	0x038E, r1
    1138:	10 92 8f 03 	sts	0x038F, r1
    113c:	10 92 90 03 	sts	0x0390, r1
    1140:	10 92 91 03 	sts	0x0391, r1


 Position5=0;
    1144:	10 92 38 03 	sts	0x0338, r1
    1148:	10 92 39 03 	sts	0x0339, r1
    114c:	10 92 3a 03 	sts	0x033A, r1
    1150:	10 92 3b 03 	sts	0x033B, r1


 motor1Step=0;
    1154:	10 92 cc 03 	sts	0x03CC, r1
    1158:	10 92 cd 03 	sts	0x03CD, r1
    115c:	10 92 ce 03 	sts	0x03CE, r1
    1160:	10 92 cf 03 	sts	0x03CF, r1
 motor2Step=0;
    1164:	10 92 be 03 	sts	0x03BE, r1
    1168:	10 92 bf 03 	sts	0x03BF, r1
    116c:	10 92 c0 03 	sts	0x03C0, r1
    1170:	10 92 c1 03 	sts	0x03C1, r1
 motor3Step=0;
    1174:	10 92 29 03 	sts	0x0329, r1
    1178:	10 92 2a 03 	sts	0x032A, r1
    117c:	10 92 2b 03 	sts	0x032B, r1
    1180:	10 92 2c 03 	sts	0x032C, r1
 motor4Step=0;
    1184:	10 92 c2 03 	sts	0x03C2, r1
    1188:	10 92 c3 03 	sts	0x03C3, r1
    118c:	10 92 c4 03 	sts	0x03C4, r1
    1190:	10 92 c5 03 	sts	0x03C5, r1
 motor5Step=0;
    1194:	10 92 80 03 	sts	0x0380, r1
    1198:	10 92 81 03 	sts	0x0381, r1
    119c:	10 92 82 03 	sts	0x0382, r1
    11a0:	10 92 83 03 	sts	0x0383, r1
sei(); //re-enable interrupts
    11a4:	78 94       	sei
 //all peripherals are now initialized


}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <delayms>:

void  delayms(volatile unsigned int n)       
{ long i;
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	2a 97       	sbiw	r28, 0x0a	; 10
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	9a 87       	std	Y+10, r25	; 0x0a
    11c2:	89 87       	std	Y+9, r24	; 0x09
  long j;
  for(i=0;i<100;i++)
    11c4:	1d 82       	std	Y+5, r1	; 0x05
    11c6:	1e 82       	std	Y+6, r1	; 0x06
    11c8:	1f 82       	std	Y+7, r1	; 0x07
    11ca:	18 86       	std	Y+8, r1	; 0x08
    11cc:	29 c0       	rjmp	.+82     	; 0x1220 <delayms+0x74>
  {
  	  for(j=n;j>0;j--)
    11ce:	89 85       	ldd	r24, Y+9	; 0x09
    11d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d2:	cc 01       	movw	r24, r24
    11d4:	a0 e0       	ldi	r26, 0x00	; 0
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	ab 83       	std	Y+3, r26	; 0x03
    11de:	bc 83       	std	Y+4, r27	; 0x04
    11e0:	0b c0       	rjmp	.+22     	; 0x11f8 <delayms+0x4c>
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	ab 81       	ldd	r26, Y+3	; 0x03
    11e8:	bc 81       	ldd	r27, Y+4	; 0x04
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	a1 09       	sbc	r26, r1
    11ee:	b1 09       	sbc	r27, r1
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	9a 83       	std	Y+2, r25	; 0x02
    11f4:	ab 83       	std	Y+3, r26	; 0x03
    11f6:	bc 83       	std	Y+4, r27	; 0x04
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	ab 81       	ldd	r26, Y+3	; 0x03
    11fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1200:	18 16       	cp	r1, r24
    1202:	19 06       	cpc	r1, r25
    1204:	1a 06       	cpc	r1, r26
    1206:	1b 06       	cpc	r1, r27
    1208:	64 f3       	brlt	.-40     	; 0x11e2 <delayms+0x36>
}

void  delayms(volatile unsigned int n)       
{ long i;
  long j;
  for(i=0;i<100;i++)
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	af 81       	ldd	r26, Y+7	; 0x07
    1210:	b8 85       	ldd	r27, Y+8	; 0x08
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	a1 1d       	adc	r26, r1
    1216:	b1 1d       	adc	r27, r1
    1218:	8d 83       	std	Y+5, r24	; 0x05
    121a:	9e 83       	std	Y+6, r25	; 0x06
    121c:	af 83       	std	Y+7, r26	; 0x07
    121e:	b8 87       	std	Y+8, r27	; 0x08
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	af 81       	ldd	r26, Y+7	; 0x07
    1226:	b8 85       	ldd	r27, Y+8	; 0x08
    1228:	84 36       	cpi	r24, 0x64	; 100
    122a:	91 05       	cpc	r25, r1
    122c:	a1 05       	cpc	r26, r1
    122e:	b1 05       	cpc	r27, r1
    1230:	74 f2       	brlt	.-100    	; 0x11ce <delayms+0x22>
  {
  	  for(j=n;j>0;j--)
	  {}
  	} 
 
} 
    1232:	2a 96       	adiw	r28, 0x0a	; 10
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <delayus>:

void delayus(volatile unsigned int n)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2a 97       	sbiw	r28, 0x0a	; 10
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	9a 87       	std	Y+10, r25	; 0x0a
    125a:	89 87       	std	Y+9, r24	; 0x09
   long i;
   long j;
   for(i=0;i<2;i++)
    125c:	1d 82       	std	Y+5, r1	; 0x05
    125e:	1e 82       	std	Y+6, r1	; 0x06
    1260:	1f 82       	std	Y+7, r1	; 0x07
    1262:	18 86       	std	Y+8, r1	; 0x08
    1264:	29 c0       	rjmp	.+82     	; 0x12b8 <delayus+0x74>
   {
      for(j=n;j>0;j--)
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	cc 01       	movw	r24, r24
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	ab 83       	std	Y+3, r26	; 0x03
    1276:	bc 83       	std	Y+4, r27	; 0x04
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <delayus+0x4c>
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	ab 81       	ldd	r26, Y+3	; 0x03
    1280:	bc 81       	ldd	r27, Y+4	; 0x04
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	a1 09       	sbc	r26, r1
    1286:	b1 09       	sbc	r27, r1
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	ab 83       	std	Y+3, r26	; 0x03
    128e:	bc 83       	std	Y+4, r27	; 0x04
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	9a 81       	ldd	r25, Y+2	; 0x02
    1294:	ab 81       	ldd	r26, Y+3	; 0x03
    1296:	bc 81       	ldd	r27, Y+4	; 0x04
    1298:	18 16       	cp	r1, r24
    129a:	19 06       	cpc	r1, r25
    129c:	1a 06       	cpc	r1, r26
    129e:	1b 06       	cpc	r1, r27
    12a0:	64 f3       	brlt	.-40     	; 0x127a <delayus+0x36>

void delayus(volatile unsigned int n)
{
   long i;
   long j;
   for(i=0;i<2;i++)
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	af 81       	ldd	r26, Y+7	; 0x07
    12a8:	b8 85       	ldd	r27, Y+8	; 0x08
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	a1 1d       	adc	r26, r1
    12ae:	b1 1d       	adc	r27, r1
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	af 83       	std	Y+7, r26	; 0x07
    12b6:	b8 87       	std	Y+8, r27	; 0x08
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	af 81       	ldd	r26, Y+7	; 0x07
    12be:	b8 85       	ldd	r27, Y+8	; 0x08
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	91 05       	cpc	r25, r1
    12c4:	a1 05       	cpc	r26, r1
    12c6:	b1 05       	cpc	r27, r1
    12c8:	74 f2       	brlt	.-100    	; 0x1266 <delayus+0x22>
      for(j=n;j>0;j--)
	  {}
   }


}
    12ca:	2a 96       	adiw	r28, 0x0a	; 10
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <fork_uart0_command>:

void fork_uart0_command()
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	28 97       	sbiw	r28, 0x08	; 8
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    int i;
		if(UART0_RECV_FLAG==1)
    12f0:	80 91 5d 03 	lds	r24, 0x035D
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <fork_uart0_command+0x1e>
    12f8:	c4 c1       	rjmp	.+904    	; 0x1682 <fork_uart0_command+0x3a6>
	{
		memcpy(&motor_command,UART0_RECV_BUFFER,sizeof(UART0_RECV_BUFFER));
    12fa:	80 eb       	ldi	r24, 0xB0	; 176
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	2b e9       	ldi	r18, 0x9B	; 155
    1300:	33 e0       	ldi	r19, 0x03	; 3
    1302:	b9 01       	movw	r22, r18
    1304:	4d e0       	ldi	r20, 0x0D	; 13
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
		switch(motor_command.MotorStart)
    130c:	80 91 b1 03 	lds	r24, 0x03B1
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	38 87       	std	Y+8, r19	; 0x08
    1316:	2f 83       	std	Y+7, r18	; 0x07
    1318:	8f 81       	ldd	r24, Y+7	; 0x07
    131a:	98 85       	ldd	r25, Y+8	; 0x08
    131c:	80 33       	cpi	r24, 0x30	; 48
    131e:	91 05       	cpc	r25, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <fork_uart0_command+0x48>
    1322:	20 c1       	rjmp	.+576    	; 0x1564 <fork_uart0_command+0x288>
    1324:	2f 81       	ldd	r18, Y+7	; 0x07
    1326:	38 85       	ldd	r19, Y+8	; 0x08
    1328:	21 33       	cpi	r18, 0x31	; 49
    132a:	31 05       	cpc	r19, r1
    132c:	09 f0       	breq	.+2      	; 0x1330 <fork_uart0_command+0x54>
    132e:	a7 c1       	rjmp	.+846    	; 0x167e <fork_uart0_command+0x3a2>
		{
			case START:
			{
				switch(motor_command.MotorID)
    1330:	80 91 b0 03 	lds	r24, 0x03B0
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3e 83       	std	Y+6, r19	; 0x06
    133a:	2d 83       	std	Y+5, r18	; 0x05
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	83 33       	cpi	r24, 0x33	; 51
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <fork_uart0_command+0x6c>
    1346:	82 c0       	rjmp	.+260    	; 0x144c <fork_uart0_command+0x170>
    1348:	2d 81       	ldd	r18, Y+5	; 0x05
    134a:	3e 81       	ldd	r19, Y+6	; 0x06
    134c:	24 33       	cpi	r18, 0x34	; 52
    134e:	31 05       	cpc	r19, r1
    1350:	64 f4       	brge	.+24     	; 0x136a <fork_uart0_command+0x8e>
    1352:	8d 81       	ldd	r24, Y+5	; 0x05
    1354:	9e 81       	ldd	r25, Y+6	; 0x06
    1356:	81 33       	cpi	r24, 0x31	; 49
    1358:	91 05       	cpc	r25, r1
    135a:	d1 f0       	breq	.+52     	; 0x1390 <fork_uart0_command+0xb4>
    135c:	2d 81       	ldd	r18, Y+5	; 0x05
    135e:	3e 81       	ldd	r19, Y+6	; 0x06
    1360:	22 33       	cpi	r18, 0x32	; 50
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <fork_uart0_command+0x8c>
    1366:	4f c0       	rjmp	.+158    	; 0x1406 <fork_uart0_command+0x12a>
    1368:	8a c1       	rjmp	.+788    	; 0x167e <fork_uart0_command+0x3a2>
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	85 33       	cpi	r24, 0x35	; 53
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <fork_uart0_command+0x9a>
    1374:	b1 c0       	rjmp	.+354    	; 0x14d8 <fork_uart0_command+0x1fc>
    1376:	2d 81       	ldd	r18, Y+5	; 0x05
    1378:	3e 81       	ldd	r19, Y+6	; 0x06
    137a:	25 33       	cpi	r18, 0x35	; 53
    137c:	31 05       	cpc	r19, r1
    137e:	0c f4       	brge	.+2      	; 0x1382 <fork_uart0_command+0xa6>
    1380:	88 c0       	rjmp	.+272    	; 0x1492 <fork_uart0_command+0x1b6>
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	86 33       	cpi	r24, 0x36	; 54
    1388:	91 05       	cpc	r25, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <fork_uart0_command+0xb2>
    138c:	c8 c0       	rjmp	.+400    	; 0x151e <fork_uart0_command+0x242>
    138e:	77 c1       	rjmp	.+750    	; 0x167e <fork_uart0_command+0x3a2>
				{
					case MOTOR1:
					global_yon_motor1_running=TRUE;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	80 93 59 03 	sts	0x0359, r24
					motor1_start(motor_command.MotorDirection);
    1396:	80 91 b2 03 	lds	r24, 0x03B2
    139a:	0e 94 04 03 	call	0x608	; 0x608 <motor1_start>
					Motor1Status=motor_command.MotorDirection;
    139e:	80 91 b2 03 	lds	r24, 0x03B2
    13a2:	80 93 9a 03 	sts	0x039A, r24
					memcpy(Motor1CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    13a6:	8d e2       	ldi	r24, 0x2D	; 45
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	23 eb       	ldi	r18, 0xB3	; 179
    13ac:	33 e0       	ldi	r19, 0x03	; 3
    13ae:	b9 01       	movw	r22, r18
    13b0:	49 e0       	ldi	r20, 0x09	; 9
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
					motor1CommandStep=atol(Motor1CommandStep);
    13b8:	8d e2       	ldi	r24, 0x2D	; 45
    13ba:	93 e0       	ldi	r25, 0x03	; 3
    13bc:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	80 93 ac 03 	sts	0x03AC, r24
    13c8:	90 93 ad 03 	sts	0x03AD, r25
    13cc:	a0 93 ae 03 	sts	0x03AE, r26
    13d0:	b0 93 af 03 	sts	0x03AF, r27
					for(i=0;Motor1CommandStep[i]!='\0';i++)
    13d4:	1a 82       	std	Y+2, r1	; 0x02
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <fork_uart0_command+0x118>
					{
					USART0_Transmit((Motor1CommandStep[i]));
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	fc 01       	movw	r30, r24
    13e0:	e3 5d       	subi	r30, 0xD3	; 211
    13e2:	fc 4f       	sbci	r31, 0xFC	; 252
    13e4:	80 81       	ld	r24, Z
    13e6:	0e 94 b7 02 	call	0x56e	; 0x56e <USART0_Transmit>
					global_yon_motor1_running=TRUE;
					motor1_start(motor_command.MotorDirection);
					Motor1Status=motor_command.MotorDirection;
					memcpy(Motor1CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
					motor1CommandStep=atol(Motor1CommandStep);
					for(i=0;Motor1CommandStep[i]!='\0';i++)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	9a 83       	std	Y+2, r25	; 0x02
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	fc 01       	movw	r30, r24
    13fa:	e3 5d       	subi	r30, 0xD3	; 211
    13fc:	fc 4f       	sbci	r31, 0xFC	; 252
    13fe:	80 81       	ld	r24, Z
    1400:	88 23       	and	r24, r24
    1402:	59 f7       	brne	.-42     	; 0x13da <fork_uart0_command+0xfe>
    1404:	3c c1       	rjmp	.+632    	; 0x167e <fork_uart0_command+0x3a2>
					USART0_Transmit((Motor1CommandStep[i]));
					}
					break;
					
					case MOTOR2:
					global_yon_motor2_running=TRUE;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	80 93 c6 03 	sts	0x03C6, r24
					motor2_start(motor_command.MotorDirection);
    140c:	80 91 b2 03 	lds	r24, 0x03B2
    1410:	0e 94 b3 03 	call	0x766	; 0x766 <motor2_start>
					Motor2Status=motor_command.MotorDirection;
    1414:	80 91 b2 03 	lds	r24, 0x03B2
    1418:	80 93 8c 03 	sts	0x038C, r24
					memcpy(Motor2CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    141c:	8e e3       	ldi	r24, 0x3E	; 62
    141e:	93 e0       	ldi	r25, 0x03	; 3
    1420:	23 eb       	ldi	r18, 0xB3	; 179
    1422:	33 e0       	ldi	r19, 0x03	; 3
    1424:	b9 01       	movw	r22, r18
    1426:	49 e0       	ldi	r20, 0x09	; 9
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
					motor2CommandStep=atol(Motor2CommandStep);
    142e:	8e e3       	ldi	r24, 0x3E	; 62
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	80 93 0e 03 	sts	0x030E, r24
    143e:	90 93 0f 03 	sts	0x030F, r25
    1442:	a0 93 10 03 	sts	0x0310, r26
    1446:	b0 93 11 03 	sts	0x0311, r27
    144a:	19 c1       	rjmp	.+562    	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR3:
					global_yon_motor3_running=TRUE;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	80 93 bd 03 	sts	0x03BD, r24
					motor3_start(motor_command.MotorDirection);
    1452:	80 91 b2 03 	lds	r24, 0x03B2
    1456:	0e 94 62 04 	call	0x8c4	; 0x8c4 <motor3_start>
					Motor3Status=motor_command.MotorDirection;
    145a:	80 91 b2 03 	lds	r24, 0x03B2
    145e:	80 93 3c 03 	sts	0x033C, r24
					memcpy(Motor3CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    1462:	88 e6       	ldi	r24, 0x68	; 104
    1464:	93 e0       	ldi	r25, 0x03	; 3
    1466:	23 eb       	ldi	r18, 0xB3	; 179
    1468:	33 e0       	ldi	r19, 0x03	; 3
    146a:	b9 01       	movw	r22, r18
    146c:	49 e0       	ldi	r20, 0x09	; 9
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
					motor3CommandStep=atol(Motor3CommandStep);
    1474:	88 e6       	ldi	r24, 0x68	; 104
    1476:	93 e0       	ldi	r25, 0x03	; 3
    1478:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	80 93 86 03 	sts	0x0386, r24
    1484:	90 93 87 03 	sts	0x0387, r25
    1488:	a0 93 88 03 	sts	0x0388, r26
    148c:	b0 93 89 03 	sts	0x0389, r27
    1490:	f6 c0       	rjmp	.+492    	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR4:
					global_yon_motor4_running=TRUE;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	80 93 8d 03 	sts	0x038D, r24
					motor4_start(motor_command.MotorDirection);
    1498:	80 91 b2 03 	lds	r24, 0x03B2
    149c:	0e 94 95 05 	call	0xb2a	; 0xb2a <motor4_start>
					Motor4Status=motor_command.MotorDirection;
    14a0:	80 91 b2 03 	lds	r24, 0x03B2
    14a4:	80 93 3d 03 	sts	0x033D, r24
					memcpy(Motor4CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    14a8:	86 e7       	ldi	r24, 0x76	; 118
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	23 eb       	ldi	r18, 0xB3	; 179
    14ae:	33 e0       	ldi	r19, 0x03	; 3
    14b0:	b9 01       	movw	r22, r18
    14b2:	49 e0       	ldi	r20, 0x09	; 9
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
					motor4CommandStep=atol(Motor4CommandStep);
    14ba:	86 e7       	ldi	r24, 0x76	; 118
    14bc:	93 e0       	ldi	r25, 0x03	; 3
    14be:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	80 93 a8 03 	sts	0x03A8, r24
    14ca:	90 93 a9 03 	sts	0x03A9, r25
    14ce:	a0 93 aa 03 	sts	0x03AA, r26
    14d2:	b0 93 ab 03 	sts	0x03AB, r27
    14d6:	d3 c0       	rjmp	.+422    	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR5:
					global_yon_motor5_running=TRUE;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	80 93 37 03 	sts	0x0337, r24
					motor5_start(motor_command.MotorDirection);
    14de:	80 91 b2 03 	lds	r24, 0x03B2
    14e2:	0e 94 43 06 	call	0xc86	; 0xc86 <motor5_start>
					Motor5Status=motor_command.MotorDirection;
    14e6:	80 91 b2 03 	lds	r24, 0x03B2
    14ea:	80 93 5c 03 	sts	0x035C, r24
					memcpy(Motor5CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    14ee:	8f e4       	ldi	r24, 0x4F	; 79
    14f0:	93 e0       	ldi	r25, 0x03	; 3
    14f2:	23 eb       	ldi	r18, 0xB3	; 179
    14f4:	33 e0       	ldi	r19, 0x03	; 3
    14f6:	b9 01       	movw	r22, r18
    14f8:	49 e0       	ldi	r20, 0x09	; 9
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
					motor5CommandStep=atol(Motor5CommandStep);
    1500:	8f e4       	ldi	r24, 0x4F	; 79
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	80 93 25 03 	sts	0x0325, r24
    1510:	90 93 26 03 	sts	0x0326, r25
    1514:	a0 93 27 03 	sts	0x0327, r26
    1518:	b0 93 28 03 	sts	0x0328, r27
    151c:	b0 c0       	rjmp	.+352    	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR6:
					global_yon_motor6_running=TRUE;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	80 93 c9 03 	sts	0x03C9, r24
					motor6_start(motor_command.MotorDirection);
    1524:	80 91 b2 03 	lds	r24, 0x03B2
    1528:	0e 94 f2 06 	call	0xde4	; 0xde4 <motor6_start>
					Motor6Status=motor_command.MotorDirection;
    152c:	80 91 b2 03 	lds	r24, 0x03B2
    1530:	80 93 d0 03 	sts	0x03D0, r24
					memcpy(Motor6CommandStep,&motor_command.MotorStep,sizeof(motor_command.MotorStep));
    1534:	8e e5       	ldi	r24, 0x5E	; 94
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	23 eb       	ldi	r18, 0xB3	; 179
    153a:	33 e0       	ldi	r19, 0x03	; 3
    153c:	b9 01       	movw	r22, r18
    153e:	49 e0       	ldi	r20, 0x09	; 9
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <memcpy>
					motor6CommandStep=atol(Motor6CommandStep);
    1546:	8e e5       	ldi	r24, 0x5E	; 94
    1548:	93 e0       	ldi	r25, 0x03	; 3
    154a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <atol>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	80 93 96 03 	sts	0x0396, r24
    1556:	90 93 97 03 	sts	0x0397, r25
    155a:	a0 93 98 03 	sts	0x0398, r26
    155e:	b0 93 99 03 	sts	0x0399, r27
    1562:	8d c0       	rjmp	.+282    	; 0x167e <fork_uart0_command+0x3a2>
				break;
			}

			case STOP:
			{
				switch(motor_command.MotorID)
    1564:	80 91 b0 03 	lds	r24, 0x03B0
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3c 83       	std	Y+4, r19	; 0x04
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	83 33       	cpi	r24, 0x33	; 51
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <fork_uart0_command+0x2a0>
    157a:	42 c0       	rjmp	.+132    	; 0x1600 <fork_uart0_command+0x324>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	24 33       	cpi	r18, 0x34	; 52
    1582:	31 05       	cpc	r19, r1
    1584:	5c f4       	brge	.+22     	; 0x159c <fork_uart0_command+0x2c0>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	81 33       	cpi	r24, 0x31	; 49
    158c:	91 05       	cpc	r25, r1
    158e:	c1 f0       	breq	.+48     	; 0x15c0 <fork_uart0_command+0x2e4>
    1590:	2b 81       	ldd	r18, Y+3	; 0x03
    1592:	3c 81       	ldd	r19, Y+4	; 0x04
    1594:	22 33       	cpi	r18, 0x32	; 50
    1596:	31 05       	cpc	r19, r1
    1598:	19 f1       	breq	.+70     	; 0x15e0 <fork_uart0_command+0x304>
    159a:	71 c0       	rjmp	.+226    	; 0x167e <fork_uart0_command+0x3a2>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	85 33       	cpi	r24, 0x35	; 53
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <fork_uart0_command+0x2cc>
    15a6:	4c c0       	rjmp	.+152    	; 0x1640 <fork_uart0_command+0x364>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	25 33       	cpi	r18, 0x35	; 53
    15ae:	31 05       	cpc	r19, r1
    15b0:	bc f1       	brlt	.+110    	; 0x1620 <fork_uart0_command+0x344>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	86 33       	cpi	r24, 0x36	; 54
    15b8:	91 05       	cpc	r25, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <fork_uart0_command+0x2e2>
    15bc:	51 c0       	rjmp	.+162    	; 0x1660 <fork_uart0_command+0x384>
    15be:	5f c0       	rjmp	.+190    	; 0x167e <fork_uart0_command+0x3a2>
				{
					case MOTOR1:
					motor1_stop();
    15c0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <motor1_stop>
					global_yon_motor1_running=FALSE;
    15c4:	10 92 59 03 	sts	0x0359, r1
					Motor1Status=MOTOR_STOP;
    15c8:	82 e3       	ldi	r24, 0x32	; 50
    15ca:	80 93 9a 03 	sts	0x039A, r24
					motor1Step=0;
    15ce:	10 92 cc 03 	sts	0x03CC, r1
    15d2:	10 92 cd 03 	sts	0x03CD, r1
    15d6:	10 92 ce 03 	sts	0x03CE, r1
    15da:	10 92 cf 03 	sts	0x03CF, r1
    15de:	4f c0       	rjmp	.+158    	; 0x167e <fork_uart0_command+0x3a2>
					
					break;
					
					case MOTOR2:
					motor2_stop();
    15e0:	0e 94 12 04 	call	0x824	; 0x824 <motor2_stop>
					global_yon_motor2_running=FALSE;
    15e4:	10 92 c6 03 	sts	0x03C6, r1
					Motor2Status=MOTOR_STOP;
    15e8:	82 e3       	ldi	r24, 0x32	; 50
    15ea:	80 93 8c 03 	sts	0x038C, r24
					motor2Step=0;
    15ee:	10 92 be 03 	sts	0x03BE, r1
    15f2:	10 92 bf 03 	sts	0x03BF, r1
    15f6:	10 92 c0 03 	sts	0x03C0, r1
    15fa:	10 92 c1 03 	sts	0x03C1, r1
    15fe:	3f c0       	rjmp	.+126    	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR3:
					motor3_stop();
    1600:	0e 94 45 05 	call	0xa8a	; 0xa8a <motor3_stop>
					global_yon_motor3_running=FALSE;
    1604:	10 92 bd 03 	sts	0x03BD, r1
					Motor3Status=MOTOR_STOP;
    1608:	82 e3       	ldi	r24, 0x32	; 50
    160a:	80 93 3c 03 	sts	0x033C, r24
					motor3Step=0;
    160e:	10 92 29 03 	sts	0x0329, r1
    1612:	10 92 2a 03 	sts	0x032A, r1
    1616:	10 92 2b 03 	sts	0x032B, r1
    161a:	10 92 2c 03 	sts	0x032C, r1
    161e:	2f c0       	rjmp	.+94     	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR4:
					motor4_stop();
    1620:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <motor4_stop>
					global_yon_motor4_running=FALSE;
    1624:	10 92 8d 03 	sts	0x038D, r1
					Motor4Status=MOTOR_STOP;
    1628:	82 e3       	ldi	r24, 0x32	; 50
    162a:	80 93 3d 03 	sts	0x033D, r24
					motor4Step=0;
    162e:	10 92 c2 03 	sts	0x03C2, r1
    1632:	10 92 c3 03 	sts	0x03C3, r1
    1636:	10 92 c4 03 	sts	0x03C4, r1
    163a:	10 92 c5 03 	sts	0x03C5, r1
    163e:	1f c0       	rjmp	.+62     	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR5:
					motor5_stop();
    1640:	0e 94 a2 06 	call	0xd44	; 0xd44 <motor5_stop>
					global_yon_motor5_running=FALSE;
    1644:	10 92 37 03 	sts	0x0337, r1
					Motor5Status=MOTOR_STOP;
    1648:	82 e3       	ldi	r24, 0x32	; 50
    164a:	80 93 5c 03 	sts	0x035C, r24
					motor5Step=0;
    164e:	10 92 80 03 	sts	0x0380, r1
    1652:	10 92 81 03 	sts	0x0381, r1
    1656:	10 92 82 03 	sts	0x0382, r1
    165a:	10 92 83 03 	sts	0x0383, r1
    165e:	0f c0       	rjmp	.+30     	; 0x167e <fork_uart0_command+0x3a2>
					break;

					case MOTOR6:
					motor6_stop();
    1660:	0e 94 4a 07 	call	0xe94	; 0xe94 <motor6_stop>
					global_yon_motor6_running=FALSE;
    1664:	10 92 c9 03 	sts	0x03C9, r1
					Motor6Status=MOTOR_STOP;
    1668:	82 e3       	ldi	r24, 0x32	; 50
    166a:	80 93 d0 03 	sts	0x03D0, r24
					motor6Step=0;
    166e:	10 92 4b 03 	sts	0x034B, r1
    1672:	10 92 4c 03 	sts	0x034C, r1
    1676:	10 92 4d 03 	sts	0x034D, r1
    167a:	10 92 4e 03 	sts	0x034E, r1
			
				}
			break;
			}
		}
		UART0_RECV_FLAG=0;
    167e:	10 92 5d 03 	sts	0x035D, r1
	}
}
    1682:	28 96       	adiw	r28, 0x08	; 8
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <fork_uart1_command>:

void fork_uart1_command()
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	if(UART1_RECV_FLAG==1)
    169c:	80 91 48 03 	lds	r24, 0x0348
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	91 f4       	brne	.+36     	; 0x16c8 <fork_uart1_command+0x34>
	{
	   handleAction(UART1_RECV_BUFFER[0]);
    16a4:	80 91 17 03 	lds	r24, 0x0317
    16a8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <handleAction>
	   handleAction(UART1_RECV_BUFFER[1]);
    16ac:	80 91 18 03 	lds	r24, 0x0318
    16b0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <handleAction>
	   handleAction(UART1_RECV_BUFFER[2]);
    16b4:	80 91 19 03 	lds	r24, 0x0319
    16b8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <handleAction>
	   handleAction(UART1_RECV_BUFFER[3]);
    16bc:	80 91 1a 03 	lds	r24, 0x031A
    16c0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <handleAction>
		UART1_RECV_FLAG=0;
    16c4:	10 92 48 03 	sts	0x0348, r1
	
	}

}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <handleAction>:

void handleAction(char buffer)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <handleAction+0x6>
    16d4:	0f 92       	push	r0
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char temp;
    char tempc;

	if((buffer&0b11000000)==0b00000000)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	80 7c       	andi	r24, 0xC0	; 192
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	09 f0       	breq	.+2      	; 0x16ec <handleAction+0x1e>
    16ea:	3f c0       	rjmp	.+126    	; 0x176a <handleAction+0x9c>
	{
	   global_pwm=0x3FF/32*(buffer&0b00011111);
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9c 01       	movw	r18, r24
    16f4:	2f 71       	andi	r18, 0x1F	; 31
    16f6:	30 70       	andi	r19, 0x00	; 0
    16f8:	8f e1       	ldi	r24, 0x1F	; 31
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	ac 01       	movw	r20, r24
    16fe:	24 9f       	mul	r18, r20
    1700:	c0 01       	movw	r24, r0
    1702:	25 9f       	mul	r18, r21
    1704:	90 0d       	add	r25, r0
    1706:	34 9f       	mul	r19, r20
    1708:	90 0d       	add	r25, r0
    170a:	11 24       	eor	r1, r1
    170c:	90 93 c8 03 	sts	0x03C8, r25
    1710:	80 93 c7 03 	sts	0x03C7, r24
	   motor1_speed(0x3FF/32*(buffer&0b00011111));
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 01       	movw	r18, r24
    171c:	2f 71       	andi	r18, 0x1F	; 31
    171e:	30 70       	andi	r19, 0x00	; 0
    1720:	8f e1       	ldi	r24, 0x1F	; 31
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	ac 01       	movw	r20, r24
    1726:	24 9f       	mul	r18, r20
    1728:	c0 01       	movw	r24, r0
    172a:	25 9f       	mul	r18, r21
    172c:	90 0d       	add	r25, r0
    172e:	34 9f       	mul	r19, r20
    1730:	90 0d       	add	r25, r0
    1732:	11 24       	eor	r1, r1
    1734:	0e 94 9b 03 	call	0x736	; 0x736 <motor1_speed>
	  // motor2_speed(0x3FF/32*(buffer&0b00011111));
	   if((buffer&0b00011111)==0)
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	8f 71       	andi	r24, 0x1F	; 31
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	19 f4       	brne	.+6      	; 0x174c <handleAction+0x7e>
	   {
	    motor1_stop();
    1746:	0e 94 63 03 	call	0x6c6	; 0x6c6 <motor1_stop>
    174a:	a7 c0       	rjmp	.+334    	; 0x189a <handleAction+0x1cc>
		//motor2_stop();
	   }
	   else
	   {
		temp=buffer&0b00100000;
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	80 72       	andi	r24, 0x20	; 32
    1750:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	88 23       	and	r24, r24
    1756:	19 f4       	brne	.+6      	; 0x175e <handleAction+0x90>
		   {
		    tempc='0';
    1758:	80 e3       	ldi	r24, 0x30	; 48
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <handleAction+0x94>
		   }
        else 
		   {
		    tempc='1';
    175e:	81 e3       	ldi	r24, 0x31	; 49
    1760:	89 83       	std	Y+1, r24	; 0x01
		   } 
		motor1_start(tempc);
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	0e 94 04 03 	call	0x608	; 0x608 <motor1_start>
    1768:	98 c0       	rjmp	.+304    	; 0x189a <handleAction+0x1cc>
	   
	   }
	
	}
	
	else if((buffer&0b11000000)==0b01000000)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	80 7c       	andi	r24, 0xC0	; 192
    1772:	90 70       	andi	r25, 0x00	; 0
    1774:	80 34       	cpi	r24, 0x40	; 64
    1776:	91 05       	cpc	r25, r1
    1778:	59 f5       	brne	.+86     	; 0x17d0 <handleAction+0x102>
	{
		motor2_speed(0x3FF/32*(buffer&0b00011111));
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 01       	movw	r18, r24
    1782:	2f 71       	andi	r18, 0x1F	; 31
    1784:	30 70       	andi	r19, 0x00	; 0
    1786:	8f e1       	ldi	r24, 0x1F	; 31
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	ac 01       	movw	r20, r24
    178c:	24 9f       	mul	r18, r20
    178e:	c0 01       	movw	r24, r0
    1790:	25 9f       	mul	r18, r21
    1792:	90 0d       	add	r25, r0
    1794:	34 9f       	mul	r19, r20
    1796:	90 0d       	add	r25, r0
    1798:	11 24       	eor	r1, r1
    179a:	0e 94 4a 04 	call	0x894	; 0x894 <motor2_speed>
	   
	   if((buffer&0b00011111)==0)
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	8f 71       	andi	r24, 0x1F	; 31
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <handleAction+0xe4>
	   {
	    motor2_stop();
    17ac:	0e 94 12 04 	call	0x824	; 0x824 <motor2_stop>
    17b0:	74 c0       	rjmp	.+232    	; 0x189a <handleAction+0x1cc>
		
	   }
	   else
	   {
		temp=buffer&0b00100000;
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	80 72       	andi	r24, 0x20	; 32
    17b6:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	88 23       	and	r24, r24
    17bc:	19 f4       	brne	.+6      	; 0x17c4 <handleAction+0xf6>
		   {
		    tempc='0';
    17be:	80 e3       	ldi	r24, 0x30	; 48
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <handleAction+0xfa>
		   }
        else 
		   {
		    tempc='1';
    17c4:	81 e3       	ldi	r24, 0x31	; 49
    17c6:	89 83       	std	Y+1, r24	; 0x01
		   } 
		motor2_start(tempc);
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	0e 94 b3 03 	call	0x766	; 0x766 <motor2_start>
    17ce:	65 c0       	rjmp	.+202    	; 0x189a <handleAction+0x1cc>
	   
	   }
	
	}
	
	else if((buffer&0b11000000)==0b10000000)
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	80 7c       	andi	r24, 0xC0	; 192
    17d8:	90 70       	andi	r25, 0x00	; 0
    17da:	80 38       	cpi	r24, 0x80	; 128
    17dc:	91 05       	cpc	r25, r1
    17de:	59 f5       	brne	.+86     	; 0x1836 <handleAction+0x168>
	{
		motor3_speed(0x3FF/32*(buffer&0b00011111));
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9c 01       	movw	r18, r24
    17e8:	2f 71       	andi	r18, 0x1F	; 31
    17ea:	30 70       	andi	r19, 0x00	; 0
    17ec:	8f e1       	ldi	r24, 0x1F	; 31
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	ac 01       	movw	r20, r24
    17f2:	24 9f       	mul	r18, r20
    17f4:	c0 01       	movw	r24, r0
    17f6:	25 9f       	mul	r18, r21
    17f8:	90 0d       	add	r25, r0
    17fa:	34 9f       	mul	r19, r20
    17fc:	90 0d       	add	r25, r0
    17fe:	11 24       	eor	r1, r1
    1800:	0e 94 7d 05 	call	0xafa	; 0xafa <motor3_speed>
	 
	   if((buffer&0b00011111)==0)
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	8f 71       	andi	r24, 0x1F	; 31
    180c:	90 70       	andi	r25, 0x00	; 0
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	19 f4       	brne	.+6      	; 0x1818 <handleAction+0x14a>
	   {
	    motor3_stop();
    1812:	0e 94 45 05 	call	0xa8a	; 0xa8a <motor3_stop>
    1816:	41 c0       	rjmp	.+130    	; 0x189a <handleAction+0x1cc>
		
	   }
	   else
	   {
		temp=buffer&0b00100000;
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	80 72       	andi	r24, 0x20	; 32
    181c:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	88 23       	and	r24, r24
    1822:	19 f4       	brne	.+6      	; 0x182a <handleAction+0x15c>
		   {
		    tempc='0';
    1824:	80 e3       	ldi	r24, 0x30	; 48
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	02 c0       	rjmp	.+4      	; 0x182e <handleAction+0x160>
		   }
        else 
		   {
		    tempc='1';
    182a:	81 e3       	ldi	r24, 0x31	; 49
    182c:	89 83       	std	Y+1, r24	; 0x01
		   } 
		motor3_start(tempc);
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	0e 94 62 04 	call	0x8c4	; 0x8c4 <motor3_start>
    1834:	32 c0       	rjmp	.+100    	; 0x189a <handleAction+0x1cc>
	   
	   }
	}
	else if((buffer&0b11000000)==0b11000000)
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	80 7c       	andi	r24, 0xC0	; 192
    183e:	90 70       	andi	r25, 0x00	; 0
    1840:	80 3c       	cpi	r24, 0xC0	; 192
    1842:	91 05       	cpc	r25, r1
    1844:	51 f5       	brne	.+84     	; 0x189a <handleAction+0x1cc>
	{
	
		motor4_speed(0x3FF/32*(buffer&0b00011111));
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 01       	movw	r18, r24
    184e:	2f 71       	andi	r18, 0x1F	; 31
    1850:	30 70       	andi	r19, 0x00	; 0
    1852:	8f e1       	ldi	r24, 0x1F	; 31
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	ac 01       	movw	r20, r24
    1858:	24 9f       	mul	r18, r20
    185a:	c0 01       	movw	r24, r0
    185c:	25 9f       	mul	r18, r21
    185e:	90 0d       	add	r25, r0
    1860:	34 9f       	mul	r19, r20
    1862:	90 0d       	add	r25, r0
    1864:	11 24       	eor	r1, r1
    1866:	0e 94 2b 06 	call	0xc56	; 0xc56 <motor4_speed>
	  
	   if((buffer&0b00011111)==0)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	8f 71       	andi	r24, 0x1F	; 31
    1872:	90 70       	andi	r25, 0x00	; 0
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	19 f4       	brne	.+6      	; 0x187e <handleAction+0x1b0>
	   {
	    motor4_stop();
    1878:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <motor4_stop>
    187c:	0e c0       	rjmp	.+28     	; 0x189a <handleAction+0x1cc>
	
	   }
	   else
	   {
    	temp=buffer&0b00100000;
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	80 72       	andi	r24, 0x20	; 32
    1882:	8a 83       	std	Y+2, r24	; 0x02
		if (temp==0) 
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	88 23       	and	r24, r24
    1888:	19 f4       	brne	.+6      	; 0x1890 <handleAction+0x1c2>
		   {
		    tempc='0';
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <handleAction+0x1c6>
		   }
        else 
		   {
		    tempc='1';
    1890:	81 e3       	ldi	r24, 0x31	; 49
    1892:	89 83       	std	Y+1, r24	; 0x01
		   } 

		motor4_start(tempc);
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	0e 94 95 05 	call	0xb2a	; 0xb2a <motor4_start>
	
	}
	


}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <fork_step_count>:
void fork_step_count()
{
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62

    if (global_yon_motor1_running==TRUE) {
    18be:	80 91 59 03 	lds	r24, 0x0359
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <fork_step_count+0x22>
    18c6:	63 c0       	rjmp	.+198    	; 0x198e <fork_step_count+0xe8>
		if(motor1Step>=motor1CommandStep-fmin(motor1CommandStep*0.05,SLOW_STEP)&&motor1Step<motor1CommandStep)
    18c8:	80 91 cc 03 	lds	r24, 0x03CC
    18cc:	90 91 cd 03 	lds	r25, 0x03CD
    18d0:	a0 91 ce 03 	lds	r26, 0x03CE
    18d4:	b0 91 cf 03 	lds	r27, 0x03CF
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    18e0:	5b 01       	movw	r10, r22
    18e2:	6c 01       	movw	r12, r24
    18e4:	80 91 ac 03 	lds	r24, 0x03AC
    18e8:	90 91 ad 03 	lds	r25, 0x03AD
    18ec:	a0 91 ae 03 	lds	r26, 0x03AE
    18f0:	b0 91 af 03 	lds	r27, 0x03AF
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    18fc:	7b 01       	movw	r14, r22
    18fe:	8c 01       	movw	r16, r24
    1900:	80 91 ac 03 	lds	r24, 0x03AC
    1904:	90 91 ad 03 	lds	r25, 0x03AD
    1908:	a0 91 ae 03 	lds	r26, 0x03AE
    190c:	b0 91 af 03 	lds	r27, 0x03AF
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	2d ec       	ldi	r18, 0xCD	; 205
    1922:	3c ec       	ldi	r19, 0xCC	; 204
    1924:	4c e4       	ldi	r20, 0x4C	; 76
    1926:	5d e3       	ldi	r21, 0x3D	; 61
    1928:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 15 18 	call	0x302a	; 0x302a <fmin>
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	c8 01       	movw	r24, r16
    1946:	b7 01       	movw	r22, r14
    1948:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9c 01       	movw	r18, r24
    1952:	ad 01       	movw	r20, r26
    1954:	c6 01       	movw	r24, r12
    1956:	b5 01       	movw	r22, r10
    1958:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    195c:	88 23       	and	r24, r24
    195e:	bc f0       	brlt	.+46     	; 0x198e <fork_step_count+0xe8>
    1960:	20 91 cc 03 	lds	r18, 0x03CC
    1964:	30 91 cd 03 	lds	r19, 0x03CD
    1968:	40 91 ce 03 	lds	r20, 0x03CE
    196c:	50 91 cf 03 	lds	r21, 0x03CF
    1970:	80 91 ac 03 	lds	r24, 0x03AC
    1974:	90 91 ad 03 	lds	r25, 0x03AD
    1978:	a0 91 ae 03 	lds	r26, 0x03AE
    197c:	b0 91 af 03 	lds	r27, 0x03AF
    1980:	28 17       	cp	r18, r24
    1982:	39 07       	cpc	r19, r25
    1984:	4a 07       	cpc	r20, r26
    1986:	5b 07       	cpc	r21, r27
    1988:	14 f4       	brge	.+4      	; 0x198e <fork_step_count+0xe8>
	{
		motor1_slow();
    198a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <motor1_slow>
	 }
	 }

     if (global_yon_motor2_running==TRUE) {
    198e:	80 91 c6 03 	lds	r24, 0x03C6
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	09 f0       	breq	.+2      	; 0x1998 <fork_step_count+0xf2>
    1996:	63 c0       	rjmp	.+198    	; 0x1a5e <fork_step_count+0x1b8>
     	if(motor2Step>=motor2CommandStep-fmin(motor2CommandStep*0.05,SLOW_STEP)&&motor2Step<motor2CommandStep)
    1998:	80 91 be 03 	lds	r24, 0x03BE
    199c:	90 91 bf 03 	lds	r25, 0x03BF
    19a0:	a0 91 c0 03 	lds	r26, 0x03C0
    19a4:	b0 91 c1 03 	lds	r27, 0x03C1
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    19b0:	5b 01       	movw	r10, r22
    19b2:	6c 01       	movw	r12, r24
    19b4:	80 91 0e 03 	lds	r24, 0x030E
    19b8:	90 91 0f 03 	lds	r25, 0x030F
    19bc:	a0 91 10 03 	lds	r26, 0x0310
    19c0:	b0 91 11 03 	lds	r27, 0x0311
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    19cc:	7b 01       	movw	r14, r22
    19ce:	8c 01       	movw	r16, r24
    19d0:	80 91 0e 03 	lds	r24, 0x030E
    19d4:	90 91 0f 03 	lds	r25, 0x030F
    19d8:	a0 91 10 03 	lds	r26, 0x0310
    19dc:	b0 91 11 03 	lds	r27, 0x0311
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	2d ec       	ldi	r18, 0xCD	; 205
    19f2:	3c ec       	ldi	r19, 0xCC	; 204
    19f4:	4c e4       	ldi	r20, 0x4C	; 76
    19f6:	5d e3       	ldi	r21, 0x3D	; 61
    19f8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 15 18 	call	0x302a	; 0x302a <fmin>
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	c8 01       	movw	r24, r16
    1a16:	b7 01       	movw	r22, r14
    1a18:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9c 01       	movw	r18, r24
    1a22:	ad 01       	movw	r20, r26
    1a24:	c6 01       	movw	r24, r12
    1a26:	b5 01       	movw	r22, r10
    1a28:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	bc f0       	brlt	.+46     	; 0x1a5e <fork_step_count+0x1b8>
    1a30:	20 91 be 03 	lds	r18, 0x03BE
    1a34:	30 91 bf 03 	lds	r19, 0x03BF
    1a38:	40 91 c0 03 	lds	r20, 0x03C0
    1a3c:	50 91 c1 03 	lds	r21, 0x03C1
    1a40:	80 91 0e 03 	lds	r24, 0x030E
    1a44:	90 91 0f 03 	lds	r25, 0x030F
    1a48:	a0 91 10 03 	lds	r26, 0x0310
    1a4c:	b0 91 11 03 	lds	r27, 0x0311
    1a50:	28 17       	cp	r18, r24
    1a52:	39 07       	cpc	r19, r25
    1a54:	4a 07       	cpc	r20, r26
    1a56:	5b 07       	cpc	r21, r27
    1a58:	14 f4       	brge	.+4      	; 0x1a5e <fork_step_count+0x1b8>
	{
		motor2_slow();
    1a5a:	0e 94 2e 04 	call	0x85c	; 0x85c <motor2_slow>
	 }
	 }

     if (global_yon_motor3_running==TRUE) {
    1a5e:	80 91 bd 03 	lds	r24, 0x03BD
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <fork_step_count+0x1c2>
    1a66:	63 c0       	rjmp	.+198    	; 0x1b2e <fork_step_count+0x288>
	 	if(motor3Step>=motor3CommandStep-fmin(motor3CommandStep*0.05,SLOW_STEP)&&motor3Step<motor3CommandStep)
    1a68:	80 91 29 03 	lds	r24, 0x0329
    1a6c:	90 91 2a 03 	lds	r25, 0x032A
    1a70:	a0 91 2b 03 	lds	r26, 0x032B
    1a74:	b0 91 2c 03 	lds	r27, 0x032C
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1a80:	5b 01       	movw	r10, r22
    1a82:	6c 01       	movw	r12, r24
    1a84:	80 91 86 03 	lds	r24, 0x0386
    1a88:	90 91 87 03 	lds	r25, 0x0387
    1a8c:	a0 91 88 03 	lds	r26, 0x0388
    1a90:	b0 91 89 03 	lds	r27, 0x0389
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1a9c:	7b 01       	movw	r14, r22
    1a9e:	8c 01       	movw	r16, r24
    1aa0:	80 91 86 03 	lds	r24, 0x0386
    1aa4:	90 91 87 03 	lds	r25, 0x0387
    1aa8:	a0 91 88 03 	lds	r26, 0x0388
    1aac:	b0 91 89 03 	lds	r27, 0x0389
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	2d ec       	ldi	r18, 0xCD	; 205
    1ac2:	3c ec       	ldi	r19, 0xCC	; 204
    1ac4:	4c e4       	ldi	r20, 0x4C	; 76
    1ac6:	5d e3       	ldi	r21, 0x3D	; 61
    1ac8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 15 18 	call	0x302a	; 0x302a <fmin>
    1ae0:	9b 01       	movw	r18, r22
    1ae2:	ac 01       	movw	r20, r24
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	b7 01       	movw	r22, r14
    1ae8:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9c 01       	movw	r18, r24
    1af2:	ad 01       	movw	r20, r26
    1af4:	c6 01       	movw	r24, r12
    1af6:	b5 01       	movw	r22, r10
    1af8:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    1afc:	88 23       	and	r24, r24
    1afe:	bc f0       	brlt	.+46     	; 0x1b2e <fork_step_count+0x288>
    1b00:	20 91 29 03 	lds	r18, 0x0329
    1b04:	30 91 2a 03 	lds	r19, 0x032A
    1b08:	40 91 2b 03 	lds	r20, 0x032B
    1b0c:	50 91 2c 03 	lds	r21, 0x032C
    1b10:	80 91 86 03 	lds	r24, 0x0386
    1b14:	90 91 87 03 	lds	r25, 0x0387
    1b18:	a0 91 88 03 	lds	r26, 0x0388
    1b1c:	b0 91 89 03 	lds	r27, 0x0389
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	4a 07       	cpc	r20, r26
    1b26:	5b 07       	cpc	r21, r27
    1b28:	14 f4       	brge	.+4      	; 0x1b2e <fork_step_count+0x288>
	{
		motor3_slow();
    1b2a:	0e 94 61 05 	call	0xac2	; 0xac2 <motor3_slow>
	 }
	 }

     if (global_yon_motor4_running==TRUE) {
    1b2e:	80 91 8d 03 	lds	r24, 0x038D
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <fork_step_count+0x292>
    1b36:	63 c0       	rjmp	.+198    	; 0x1bfe <fork_step_count+0x358>
	 	if(motor4Step>=motor4CommandStep-fmin(motor4CommandStep*0.05,SLOW_STEP)&&motor4Step<motor4CommandStep)
    1b38:	80 91 c2 03 	lds	r24, 0x03C2
    1b3c:	90 91 c3 03 	lds	r25, 0x03C3
    1b40:	a0 91 c4 03 	lds	r26, 0x03C4
    1b44:	b0 91 c5 03 	lds	r27, 0x03C5
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1b50:	5b 01       	movw	r10, r22
    1b52:	6c 01       	movw	r12, r24
    1b54:	80 91 a8 03 	lds	r24, 0x03A8
    1b58:	90 91 a9 03 	lds	r25, 0x03A9
    1b5c:	a0 91 aa 03 	lds	r26, 0x03AA
    1b60:	b0 91 ab 03 	lds	r27, 0x03AB
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1b6c:	7b 01       	movw	r14, r22
    1b6e:	8c 01       	movw	r16, r24
    1b70:	80 91 a8 03 	lds	r24, 0x03A8
    1b74:	90 91 a9 03 	lds	r25, 0x03A9
    1b78:	a0 91 aa 03 	lds	r26, 0x03AA
    1b7c:	b0 91 ab 03 	lds	r27, 0x03AB
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	2d ec       	ldi	r18, 0xCD	; 205
    1b92:	3c ec       	ldi	r19, 0xCC	; 204
    1b94:	4c e4       	ldi	r20, 0x4C	; 76
    1b96:	5d e3       	ldi	r21, 0x3D	; 61
    1b98:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 15 18 	call	0x302a	; 0x302a <fmin>
    1bb0:	9b 01       	movw	r18, r22
    1bb2:	ac 01       	movw	r20, r24
    1bb4:	c8 01       	movw	r24, r16
    1bb6:	b7 01       	movw	r22, r14
    1bb8:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9c 01       	movw	r18, r24
    1bc2:	ad 01       	movw	r20, r26
    1bc4:	c6 01       	movw	r24, r12
    1bc6:	b5 01       	movw	r22, r10
    1bc8:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    1bcc:	88 23       	and	r24, r24
    1bce:	bc f0       	brlt	.+46     	; 0x1bfe <fork_step_count+0x358>
    1bd0:	20 91 c2 03 	lds	r18, 0x03C2
    1bd4:	30 91 c3 03 	lds	r19, 0x03C3
    1bd8:	40 91 c4 03 	lds	r20, 0x03C4
    1bdc:	50 91 c5 03 	lds	r21, 0x03C5
    1be0:	80 91 a8 03 	lds	r24, 0x03A8
    1be4:	90 91 a9 03 	lds	r25, 0x03A9
    1be8:	a0 91 aa 03 	lds	r26, 0x03AA
    1bec:	b0 91 ab 03 	lds	r27, 0x03AB
    1bf0:	28 17       	cp	r18, r24
    1bf2:	39 07       	cpc	r19, r25
    1bf4:	4a 07       	cpc	r20, r26
    1bf6:	5b 07       	cpc	r21, r27
    1bf8:	14 f4       	brge	.+4      	; 0x1bfe <fork_step_count+0x358>
	{
		motor4_slow();
    1bfa:	0e 94 10 06 	call	0xc20	; 0xc20 <motor4_slow>
	 }
     }

     if (global_yon_motor5_running==TRUE) {
    1bfe:	80 91 37 03 	lds	r24, 0x0337
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <fork_step_count+0x362>
    1c06:	63 c0       	rjmp	.+198    	; 0x1cce <fork_step_count+0x428>
	 	if(motor5Step>=motor5CommandStep-fmin(motor5CommandStep*0.05,SLOW_STEP)&&motor5Step<motor5CommandStep)
    1c08:	80 91 80 03 	lds	r24, 0x0380
    1c0c:	90 91 81 03 	lds	r25, 0x0381
    1c10:	a0 91 82 03 	lds	r26, 0x0382
    1c14:	b0 91 83 03 	lds	r27, 0x0383
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1c20:	5b 01       	movw	r10, r22
    1c22:	6c 01       	movw	r12, r24
    1c24:	80 91 25 03 	lds	r24, 0x0325
    1c28:	90 91 26 03 	lds	r25, 0x0326
    1c2c:	a0 91 27 03 	lds	r26, 0x0327
    1c30:	b0 91 28 03 	lds	r27, 0x0328
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1c3c:	7b 01       	movw	r14, r22
    1c3e:	8c 01       	movw	r16, r24
    1c40:	80 91 25 03 	lds	r24, 0x0325
    1c44:	90 91 26 03 	lds	r25, 0x0326
    1c48:	a0 91 27 03 	lds	r26, 0x0327
    1c4c:	b0 91 28 03 	lds	r27, 0x0328
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	2d ec       	ldi	r18, 0xCD	; 205
    1c62:	3c ec       	ldi	r19, 0xCC	; 204
    1c64:	4c e4       	ldi	r20, 0x4C	; 76
    1c66:	5d e3       	ldi	r21, 0x3D	; 61
    1c68:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e2       	ldi	r20, 0x20	; 32
    1c7a:	51 e4       	ldi	r21, 0x41	; 65
    1c7c:	0e 94 15 18 	call	0x302a	; 0x302a <fmin>
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
    1c84:	c8 01       	movw	r24, r16
    1c86:	b7 01       	movw	r22, r14
    1c88:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	9c 01       	movw	r18, r24
    1c92:	ad 01       	movw	r20, r26
    1c94:	c6 01       	movw	r24, r12
    1c96:	b5 01       	movw	r22, r10
    1c98:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	bc f0       	brlt	.+46     	; 0x1cce <fork_step_count+0x428>
    1ca0:	20 91 80 03 	lds	r18, 0x0380
    1ca4:	30 91 81 03 	lds	r19, 0x0381
    1ca8:	40 91 82 03 	lds	r20, 0x0382
    1cac:	50 91 83 03 	lds	r21, 0x0383
    1cb0:	80 91 25 03 	lds	r24, 0x0325
    1cb4:	90 91 26 03 	lds	r25, 0x0326
    1cb8:	a0 91 27 03 	lds	r26, 0x0327
    1cbc:	b0 91 28 03 	lds	r27, 0x0328
    1cc0:	28 17       	cp	r18, r24
    1cc2:	39 07       	cpc	r19, r25
    1cc4:	4a 07       	cpc	r20, r26
    1cc6:	5b 07       	cpc	r21, r27
    1cc8:	14 f4       	brge	.+4      	; 0x1cce <fork_step_count+0x428>
	{
		motor5_slow();
    1cca:	0e 94 be 06 	call	0xd7c	; 0xd7c <motor5_slow>
	 }
	 }

     if (global_yon_motor6_running==TRUE) {
    1cce:	80 91 c9 03 	lds	r24, 0x03C9
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <fork_step_count+0x432>
    1cd6:	63 c0       	rjmp	.+198    	; 0x1d9e <fork_step_count+0x4f8>
	 	if(motor6Step>=motor6CommandStep-fmin(motor6CommandStep*0.05,SLOW_STEP)&&motor6Step<motor1CommandStep)
    1cd8:	80 91 4b 03 	lds	r24, 0x034B
    1cdc:	90 91 4c 03 	lds	r25, 0x034C
    1ce0:	a0 91 4d 03 	lds	r26, 0x034D
    1ce4:	b0 91 4e 03 	lds	r27, 0x034E
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1cf0:	5b 01       	movw	r10, r22
    1cf2:	6c 01       	movw	r12, r24
    1cf4:	80 91 96 03 	lds	r24, 0x0396
    1cf8:	90 91 97 03 	lds	r25, 0x0397
    1cfc:	a0 91 98 03 	lds	r26, 0x0398
    1d00:	b0 91 99 03 	lds	r27, 0x0399
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1d0c:	7b 01       	movw	r14, r22
    1d0e:	8c 01       	movw	r16, r24
    1d10:	80 91 96 03 	lds	r24, 0x0396
    1d14:	90 91 97 03 	lds	r25, 0x0397
    1d18:	a0 91 98 03 	lds	r26, 0x0398
    1d1c:	b0 91 99 03 	lds	r27, 0x0399
    1d20:	bc 01       	movw	r22, r24
    1d22:	cd 01       	movw	r24, r26
    1d24:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__floatsisf>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	2d ec       	ldi	r18, 0xCD	; 205
    1d32:	3c ec       	ldi	r19, 0xCC	; 204
    1d34:	4c e4       	ldi	r20, 0x4C	; 76
    1d36:	5d e3       	ldi	r21, 0x3D	; 61
    1d38:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 15 18 	call	0x302a	; 0x302a <fmin>
    1d50:	9b 01       	movw	r18, r22
    1d52:	ac 01       	movw	r20, r24
    1d54:	c8 01       	movw	r24, r16
    1d56:	b7 01       	movw	r22, r14
    1d58:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 01       	movw	r18, r24
    1d62:	ad 01       	movw	r20, r26
    1d64:	c6 01       	movw	r24, r12
    1d66:	b5 01       	movw	r22, r10
    1d68:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	bc f0       	brlt	.+46     	; 0x1d9e <fork_step_count+0x4f8>
    1d70:	20 91 4b 03 	lds	r18, 0x034B
    1d74:	30 91 4c 03 	lds	r19, 0x034C
    1d78:	40 91 4d 03 	lds	r20, 0x034D
    1d7c:	50 91 4e 03 	lds	r21, 0x034E
    1d80:	80 91 ac 03 	lds	r24, 0x03AC
    1d84:	90 91 ad 03 	lds	r25, 0x03AD
    1d88:	a0 91 ae 03 	lds	r26, 0x03AE
    1d8c:	b0 91 af 03 	lds	r27, 0x03AF
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	4a 07       	cpc	r20, r26
    1d96:	5b 07       	cpc	r21, r27
    1d98:	14 f4       	brge	.+4      	; 0x1d9e <fork_step_count+0x4f8>
	{
		motor6_slow();
    1d9a:	0e 94 66 07 	call	0xecc	; 0xecc <motor6_slow>
	 }
	 }

     if (global_yon_motor1_running==TRUE) {
    1d9e:	80 91 59 03 	lds	r24, 0x0359
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	09 f5       	brne	.+66     	; 0x1de8 <fork_step_count+0x542>
		if(motor1CommandStep<=motor1Step)
    1da6:	20 91 ac 03 	lds	r18, 0x03AC
    1daa:	30 91 ad 03 	lds	r19, 0x03AD
    1dae:	40 91 ae 03 	lds	r20, 0x03AE
    1db2:	50 91 af 03 	lds	r21, 0x03AF
    1db6:	80 91 cc 03 	lds	r24, 0x03CC
    1dba:	90 91 cd 03 	lds	r25, 0x03CD
    1dbe:	a0 91 ce 03 	lds	r26, 0x03CE
    1dc2:	b0 91 cf 03 	lds	r27, 0x03CF
    1dc6:	82 17       	cp	r24, r18
    1dc8:	93 07       	cpc	r25, r19
    1dca:	a4 07       	cpc	r26, r20
    1dcc:	b5 07       	cpc	r27, r21
    1dce:	64 f0       	brlt	.+24     	; 0x1de8 <fork_step_count+0x542>
	{
		motor1_stop();
    1dd0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <motor1_stop>
        global_yon_motor1_running=FALSE;
    1dd4:	10 92 59 03 	sts	0x0359, r1
		motor1Step=0;
    1dd8:	10 92 cc 03 	sts	0x03CC, r1
    1ddc:	10 92 cd 03 	sts	0x03CD, r1
    1de0:	10 92 ce 03 	sts	0x03CE, r1
    1de4:	10 92 cf 03 	sts	0x03CF, r1
	 }
	 }

     if (global_yon_motor2_running==TRUE) {
    1de8:	80 91 c6 03 	lds	r24, 0x03C6
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	09 f5       	brne	.+66     	; 0x1e32 <fork_step_count+0x58c>
	 	if(motor2CommandStep<=motor2Step)  
    1df0:	20 91 0e 03 	lds	r18, 0x030E
    1df4:	30 91 0f 03 	lds	r19, 0x030F
    1df8:	40 91 10 03 	lds	r20, 0x0310
    1dfc:	50 91 11 03 	lds	r21, 0x0311
    1e00:	80 91 be 03 	lds	r24, 0x03BE
    1e04:	90 91 bf 03 	lds	r25, 0x03BF
    1e08:	a0 91 c0 03 	lds	r26, 0x03C0
    1e0c:	b0 91 c1 03 	lds	r27, 0x03C1
    1e10:	82 17       	cp	r24, r18
    1e12:	93 07       	cpc	r25, r19
    1e14:	a4 07       	cpc	r26, r20
    1e16:	b5 07       	cpc	r27, r21
    1e18:	64 f0       	brlt	.+24     	; 0x1e32 <fork_step_count+0x58c>
	{
		motor2_stop();
    1e1a:	0e 94 12 04 	call	0x824	; 0x824 <motor2_stop>
        global_yon_motor2_running=FALSE;
    1e1e:	10 92 c6 03 	sts	0x03C6, r1
		motor2Step=0;
    1e22:	10 92 be 03 	sts	0x03BE, r1
    1e26:	10 92 bf 03 	sts	0x03BF, r1
    1e2a:	10 92 c0 03 	sts	0x03C0, r1
    1e2e:	10 92 c1 03 	sts	0x03C1, r1
	 }
	 }

     if (global_yon_motor3_running==TRUE) {
    1e32:	80 91 bd 03 	lds	r24, 0x03BD
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	09 f5       	brne	.+66     	; 0x1e7c <fork_step_count+0x5d6>
		if(motor3CommandStep<=motor3Step)
    1e3a:	20 91 86 03 	lds	r18, 0x0386
    1e3e:	30 91 87 03 	lds	r19, 0x0387
    1e42:	40 91 88 03 	lds	r20, 0x0388
    1e46:	50 91 89 03 	lds	r21, 0x0389
    1e4a:	80 91 29 03 	lds	r24, 0x0329
    1e4e:	90 91 2a 03 	lds	r25, 0x032A
    1e52:	a0 91 2b 03 	lds	r26, 0x032B
    1e56:	b0 91 2c 03 	lds	r27, 0x032C
    1e5a:	82 17       	cp	r24, r18
    1e5c:	93 07       	cpc	r25, r19
    1e5e:	a4 07       	cpc	r26, r20
    1e60:	b5 07       	cpc	r27, r21
    1e62:	64 f0       	brlt	.+24     	; 0x1e7c <fork_step_count+0x5d6>
	{
		motor3_stop();
    1e64:	0e 94 45 05 	call	0xa8a	; 0xa8a <motor3_stop>
        global_yon_motor3_running=FALSE;
    1e68:	10 92 bd 03 	sts	0x03BD, r1
		motor3Step=0;
    1e6c:	10 92 29 03 	sts	0x0329, r1
    1e70:	10 92 2a 03 	sts	0x032A, r1
    1e74:	10 92 2b 03 	sts	0x032B, r1
    1e78:	10 92 2c 03 	sts	0x032C, r1
	 }
	 }

     if (global_yon_motor4_running==TRUE) {
    1e7c:	80 91 8d 03 	lds	r24, 0x038D
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	09 f5       	brne	.+66     	; 0x1ec6 <fork_step_count+0x620>
	 	if(motor4CommandStep<=motor4Step)
    1e84:	20 91 a8 03 	lds	r18, 0x03A8
    1e88:	30 91 a9 03 	lds	r19, 0x03A9
    1e8c:	40 91 aa 03 	lds	r20, 0x03AA
    1e90:	50 91 ab 03 	lds	r21, 0x03AB
    1e94:	80 91 c2 03 	lds	r24, 0x03C2
    1e98:	90 91 c3 03 	lds	r25, 0x03C3
    1e9c:	a0 91 c4 03 	lds	r26, 0x03C4
    1ea0:	b0 91 c5 03 	lds	r27, 0x03C5
    1ea4:	82 17       	cp	r24, r18
    1ea6:	93 07       	cpc	r25, r19
    1ea8:	a4 07       	cpc	r26, r20
    1eaa:	b5 07       	cpc	r27, r21
    1eac:	64 f0       	brlt	.+24     	; 0x1ec6 <fork_step_count+0x620>
	{
		motor4_stop();
    1eae:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <motor4_stop>
        global_yon_motor4_running=FALSE;
    1eb2:	10 92 8d 03 	sts	0x038D, r1
		motor4Step=0;
    1eb6:	10 92 c2 03 	sts	0x03C2, r1
    1eba:	10 92 c3 03 	sts	0x03C3, r1
    1ebe:	10 92 c4 03 	sts	0x03C4, r1
    1ec2:	10 92 c5 03 	sts	0x03C5, r1
	 }
	 }

     if (global_yon_motor5_running==TRUE) {
    1ec6:	80 91 37 03 	lds	r24, 0x0337
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	09 f5       	brne	.+66     	; 0x1f10 <fork_step_count+0x66a>
	 	if(motor5CommandStep<=motor5Step)
    1ece:	20 91 25 03 	lds	r18, 0x0325
    1ed2:	30 91 26 03 	lds	r19, 0x0326
    1ed6:	40 91 27 03 	lds	r20, 0x0327
    1eda:	50 91 28 03 	lds	r21, 0x0328
    1ede:	80 91 80 03 	lds	r24, 0x0380
    1ee2:	90 91 81 03 	lds	r25, 0x0381
    1ee6:	a0 91 82 03 	lds	r26, 0x0382
    1eea:	b0 91 83 03 	lds	r27, 0x0383
    1eee:	82 17       	cp	r24, r18
    1ef0:	93 07       	cpc	r25, r19
    1ef2:	a4 07       	cpc	r26, r20
    1ef4:	b5 07       	cpc	r27, r21
    1ef6:	64 f0       	brlt	.+24     	; 0x1f10 <fork_step_count+0x66a>
	{
		motor5_stop();
    1ef8:	0e 94 a2 06 	call	0xd44	; 0xd44 <motor5_stop>
        global_yon_motor5_running=FALSE;
    1efc:	10 92 37 03 	sts	0x0337, r1
		motor5Step=0;
    1f00:	10 92 80 03 	sts	0x0380, r1
    1f04:	10 92 81 03 	sts	0x0381, r1
    1f08:	10 92 82 03 	sts	0x0382, r1
    1f0c:	10 92 83 03 	sts	0x0383, r1
	 }
	 }

     if (global_yon_motor6_running==TRUE) {
    1f10:	80 91 c9 03 	lds	r24, 0x03C9
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	09 f5       	brne	.+66     	; 0x1f5a <fork_step_count+0x6b4>
	    if(motor6CommandStep<=motor6Step)
    1f18:	20 91 96 03 	lds	r18, 0x0396
    1f1c:	30 91 97 03 	lds	r19, 0x0397
    1f20:	40 91 98 03 	lds	r20, 0x0398
    1f24:	50 91 99 03 	lds	r21, 0x0399
    1f28:	80 91 4b 03 	lds	r24, 0x034B
    1f2c:	90 91 4c 03 	lds	r25, 0x034C
    1f30:	a0 91 4d 03 	lds	r26, 0x034D
    1f34:	b0 91 4e 03 	lds	r27, 0x034E
    1f38:	82 17       	cp	r24, r18
    1f3a:	93 07       	cpc	r25, r19
    1f3c:	a4 07       	cpc	r26, r20
    1f3e:	b5 07       	cpc	r27, r21
    1f40:	64 f0       	brlt	.+24     	; 0x1f5a <fork_step_count+0x6b4>
	{
		motor6_stop();
    1f42:	0e 94 4a 07 	call	0xe94	; 0xe94 <motor6_stop>
        global_yon_motor6_running=FALSE;
    1f46:	10 92 c9 03 	sts	0x03C9, r1
		motor6Step=0;
    1f4a:	10 92 4b 03 	sts	0x034B, r1
    1f4e:	10 92 4c 03 	sts	0x034C, r1
    1f52:	10 92 4d 03 	sts	0x034D, r1
    1f56:	10 92 4e 03 	sts	0x034E, r1
	 }
	 }
}
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	bf 90       	pop	r11
    1f6c:	af 90       	pop	r10
    1f6e:	08 95       	ret

00001f70 <fork_jiance>:

void fork_jiance()
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
	
	
	if(((PINK&0x01)==0&&Motor1Status==MOTOR_FORWARD)||((PINK&0x02)==0&&Motor1Status==MOTOR_BACKWARD))
    1f78:	e6 e0       	ldi	r30, 0x06	; 6
    1f7a:	f1 e0       	ldi	r31, 0x01	; 1
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	81 70       	andi	r24, 0x01	; 1
    1f84:	90 70       	andi	r25, 0x00	; 0
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	21 f4       	brne	.+8      	; 0x1f92 <fork_jiance+0x22>
    1f8a:	80 91 9a 03 	lds	r24, 0x039A
    1f8e:	81 33       	cpi	r24, 0x31	; 49
    1f90:	69 f0       	breq	.+26     	; 0x1fac <fork_jiance+0x3c>
    1f92:	e6 e0       	ldi	r30, 0x06	; 6
    1f94:	f1 e0       	ldi	r31, 0x01	; 1
    1f96:	80 81       	ld	r24, Z
    1f98:	88 2f       	mov	r24, r24
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	82 70       	andi	r24, 0x02	; 2
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	81 f4       	brne	.+32     	; 0x1fc4 <fork_jiance+0x54>
    1fa4:	80 91 9a 03 	lds	r24, 0x039A
    1fa8:	80 33       	cpi	r24, 0x30	; 48
    1faa:	61 f4       	brne	.+24     	; 0x1fc4 <fork_jiance+0x54>
	{
		motor1_stop();
    1fac:	0e 94 63 03 	call	0x6c6	; 0x6c6 <motor1_stop>
		
        global_yon_motor1_running=FALSE;
    1fb0:	10 92 59 03 	sts	0x0359, r1
      
		motor1Step=0;
    1fb4:	10 92 cc 03 	sts	0x03CC, r1
    1fb8:	10 92 cd 03 	sts	0x03CD, r1
    1fbc:	10 92 ce 03 	sts	0x03CE, r1
    1fc0:	10 92 cf 03 	sts	0x03CF, r1
		
	}
	if(((PINK&0x04)==0&&Motor2Status==MOTOR_FORWARD)||((PINK&0x08)==0&&Motor2Status==MOTOR_BACKWARD))
    1fc4:	e6 e0       	ldi	r30, 0x06	; 6
    1fc6:	f1 e0       	ldi	r31, 0x01	; 1
    1fc8:	80 81       	ld	r24, Z
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	84 70       	andi	r24, 0x04	; 4
    1fd0:	90 70       	andi	r25, 0x00	; 0
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <fork_jiance+0x6e>
    1fd6:	80 91 8c 03 	lds	r24, 0x038C
    1fda:	81 33       	cpi	r24, 0x31	; 49
    1fdc:	69 f0       	breq	.+26     	; 0x1ff8 <fork_jiance+0x88>
    1fde:	e6 e0       	ldi	r30, 0x06	; 6
    1fe0:	f1 e0       	ldi	r31, 0x01	; 1
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	88 70       	andi	r24, 0x08	; 8
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	81 f4       	brne	.+32     	; 0x2010 <fork_jiance+0xa0>
    1ff0:	80 91 8c 03 	lds	r24, 0x038C
    1ff4:	80 33       	cpi	r24, 0x30	; 48
    1ff6:	61 f4       	brne	.+24     	; 0x2010 <fork_jiance+0xa0>
	{
		motor2_stop();
    1ff8:	0e 94 12 04 	call	0x824	; 0x824 <motor2_stop>
        global_yon_motor2_running=FALSE;
    1ffc:	10 92 c6 03 	sts	0x03C6, r1
		motor2Step=0;
    2000:	10 92 be 03 	sts	0x03BE, r1
    2004:	10 92 bf 03 	sts	0x03BF, r1
    2008:	10 92 c0 03 	sts	0x03C0, r1
    200c:	10 92 c1 03 	sts	0x03C1, r1
	
	}

	if(((PINK&0x10)==0&&Motor4Status==MOTOR_FORWARD)||((PINK&0x20)==0&&Motor4Status==MOTOR_BACKWARD))
    2010:	e6 e0       	ldi	r30, 0x06	; 6
    2012:	f1 e0       	ldi	r31, 0x01	; 1
    2014:	80 81       	ld	r24, Z
    2016:	88 2f       	mov	r24, r24
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	80 71       	andi	r24, 0x10	; 16
    201c:	90 70       	andi	r25, 0x00	; 0
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	21 f4       	brne	.+8      	; 0x202a <fork_jiance+0xba>
    2022:	80 91 3d 03 	lds	r24, 0x033D
    2026:	81 33       	cpi	r24, 0x31	; 49
    2028:	69 f0       	breq	.+26     	; 0x2044 <fork_jiance+0xd4>
    202a:	e6 e0       	ldi	r30, 0x06	; 6
    202c:	f1 e0       	ldi	r31, 0x01	; 1
    202e:	80 81       	ld	r24, Z
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	80 72       	andi	r24, 0x20	; 32
    2036:	90 70       	andi	r25, 0x00	; 0
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	81 f4       	brne	.+32     	; 0x205c <fork_jiance+0xec>
    203c:	80 91 3d 03 	lds	r24, 0x033D
    2040:	80 33       	cpi	r24, 0x30	; 48
    2042:	61 f4       	brne	.+24     	; 0x205c <fork_jiance+0xec>
	{
		motor3_stop();
    2044:	0e 94 45 05 	call	0xa8a	; 0xa8a <motor3_stop>
        global_yon_motor3_running=FALSE;
    2048:	10 92 bd 03 	sts	0x03BD, r1
		motor3Step=0;
    204c:	10 92 29 03 	sts	0x0329, r1
    2050:	10 92 2a 03 	sts	0x032A, r1
    2054:	10 92 2b 03 	sts	0x032B, r1
    2058:	10 92 2c 03 	sts	0x032C, r1
        global_yon_motor4_running=FALSE;
		motor4Step=0;
	}*/
	

}
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <USART0_Transmit_Str>:

void USART0_Transmit_Str(char *data)

{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <USART0_Transmit_Str+0x6>
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	0b c0       	rjmp	.+22     	; 0x2088 <USART0_Transmit_Str+0x26>
  while(*data!='\0')
     USART0_Transmit(*data++);
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	20 81       	ld	r18, Z
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	82 2f       	mov	r24, r18
    2084:	0e 94 b7 02 	call	0x56e	; 0x56e <USART0_Transmit>
}

void USART0_Transmit_Str(char *data)

{
  while(*data!='\0')
    2088:	e9 81       	ldd	r30, Y+1	; 0x01
    208a:	fa 81       	ldd	r31, Y+2	; 0x02
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	81 f7       	brne	.-32     	; 0x2072 <USART0_Transmit_Str+0x10>
     USART0_Transmit(*data++);
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <main>:
int main()
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	2a 97       	sbiw	r28, 0x0a	; 10
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
 
	init_device();
    20b0:	0e 94 40 08 	call	0x1080	; 0x1080 <init_device>
//	motor3_start(motor_command.MotorDirection);
	char  des[10];
	while(1)
	{
//	
	    fork_uart0_command();               //´¦ÀíÃüÁî
    20b4:	0e 94 6e 09 	call	0x12dc	; 0x12dc <fork_uart0_command>
		fork_uart1_command();
    20b8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <fork_uart1_command>
		fork_step_count();					//¼ì²â²½Êý£¬¼õËÙ£¬Í£Ö¹
    20bc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <fork_step_count>
		fork_jiance();                      //ÏÞÎ»¿ª¹Ø¼ì²â
    20c0:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <fork_jiance>
    20c4:	f7 cf       	rjmp	.-18     	; 0x20b4 <main+0x18>

000020c6 <test>:
	}
}


void test(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	6c 97       	sbiw	r28, 0x1c	; 28
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61

	global_yon_motor5_running=TRUE;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 37 03 	sts	0x0337, r24
	motor5_start('1');
    20e0:	81 e3       	ldi	r24, 0x31	; 49
    20e2:	0e 94 43 06 	call	0xc86	; 0xc86 <motor5_start>
	Motor5Status='1';
    20e6:	81 e3       	ldi	r24, 0x31	; 49
    20e8:	80 93 5c 03 	sts	0x035C, r24
	motor5CommandStep=200000;
    20ec:	80 e4       	ldi	r24, 0x40	; 64
    20ee:	9d e0       	ldi	r25, 0x0D	; 13
    20f0:	a3 e0       	ldi	r26, 0x03	; 3
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	80 93 25 03 	sts	0x0325, r24
    20f8:	90 93 26 03 	sts	0x0326, r25
    20fc:	a0 93 27 03 	sts	0x0327, r26
    2100:	b0 93 28 03 	sts	0x0328, r27
    2104:	02 c0       	rjmp	.+4      	; 0x210a <test+0x44>
  
    while (global_yon_motor5_running==TRUE) 
	{
		fork_step_count();					//¼ì²â²½Êý£¬¼õËÙ£¬Í£Ö¹
    2106:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <fork_step_count>
	global_yon_motor5_running=TRUE;
	motor5_start('1');
	Motor5Status='1';
	motor5CommandStep=200000;
  
    while (global_yon_motor5_running==TRUE) 
    210a:	80 91 37 03 	lds	r24, 0x0337
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	d1 f3       	breq	.-12     	; 0x2106 <test+0x40>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a8 ec       	ldi	r26, 0xC8	; 200
    2118:	b2 e4       	ldi	r27, 0x42	; 66
    211a:	89 8f       	std	Y+25, r24	; 0x19
    211c:	9a 8f       	std	Y+26, r25	; 0x1a
    211e:	ab 8f       	std	Y+27, r26	; 0x1b
    2120:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	2d ec       	ldi	r18, 0xCD	; 205
    212c:	3c ec       	ldi	r19, 0xCC	; 204
    212e:	4c e2       	ldi	r20, 0x2C	; 44
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8d 8b       	std	Y+21, r24	; 0x15
    213c:	9e 8b       	std	Y+22, r25	; 0x16
    213e:	af 8b       	std	Y+23, r26	; 0x17
    2140:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 c2 14 	call	0x2984	; 0x2984 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <test+0x9e>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <test+0x11c>
	else if (__tmp > 65535)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <test+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	69 8d       	ldd	r22, Y+25	; 0x19
    217e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <test+0xfe>
    21a6:	84 e1       	ldi	r24, 0x14	; 20
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <test+0xec>
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <test+0xe0>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <test+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	98 89       	ldd	r25, Y+16	; 0x10
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <test+0x128>
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
	
	} 
    
	_delay_ms(100);    
  
	global_yon_motor5_running=TRUE;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	80 93 37 03 	sts	0x0337, r24
	motor5_start('0');
    21fc:	80 e3       	ldi	r24, 0x30	; 48
    21fe:	0e 94 43 06 	call	0xc86	; 0xc86 <motor5_start>
	Motor5Status='1';
    2202:	81 e3       	ldi	r24, 0x31	; 49
    2204:	80 93 5c 03 	sts	0x035C, r24
	motor5CommandStep=200000;
    2208:	80 e4       	ldi	r24, 0x40	; 64
    220a:	9d e0       	ldi	r25, 0x0D	; 13
    220c:	a3 e0       	ldi	r26, 0x03	; 3
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	80 93 25 03 	sts	0x0325, r24
    2214:	90 93 26 03 	sts	0x0326, r25
    2218:	a0 93 27 03 	sts	0x0327, r26
    221c:	b0 93 28 03 	sts	0x0328, r27
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <__stack+0x27>
    while (global_yon_motor5_running==TRUE) 
	{
		fork_step_count();					//¼ì²â²½Êý£¬¼õËÙ£¬Í£Ö¹
    2222:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <fork_step_count>
  
	global_yon_motor5_running=TRUE;
	motor5_start('0');
	Motor5Status='1';
	motor5CommandStep=200000;
    while (global_yon_motor5_running==TRUE) 
    2226:	80 91 37 03 	lds	r24, 0x0337
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	d1 f3       	breq	.-12     	; 0x2222 <__stack+0x23>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a8 ec       	ldi	r26, 0xC8	; 200
    2234:	b2 e4       	ldi	r27, 0x42	; 66
    2236:	8b 87       	std	Y+11, r24	; 0x0b
    2238:	9c 87       	std	Y+12, r25	; 0x0c
    223a:	ad 87       	std	Y+13, r26	; 0x0d
    223c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2240:	7c 85       	ldd	r23, Y+12	; 0x0c
    2242:	8d 85       	ldd	r24, Y+13	; 0x0d
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	2d ec       	ldi	r18, 0xCD	; 205
    2248:	3c ec       	ldi	r19, 0xCC	; 204
    224a:	4c e2       	ldi	r20, 0x2C	; 44
    224c:	55 e4       	ldi	r21, 0x45	; 69
    224e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8f 83       	std	Y+7, r24	; 0x07
    2258:	98 87       	std	Y+8, r25	; 0x08
    225a:	a9 87       	std	Y+9, r26	; 0x09
    225c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225e:	6f 81       	ldd	r22, Y+7	; 0x07
    2260:	78 85       	ldd	r23, Y+8	; 0x08
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 c2 14 	call	0x2984	; 0x2984 <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <__stack+0x81>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <__stack+0xff>
	else if (__tmp > 65535)
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <__stack+0xeb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <__stack+0xe1>
    22c2:	84 e1       	ldi	r24, 0x14	; 20
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <__stack+0xcf>
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <__stack+0xc3>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <__stack+0x113>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	0e 94 92 11 	call	0x2324	; 0x2324 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <__stack+0x10b>
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
	
	} 
    _delay_ms(100);


}
    2312:	6c 96       	adiw	r28, 0x1c	; 28
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <__fixunssfsi>:
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	7b 01       	movw	r14, r22
    232e:	8c 01       	movw	r16, r24
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	5f e4       	ldi	r21, 0x4F	; 79
    2338:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    233c:	88 23       	and	r24, r24
    233e:	8c f0       	brlt	.+34     	; 0x2362 <__fixunssfsi+0x3e>
    2340:	c8 01       	movw	r24, r16
    2342:	b7 01       	movw	r22, r14
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	5f e4       	ldi	r21, 0x4F	; 79
    234c:	0e 94 0a 13 	call	0x2614	; 0x2614 <__subsf3>
    2350:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__fixsfsi>
    2354:	9b 01       	movw	r18, r22
    2356:	ac 01       	movw	r20, r24
    2358:	20 50       	subi	r18, 0x00	; 0
    235a:	30 40       	sbci	r19, 0x00	; 0
    235c:	40 40       	sbci	r20, 0x00	; 0
    235e:	50 48       	sbci	r21, 0x80	; 128
    2360:	06 c0       	rjmp	.+12     	; 0x236e <__fixunssfsi+0x4a>
    2362:	c8 01       	movw	r24, r16
    2364:	b7 01       	movw	r22, r14
    2366:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__fixsfsi>
    236a:	9b 01       	movw	r18, r22
    236c:	ac 01       	movw	r20, r24
    236e:	b9 01       	movw	r22, r18
    2370:	ca 01       	movw	r24, r20
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	08 95       	ret

0000237c <_fpadd_parts>:
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e4 ec       	ldi	r30, 0xC4	; 196
    2382:	f1 e1       	ldi	r31, 0x11	; 17
    2384:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__>
    2388:	dc 01       	movw	r26, r24
    238a:	2b 01       	movw	r4, r22
    238c:	fa 01       	movw	r30, r20
    238e:	9c 91       	ld	r25, X
    2390:	92 30       	cpi	r25, 0x02	; 2
    2392:	08 f4       	brcc	.+2      	; 0x2396 <_fpadd_parts+0x1a>
    2394:	39 c1       	rjmp	.+626    	; 0x2608 <_fpadd_parts+0x28c>
    2396:	eb 01       	movw	r28, r22
    2398:	88 81       	ld	r24, Y
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <_fpadd_parts+0x24>
    239e:	33 c1       	rjmp	.+614    	; 0x2606 <_fpadd_parts+0x28a>
    23a0:	94 30       	cpi	r25, 0x04	; 4
    23a2:	69 f4       	brne	.+26     	; 0x23be <_fpadd_parts+0x42>
    23a4:	84 30       	cpi	r24, 0x04	; 4
    23a6:	09 f0       	breq	.+2      	; 0x23aa <_fpadd_parts+0x2e>
    23a8:	2f c1       	rjmp	.+606    	; 0x2608 <_fpadd_parts+0x28c>
    23aa:	11 96       	adiw	r26, 0x01	; 1
    23ac:	9c 91       	ld	r25, X
    23ae:	11 97       	sbiw	r26, 0x01	; 1
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	98 17       	cp	r25, r24
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <_fpadd_parts+0x3c>
    23b6:	28 c1       	rjmp	.+592    	; 0x2608 <_fpadd_parts+0x28c>
    23b8:	a4 e0       	ldi	r26, 0x04	; 4
    23ba:	b2 e0       	ldi	r27, 0x02	; 2
    23bc:	25 c1       	rjmp	.+586    	; 0x2608 <_fpadd_parts+0x28c>
    23be:	84 30       	cpi	r24, 0x04	; 4
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <_fpadd_parts+0x48>
    23c2:	21 c1       	rjmp	.+578    	; 0x2606 <_fpadd_parts+0x28a>
    23c4:	82 30       	cpi	r24, 0x02	; 2
    23c6:	a9 f4       	brne	.+42     	; 0x23f2 <_fpadd_parts+0x76>
    23c8:	92 30       	cpi	r25, 0x02	; 2
    23ca:	09 f0       	breq	.+2      	; 0x23ce <_fpadd_parts+0x52>
    23cc:	1d c1       	rjmp	.+570    	; 0x2608 <_fpadd_parts+0x28c>
    23ce:	9a 01       	movw	r18, r20
    23d0:	ad 01       	movw	r20, r26
    23d2:	88 e0       	ldi	r24, 0x08	; 8
    23d4:	ea 01       	movw	r28, r20
    23d6:	09 90       	ld	r0, Y+
    23d8:	ae 01       	movw	r20, r28
    23da:	e9 01       	movw	r28, r18
    23dc:	09 92       	st	Y+, r0
    23de:	9e 01       	movw	r18, r28
    23e0:	81 50       	subi	r24, 0x01	; 1
    23e2:	c1 f7       	brne	.-16     	; 0x23d4 <_fpadd_parts+0x58>
    23e4:	e2 01       	movw	r28, r4
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	11 96       	adiw	r26, 0x01	; 1
    23ea:	9c 91       	ld	r25, X
    23ec:	89 23       	and	r24, r25
    23ee:	81 83       	std	Z+1, r24	; 0x01
    23f0:	08 c1       	rjmp	.+528    	; 0x2602 <_fpadd_parts+0x286>
    23f2:	92 30       	cpi	r25, 0x02	; 2
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <_fpadd_parts+0x7c>
    23f6:	07 c1       	rjmp	.+526    	; 0x2606 <_fpadd_parts+0x28a>
    23f8:	12 96       	adiw	r26, 0x02	; 2
    23fa:	2d 90       	ld	r2, X+
    23fc:	3c 90       	ld	r3, X
    23fe:	13 97       	sbiw	r26, 0x03	; 3
    2400:	eb 01       	movw	r28, r22
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	14 96       	adiw	r26, 0x04	; 4
    2408:	ad 90       	ld	r10, X+
    240a:	bd 90       	ld	r11, X+
    240c:	cd 90       	ld	r12, X+
    240e:	dc 90       	ld	r13, X
    2410:	17 97       	sbiw	r26, 0x07	; 7
    2412:	ec 80       	ldd	r14, Y+4	; 0x04
    2414:	fd 80       	ldd	r15, Y+5	; 0x05
    2416:	0e 81       	ldd	r16, Y+6	; 0x06
    2418:	1f 81       	ldd	r17, Y+7	; 0x07
    241a:	91 01       	movw	r18, r2
    241c:	28 1b       	sub	r18, r24
    241e:	39 0b       	sbc	r19, r25
    2420:	b9 01       	movw	r22, r18
    2422:	37 ff       	sbrs	r19, 7
    2424:	04 c0       	rjmp	.+8      	; 0x242e <_fpadd_parts+0xb2>
    2426:	66 27       	eor	r22, r22
    2428:	77 27       	eor	r23, r23
    242a:	62 1b       	sub	r22, r18
    242c:	73 0b       	sbc	r23, r19
    242e:	60 32       	cpi	r22, 0x20	; 32
    2430:	71 05       	cpc	r23, r1
    2432:	0c f0       	brlt	.+2      	; 0x2436 <_fpadd_parts+0xba>
    2434:	61 c0       	rjmp	.+194    	; 0x24f8 <_fpadd_parts+0x17c>
    2436:	12 16       	cp	r1, r18
    2438:	13 06       	cpc	r1, r19
    243a:	6c f5       	brge	.+90     	; 0x2496 <_fpadd_parts+0x11a>
    243c:	37 01       	movw	r6, r14
    243e:	48 01       	movw	r8, r16
    2440:	06 2e       	mov	r0, r22
    2442:	04 c0       	rjmp	.+8      	; 0x244c <_fpadd_parts+0xd0>
    2444:	96 94       	lsr	r9
    2446:	87 94       	ror	r8
    2448:	77 94       	ror	r7
    244a:	67 94       	ror	r6
    244c:	0a 94       	dec	r0
    244e:	d2 f7       	brpl	.-12     	; 0x2444 <_fpadd_parts+0xc8>
    2450:	21 e0       	ldi	r18, 0x01	; 1
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <_fpadd_parts+0xe6>
    245a:	22 0f       	add	r18, r18
    245c:	33 1f       	adc	r19, r19
    245e:	44 1f       	adc	r20, r20
    2460:	55 1f       	adc	r21, r21
    2462:	6a 95       	dec	r22
    2464:	d2 f7       	brpl	.-12     	; 0x245a <_fpadd_parts+0xde>
    2466:	21 50       	subi	r18, 0x01	; 1
    2468:	30 40       	sbci	r19, 0x00	; 0
    246a:	40 40       	sbci	r20, 0x00	; 0
    246c:	50 40       	sbci	r21, 0x00	; 0
    246e:	2e 21       	and	r18, r14
    2470:	3f 21       	and	r19, r15
    2472:	40 23       	and	r20, r16
    2474:	51 23       	and	r21, r17
    2476:	21 15       	cp	r18, r1
    2478:	31 05       	cpc	r19, r1
    247a:	41 05       	cpc	r20, r1
    247c:	51 05       	cpc	r21, r1
    247e:	21 f0       	breq	.+8      	; 0x2488 <_fpadd_parts+0x10c>
    2480:	21 e0       	ldi	r18, 0x01	; 1
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	79 01       	movw	r14, r18
    248a:	8a 01       	movw	r16, r20
    248c:	e6 28       	or	r14, r6
    248e:	f7 28       	or	r15, r7
    2490:	08 29       	or	r16, r8
    2492:	19 29       	or	r17, r9
    2494:	3c c0       	rjmp	.+120    	; 0x250e <_fpadd_parts+0x192>
    2496:	23 2b       	or	r18, r19
    2498:	d1 f1       	breq	.+116    	; 0x250e <_fpadd_parts+0x192>
    249a:	26 0e       	add	r2, r22
    249c:	37 1e       	adc	r3, r23
    249e:	35 01       	movw	r6, r10
    24a0:	46 01       	movw	r8, r12
    24a2:	06 2e       	mov	r0, r22
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <_fpadd_parts+0x132>
    24a6:	96 94       	lsr	r9
    24a8:	87 94       	ror	r8
    24aa:	77 94       	ror	r7
    24ac:	67 94       	ror	r6
    24ae:	0a 94       	dec	r0
    24b0:	d2 f7       	brpl	.-12     	; 0x24a6 <_fpadd_parts+0x12a>
    24b2:	21 e0       	ldi	r18, 0x01	; 1
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <_fpadd_parts+0x148>
    24bc:	22 0f       	add	r18, r18
    24be:	33 1f       	adc	r19, r19
    24c0:	44 1f       	adc	r20, r20
    24c2:	55 1f       	adc	r21, r21
    24c4:	6a 95       	dec	r22
    24c6:	d2 f7       	brpl	.-12     	; 0x24bc <_fpadd_parts+0x140>
    24c8:	21 50       	subi	r18, 0x01	; 1
    24ca:	30 40       	sbci	r19, 0x00	; 0
    24cc:	40 40       	sbci	r20, 0x00	; 0
    24ce:	50 40       	sbci	r21, 0x00	; 0
    24d0:	2a 21       	and	r18, r10
    24d2:	3b 21       	and	r19, r11
    24d4:	4c 21       	and	r20, r12
    24d6:	5d 21       	and	r21, r13
    24d8:	21 15       	cp	r18, r1
    24da:	31 05       	cpc	r19, r1
    24dc:	41 05       	cpc	r20, r1
    24de:	51 05       	cpc	r21, r1
    24e0:	21 f0       	breq	.+8      	; 0x24ea <_fpadd_parts+0x16e>
    24e2:	21 e0       	ldi	r18, 0x01	; 1
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	59 01       	movw	r10, r18
    24ec:	6a 01       	movw	r12, r20
    24ee:	a6 28       	or	r10, r6
    24f0:	b7 28       	or	r11, r7
    24f2:	c8 28       	or	r12, r8
    24f4:	d9 28       	or	r13, r9
    24f6:	0b c0       	rjmp	.+22     	; 0x250e <_fpadd_parts+0x192>
    24f8:	82 15       	cp	r24, r2
    24fa:	93 05       	cpc	r25, r3
    24fc:	2c f0       	brlt	.+10     	; 0x2508 <_fpadd_parts+0x18c>
    24fe:	1c 01       	movw	r2, r24
    2500:	aa 24       	eor	r10, r10
    2502:	bb 24       	eor	r11, r11
    2504:	65 01       	movw	r12, r10
    2506:	03 c0       	rjmp	.+6      	; 0x250e <_fpadd_parts+0x192>
    2508:	ee 24       	eor	r14, r14
    250a:	ff 24       	eor	r15, r15
    250c:	87 01       	movw	r16, r14
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	9c 91       	ld	r25, X
    2512:	d2 01       	movw	r26, r4
    2514:	11 96       	adiw	r26, 0x01	; 1
    2516:	8c 91       	ld	r24, X
    2518:	98 17       	cp	r25, r24
    251a:	09 f4       	brne	.+2      	; 0x251e <_fpadd_parts+0x1a2>
    251c:	45 c0       	rjmp	.+138    	; 0x25a8 <_fpadd_parts+0x22c>
    251e:	99 23       	and	r25, r25
    2520:	39 f0       	breq	.+14     	; 0x2530 <_fpadd_parts+0x1b4>
    2522:	a8 01       	movw	r20, r16
    2524:	97 01       	movw	r18, r14
    2526:	2a 19       	sub	r18, r10
    2528:	3b 09       	sbc	r19, r11
    252a:	4c 09       	sbc	r20, r12
    252c:	5d 09       	sbc	r21, r13
    252e:	06 c0       	rjmp	.+12     	; 0x253c <_fpadd_parts+0x1c0>
    2530:	a6 01       	movw	r20, r12
    2532:	95 01       	movw	r18, r10
    2534:	2e 19       	sub	r18, r14
    2536:	3f 09       	sbc	r19, r15
    2538:	40 0b       	sbc	r20, r16
    253a:	51 0b       	sbc	r21, r17
    253c:	57 fd       	sbrc	r21, 7
    253e:	08 c0       	rjmp	.+16     	; 0x2550 <_fpadd_parts+0x1d4>
    2540:	11 82       	std	Z+1, r1	; 0x01
    2542:	33 82       	std	Z+3, r3	; 0x03
    2544:	22 82       	std	Z+2, r2	; 0x02
    2546:	24 83       	std	Z+4, r18	; 0x04
    2548:	35 83       	std	Z+5, r19	; 0x05
    254a:	46 83       	std	Z+6, r20	; 0x06
    254c:	57 83       	std	Z+7, r21	; 0x07
    254e:	1d c0       	rjmp	.+58     	; 0x258a <_fpadd_parts+0x20e>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	81 83       	std	Z+1, r24	; 0x01
    2554:	33 82       	std	Z+3, r3	; 0x03
    2556:	22 82       	std	Z+2, r2	; 0x02
    2558:	88 27       	eor	r24, r24
    255a:	99 27       	eor	r25, r25
    255c:	dc 01       	movw	r26, r24
    255e:	82 1b       	sub	r24, r18
    2560:	93 0b       	sbc	r25, r19
    2562:	a4 0b       	sbc	r26, r20
    2564:	b5 0b       	sbc	r27, r21
    2566:	84 83       	std	Z+4, r24	; 0x04
    2568:	95 83       	std	Z+5, r25	; 0x05
    256a:	a6 83       	std	Z+6, r26	; 0x06
    256c:	b7 83       	std	Z+7, r27	; 0x07
    256e:	0d c0       	rjmp	.+26     	; 0x258a <_fpadd_parts+0x20e>
    2570:	22 0f       	add	r18, r18
    2572:	33 1f       	adc	r19, r19
    2574:	44 1f       	adc	r20, r20
    2576:	55 1f       	adc	r21, r21
    2578:	24 83       	std	Z+4, r18	; 0x04
    257a:	35 83       	std	Z+5, r19	; 0x05
    257c:	46 83       	std	Z+6, r20	; 0x06
    257e:	57 83       	std	Z+7, r21	; 0x07
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	93 83       	std	Z+3, r25	; 0x03
    2588:	82 83       	std	Z+2, r24	; 0x02
    258a:	24 81       	ldd	r18, Z+4	; 0x04
    258c:	35 81       	ldd	r19, Z+5	; 0x05
    258e:	46 81       	ldd	r20, Z+6	; 0x06
    2590:	57 81       	ldd	r21, Z+7	; 0x07
    2592:	da 01       	movw	r26, r20
    2594:	c9 01       	movw	r24, r18
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	a1 09       	sbc	r26, r1
    259a:	b1 09       	sbc	r27, r1
    259c:	8f 5f       	subi	r24, 0xFF	; 255
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	af 4f       	sbci	r26, 0xFF	; 255
    25a2:	bf 43       	sbci	r27, 0x3F	; 63
    25a4:	28 f3       	brcs	.-54     	; 0x2570 <_fpadd_parts+0x1f4>
    25a6:	0b c0       	rjmp	.+22     	; 0x25be <_fpadd_parts+0x242>
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	33 82       	std	Z+3, r3	; 0x03
    25ac:	22 82       	std	Z+2, r2	; 0x02
    25ae:	ea 0c       	add	r14, r10
    25b0:	fb 1c       	adc	r15, r11
    25b2:	0c 1d       	adc	r16, r12
    25b4:	1d 1d       	adc	r17, r13
    25b6:	e4 82       	std	Z+4, r14	; 0x04
    25b8:	f5 82       	std	Z+5, r15	; 0x05
    25ba:	06 83       	std	Z+6, r16	; 0x06
    25bc:	17 83       	std	Z+7, r17	; 0x07
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	80 83       	st	Z, r24
    25c2:	24 81       	ldd	r18, Z+4	; 0x04
    25c4:	35 81       	ldd	r19, Z+5	; 0x05
    25c6:	46 81       	ldd	r20, Z+6	; 0x06
    25c8:	57 81       	ldd	r21, Z+7	; 0x07
    25ca:	57 ff       	sbrs	r21, 7
    25cc:	1a c0       	rjmp	.+52     	; 0x2602 <_fpadd_parts+0x286>
    25ce:	c9 01       	movw	r24, r18
    25d0:	aa 27       	eor	r26, r26
    25d2:	97 fd       	sbrc	r25, 7
    25d4:	a0 95       	com	r26
    25d6:	ba 2f       	mov	r27, r26
    25d8:	81 70       	andi	r24, 0x01	; 1
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	a0 70       	andi	r26, 0x00	; 0
    25de:	b0 70       	andi	r27, 0x00	; 0
    25e0:	56 95       	lsr	r21
    25e2:	47 95       	ror	r20
    25e4:	37 95       	ror	r19
    25e6:	27 95       	ror	r18
    25e8:	82 2b       	or	r24, r18
    25ea:	93 2b       	or	r25, r19
    25ec:	a4 2b       	or	r26, r20
    25ee:	b5 2b       	or	r27, r21
    25f0:	84 83       	std	Z+4, r24	; 0x04
    25f2:	95 83       	std	Z+5, r25	; 0x05
    25f4:	a6 83       	std	Z+6, r26	; 0x06
    25f6:	b7 83       	std	Z+7, r27	; 0x07
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	93 83       	std	Z+3, r25	; 0x03
    2600:	82 83       	std	Z+2, r24	; 0x02
    2602:	df 01       	movw	r26, r30
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <_fpadd_parts+0x28c>
    2606:	d2 01       	movw	r26, r4
    2608:	cd 01       	movw	r24, r26
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	e2 e1       	ldi	r30, 0x12	; 18
    2610:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__>

00002614 <__subsf3>:
    2614:	a0 e2       	ldi	r26, 0x20	; 32
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e0 e1       	ldi	r30, 0x10	; 16
    261a:	f3 e1       	ldi	r31, 0x13	; 19
    261c:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
    2620:	69 83       	std	Y+1, r22	; 0x01
    2622:	7a 83       	std	Y+2, r23	; 0x02
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	9c 83       	std	Y+4, r25	; 0x04
    2628:	2d 83       	std	Y+5, r18	; 0x05
    262a:	3e 83       	std	Y+6, r19	; 0x06
    262c:	4f 83       	std	Y+7, r20	; 0x07
    262e:	58 87       	std	Y+8, r21	; 0x08
    2630:	e9 e0       	ldi	r30, 0x09	; 9
    2632:	ee 2e       	mov	r14, r30
    2634:	f1 2c       	mov	r15, r1
    2636:	ec 0e       	add	r14, r28
    2638:	fd 1e       	adc	r15, r29
    263a:	ce 01       	movw	r24, r28
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	b7 01       	movw	r22, r14
    2640:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2644:	8e 01       	movw	r16, r28
    2646:	0f 5e       	subi	r16, 0xEF	; 239
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	ce 01       	movw	r24, r28
    264c:	05 96       	adiw	r24, 0x05	; 5
    264e:	b8 01       	movw	r22, r16
    2650:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2654:	8a 89       	ldd	r24, Y+18	; 0x12
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	89 27       	eor	r24, r25
    265a:	8a 8b       	std	Y+18, r24	; 0x12
    265c:	c7 01       	movw	r24, r14
    265e:	b8 01       	movw	r22, r16
    2660:	ae 01       	movw	r20, r28
    2662:	47 5e       	subi	r20, 0xE7	; 231
    2664:	5f 4f       	sbci	r21, 0xFF	; 255
    2666:	0e 94 be 11 	call	0x237c	; 0x237c <_fpadd_parts>
    266a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__pack_f>
    266e:	a0 96       	adiw	r28, 0x20	; 32
    2670:	e6 e0       	ldi	r30, 0x06	; 6
    2672:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

00002676 <__addsf3>:
    2676:	a0 e2       	ldi	r26, 0x20	; 32
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e1 e4       	ldi	r30, 0x41	; 65
    267c:	f3 e1       	ldi	r31, 0x13	; 19
    267e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
    2682:	69 83       	std	Y+1, r22	; 0x01
    2684:	7a 83       	std	Y+2, r23	; 0x02
    2686:	8b 83       	std	Y+3, r24	; 0x03
    2688:	9c 83       	std	Y+4, r25	; 0x04
    268a:	2d 83       	std	Y+5, r18	; 0x05
    268c:	3e 83       	std	Y+6, r19	; 0x06
    268e:	4f 83       	std	Y+7, r20	; 0x07
    2690:	58 87       	std	Y+8, r21	; 0x08
    2692:	f9 e0       	ldi	r31, 0x09	; 9
    2694:	ef 2e       	mov	r14, r31
    2696:	f1 2c       	mov	r15, r1
    2698:	ec 0e       	add	r14, r28
    269a:	fd 1e       	adc	r15, r29
    269c:	ce 01       	movw	r24, r28
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	b7 01       	movw	r22, r14
    26a2:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    26a6:	8e 01       	movw	r16, r28
    26a8:	0f 5e       	subi	r16, 0xEF	; 239
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	ce 01       	movw	r24, r28
    26ae:	05 96       	adiw	r24, 0x05	; 5
    26b0:	b8 01       	movw	r22, r16
    26b2:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    26b6:	c7 01       	movw	r24, r14
    26b8:	b8 01       	movw	r22, r16
    26ba:	ae 01       	movw	r20, r28
    26bc:	47 5e       	subi	r20, 0xE7	; 231
    26be:	5f 4f       	sbci	r21, 0xFF	; 255
    26c0:	0e 94 be 11 	call	0x237c	; 0x237c <_fpadd_parts>
    26c4:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__pack_f>
    26c8:	a0 96       	adiw	r28, 0x20	; 32
    26ca:	e6 e0       	ldi	r30, 0x06	; 6
    26cc:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

000026d0 <__mulsf3>:
    26d0:	a0 e2       	ldi	r26, 0x20	; 32
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ee e6       	ldi	r30, 0x6E	; 110
    26d6:	f3 e1       	ldi	r31, 0x13	; 19
    26d8:	0c 94 de 17 	jmp	0x2fbc	; 0x2fbc <__prologue_saves__>
    26dc:	69 83       	std	Y+1, r22	; 0x01
    26de:	7a 83       	std	Y+2, r23	; 0x02
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	2d 83       	std	Y+5, r18	; 0x05
    26e6:	3e 83       	std	Y+6, r19	; 0x06
    26e8:	4f 83       	std	Y+7, r20	; 0x07
    26ea:	58 87       	std	Y+8, r21	; 0x08
    26ec:	ce 01       	movw	r24, r28
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	be 01       	movw	r22, r28
    26f2:	67 5f       	subi	r22, 0xF7	; 247
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    26fa:	ce 01       	movw	r24, r28
    26fc:	05 96       	adiw	r24, 0x05	; 5
    26fe:	be 01       	movw	r22, r28
    2700:	6f 5e       	subi	r22, 0xEF	; 239
    2702:	7f 4f       	sbci	r23, 0xFF	; 255
    2704:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2708:	99 85       	ldd	r25, Y+9	; 0x09
    270a:	92 30       	cpi	r25, 0x02	; 2
    270c:	88 f0       	brcs	.+34     	; 0x2730 <__mulsf3+0x60>
    270e:	89 89       	ldd	r24, Y+17	; 0x11
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	c8 f0       	brcs	.+50     	; 0x2746 <__mulsf3+0x76>
    2714:	94 30       	cpi	r25, 0x04	; 4
    2716:	19 f4       	brne	.+6      	; 0x271e <__mulsf3+0x4e>
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	51 f4       	brne	.+20     	; 0x2730 <__mulsf3+0x60>
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <__mulsf3+0x56>
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	29 f4       	brne	.+10     	; 0x272c <__mulsf3+0x5c>
    2722:	92 30       	cpi	r25, 0x02	; 2
    2724:	81 f4       	brne	.+32     	; 0x2746 <__mulsf3+0x76>
    2726:	84 e0       	ldi	r24, 0x04	; 4
    2728:	92 e0       	ldi	r25, 0x02	; 2
    272a:	c6 c0       	rjmp	.+396    	; 0x28b8 <__mulsf3+0x1e8>
    272c:	92 30       	cpi	r25, 0x02	; 2
    272e:	49 f4       	brne	.+18     	; 0x2742 <__mulsf3+0x72>
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	8a 89       	ldd	r24, Y+18	; 0x12
    2736:	98 13       	cpse	r25, r24
    2738:	21 e0       	ldi	r18, 0x01	; 1
    273a:	2a 87       	std	Y+10, r18	; 0x0a
    273c:	ce 01       	movw	r24, r28
    273e:	09 96       	adiw	r24, 0x09	; 9
    2740:	bb c0       	rjmp	.+374    	; 0x28b8 <__mulsf3+0x1e8>
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	49 f4       	brne	.+18     	; 0x2758 <__mulsf3+0x88>
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	8a 89       	ldd	r24, Y+18	; 0x12
    274c:	98 13       	cpse	r25, r24
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	2a 8b       	std	Y+18, r18	; 0x12
    2752:	ce 01       	movw	r24, r28
    2754:	41 96       	adiw	r24, 0x11	; 17
    2756:	b0 c0       	rjmp	.+352    	; 0x28b8 <__mulsf3+0x1e8>
    2758:	2d 84       	ldd	r2, Y+13	; 0x0d
    275a:	3e 84       	ldd	r3, Y+14	; 0x0e
    275c:	4f 84       	ldd	r4, Y+15	; 0x0f
    275e:	58 88       	ldd	r5, Y+16	; 0x10
    2760:	6d 88       	ldd	r6, Y+21	; 0x15
    2762:	7e 88       	ldd	r7, Y+22	; 0x16
    2764:	8f 88       	ldd	r8, Y+23	; 0x17
    2766:	98 8c       	ldd	r9, Y+24	; 0x18
    2768:	ee 24       	eor	r14, r14
    276a:	ff 24       	eor	r15, r15
    276c:	87 01       	movw	r16, r14
    276e:	aa 24       	eor	r10, r10
    2770:	bb 24       	eor	r11, r11
    2772:	65 01       	movw	r12, r10
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	e0 e0       	ldi	r30, 0x00	; 0
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	c1 01       	movw	r24, r2
    2782:	81 70       	andi	r24, 0x01	; 1
    2784:	90 70       	andi	r25, 0x00	; 0
    2786:	89 2b       	or	r24, r25
    2788:	e9 f0       	breq	.+58     	; 0x27c4 <__mulsf3+0xf4>
    278a:	e6 0c       	add	r14, r6
    278c:	f7 1c       	adc	r15, r7
    278e:	08 1d       	adc	r16, r8
    2790:	19 1d       	adc	r17, r9
    2792:	9a 01       	movw	r18, r20
    2794:	ab 01       	movw	r20, r22
    2796:	2a 0d       	add	r18, r10
    2798:	3b 1d       	adc	r19, r11
    279a:	4c 1d       	adc	r20, r12
    279c:	5d 1d       	adc	r21, r13
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e6 14       	cp	r14, r6
    27a8:	f7 04       	cpc	r15, r7
    27aa:	08 05       	cpc	r16, r8
    27ac:	19 05       	cpc	r17, r9
    27ae:	20 f4       	brcc	.+8      	; 0x27b8 <__mulsf3+0xe8>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	ba 01       	movw	r22, r20
    27ba:	a9 01       	movw	r20, r18
    27bc:	48 0f       	add	r20, r24
    27be:	59 1f       	adc	r21, r25
    27c0:	6a 1f       	adc	r22, r26
    27c2:	7b 1f       	adc	r23, r27
    27c4:	aa 0c       	add	r10, r10
    27c6:	bb 1c       	adc	r11, r11
    27c8:	cc 1c       	adc	r12, r12
    27ca:	dd 1c       	adc	r13, r13
    27cc:	97 fe       	sbrs	r9, 7
    27ce:	08 c0       	rjmp	.+16     	; 0x27e0 <__mulsf3+0x110>
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	a0 e0       	ldi	r26, 0x00	; 0
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	a8 2a       	or	r10, r24
    27da:	b9 2a       	or	r11, r25
    27dc:	ca 2a       	or	r12, r26
    27de:	db 2a       	or	r13, r27
    27e0:	31 96       	adiw	r30, 0x01	; 1
    27e2:	e0 32       	cpi	r30, 0x20	; 32
    27e4:	f1 05       	cpc	r31, r1
    27e6:	49 f0       	breq	.+18     	; 0x27fa <__mulsf3+0x12a>
    27e8:	66 0c       	add	r6, r6
    27ea:	77 1c       	adc	r7, r7
    27ec:	88 1c       	adc	r8, r8
    27ee:	99 1c       	adc	r9, r9
    27f0:	56 94       	lsr	r5
    27f2:	47 94       	ror	r4
    27f4:	37 94       	ror	r3
    27f6:	27 94       	ror	r2
    27f8:	c3 cf       	rjmp	.-122    	; 0x2780 <__mulsf3+0xb0>
    27fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    27fc:	ea 89       	ldd	r30, Y+18	; 0x12
    27fe:	2b 89       	ldd	r18, Y+19	; 0x13
    2800:	3c 89       	ldd	r19, Y+20	; 0x14
    2802:	8b 85       	ldd	r24, Y+11	; 0x0b
    2804:	9c 85       	ldd	r25, Y+12	; 0x0c
    2806:	28 0f       	add	r18, r24
    2808:	39 1f       	adc	r19, r25
    280a:	2e 5f       	subi	r18, 0xFE	; 254
    280c:	3f 4f       	sbci	r19, 0xFF	; 255
    280e:	17 c0       	rjmp	.+46     	; 0x283e <__mulsf3+0x16e>
    2810:	ca 01       	movw	r24, r20
    2812:	81 70       	andi	r24, 0x01	; 1
    2814:	90 70       	andi	r25, 0x00	; 0
    2816:	89 2b       	or	r24, r25
    2818:	61 f0       	breq	.+24     	; 0x2832 <__mulsf3+0x162>
    281a:	16 95       	lsr	r17
    281c:	07 95       	ror	r16
    281e:	f7 94       	ror	r15
    2820:	e7 94       	ror	r14
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b0 e8       	ldi	r27, 0x80	; 128
    282a:	e8 2a       	or	r14, r24
    282c:	f9 2a       	or	r15, r25
    282e:	0a 2b       	or	r16, r26
    2830:	1b 2b       	or	r17, r27
    2832:	76 95       	lsr	r23
    2834:	67 95       	ror	r22
    2836:	57 95       	ror	r21
    2838:	47 95       	ror	r20
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	77 fd       	sbrc	r23, 7
    2840:	e7 cf       	rjmp	.-50     	; 0x2810 <__mulsf3+0x140>
    2842:	0c c0       	rjmp	.+24     	; 0x285c <__mulsf3+0x18c>
    2844:	44 0f       	add	r20, r20
    2846:	55 1f       	adc	r21, r21
    2848:	66 1f       	adc	r22, r22
    284a:	77 1f       	adc	r23, r23
    284c:	17 fd       	sbrc	r17, 7
    284e:	41 60       	ori	r20, 0x01	; 1
    2850:	ee 0c       	add	r14, r14
    2852:	ff 1c       	adc	r15, r15
    2854:	00 1f       	adc	r16, r16
    2856:	11 1f       	adc	r17, r17
    2858:	21 50       	subi	r18, 0x01	; 1
    285a:	30 40       	sbci	r19, 0x00	; 0
    285c:	40 30       	cpi	r20, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	59 07       	cpc	r21, r25
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	69 07       	cpc	r22, r25
    2866:	90 e4       	ldi	r25, 0x40	; 64
    2868:	79 07       	cpc	r23, r25
    286a:	60 f3       	brcs	.-40     	; 0x2844 <__mulsf3+0x174>
    286c:	2b 8f       	std	Y+27, r18	; 0x1b
    286e:	3c 8f       	std	Y+28, r19	; 0x1c
    2870:	db 01       	movw	r26, r22
    2872:	ca 01       	movw	r24, r20
    2874:	8f 77       	andi	r24, 0x7F	; 127
    2876:	90 70       	andi	r25, 0x00	; 0
    2878:	a0 70       	andi	r26, 0x00	; 0
    287a:	b0 70       	andi	r27, 0x00	; 0
    287c:	80 34       	cpi	r24, 0x40	; 64
    287e:	91 05       	cpc	r25, r1
    2880:	a1 05       	cpc	r26, r1
    2882:	b1 05       	cpc	r27, r1
    2884:	61 f4       	brne	.+24     	; 0x289e <__mulsf3+0x1ce>
    2886:	47 fd       	sbrc	r20, 7
    2888:	0a c0       	rjmp	.+20     	; 0x289e <__mulsf3+0x1ce>
    288a:	e1 14       	cp	r14, r1
    288c:	f1 04       	cpc	r15, r1
    288e:	01 05       	cpc	r16, r1
    2890:	11 05       	cpc	r17, r1
    2892:	29 f0       	breq	.+10     	; 0x289e <__mulsf3+0x1ce>
    2894:	40 5c       	subi	r20, 0xC0	; 192
    2896:	5f 4f       	sbci	r21, 0xFF	; 255
    2898:	6f 4f       	sbci	r22, 0xFF	; 255
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	40 78       	andi	r20, 0x80	; 128
    289e:	1a 8e       	std	Y+26, r1	; 0x1a
    28a0:	fe 17       	cp	r31, r30
    28a2:	11 f0       	breq	.+4      	; 0x28a8 <__mulsf3+0x1d8>
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	8a 8f       	std	Y+26, r24	; 0x1a
    28a8:	4d 8f       	std	Y+29, r20	; 0x1d
    28aa:	5e 8f       	std	Y+30, r21	; 0x1e
    28ac:	6f 8f       	std	Y+31, r22	; 0x1f
    28ae:	78 a3       	std	Y+32, r23	; 0x20
    28b0:	83 e0       	ldi	r24, 0x03	; 3
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	ce 01       	movw	r24, r28
    28b6:	49 96       	adiw	r24, 0x19	; 25
    28b8:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__pack_f>
    28bc:	a0 96       	adiw	r28, 0x20	; 32
    28be:	e2 e1       	ldi	r30, 0x12	; 18
    28c0:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__epilogue_restores__>

000028c4 <__gtsf2>:
    28c4:	a8 e1       	ldi	r26, 0x18	; 24
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e8 e6       	ldi	r30, 0x68	; 104
    28ca:	f4 e1       	ldi	r31, 0x14	; 20
    28cc:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
    28d0:	69 83       	std	Y+1, r22	; 0x01
    28d2:	7a 83       	std	Y+2, r23	; 0x02
    28d4:	8b 83       	std	Y+3, r24	; 0x03
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	2d 83       	std	Y+5, r18	; 0x05
    28da:	3e 83       	std	Y+6, r19	; 0x06
    28dc:	4f 83       	std	Y+7, r20	; 0x07
    28de:	58 87       	std	Y+8, r21	; 0x08
    28e0:	89 e0       	ldi	r24, 0x09	; 9
    28e2:	e8 2e       	mov	r14, r24
    28e4:	f1 2c       	mov	r15, r1
    28e6:	ec 0e       	add	r14, r28
    28e8:	fd 1e       	adc	r15, r29
    28ea:	ce 01       	movw	r24, r28
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	b7 01       	movw	r22, r14
    28f0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    28f4:	8e 01       	movw	r16, r28
    28f6:	0f 5e       	subi	r16, 0xEF	; 239
    28f8:	1f 4f       	sbci	r17, 0xFF	; 255
    28fa:	ce 01       	movw	r24, r28
    28fc:	05 96       	adiw	r24, 0x05	; 5
    28fe:	b8 01       	movw	r22, r16
    2900:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2904:	89 85       	ldd	r24, Y+9	; 0x09
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	40 f0       	brcs	.+16     	; 0x291a <__gtsf2+0x56>
    290a:	89 89       	ldd	r24, Y+17	; 0x11
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	28 f0       	brcs	.+10     	; 0x291a <__gtsf2+0x56>
    2910:	c7 01       	movw	r24, r14
    2912:	b8 01       	movw	r22, r16
    2914:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fpcmp_parts_f>
    2918:	01 c0       	rjmp	.+2      	; 0x291c <__gtsf2+0x58>
    291a:	8f ef       	ldi	r24, 0xFF	; 255
    291c:	68 96       	adiw	r28, 0x18	; 24
    291e:	e6 e0       	ldi	r30, 0x06	; 6
    2920:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

00002924 <__gesf2>:
    2924:	a8 e1       	ldi	r26, 0x18	; 24
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e8 e9       	ldi	r30, 0x98	; 152
    292a:	f4 e1       	ldi	r31, 0x14	; 20
    292c:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
    2930:	69 83       	std	Y+1, r22	; 0x01
    2932:	7a 83       	std	Y+2, r23	; 0x02
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	9c 83       	std	Y+4, r25	; 0x04
    2938:	2d 83       	std	Y+5, r18	; 0x05
    293a:	3e 83       	std	Y+6, r19	; 0x06
    293c:	4f 83       	std	Y+7, r20	; 0x07
    293e:	58 87       	std	Y+8, r21	; 0x08
    2940:	89 e0       	ldi	r24, 0x09	; 9
    2942:	e8 2e       	mov	r14, r24
    2944:	f1 2c       	mov	r15, r1
    2946:	ec 0e       	add	r14, r28
    2948:	fd 1e       	adc	r15, r29
    294a:	ce 01       	movw	r24, r28
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	b7 01       	movw	r22, r14
    2950:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2954:	8e 01       	movw	r16, r28
    2956:	0f 5e       	subi	r16, 0xEF	; 239
    2958:	1f 4f       	sbci	r17, 0xFF	; 255
    295a:	ce 01       	movw	r24, r28
    295c:	05 96       	adiw	r24, 0x05	; 5
    295e:	b8 01       	movw	r22, r16
    2960:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2964:	89 85       	ldd	r24, Y+9	; 0x09
    2966:	82 30       	cpi	r24, 0x02	; 2
    2968:	40 f0       	brcs	.+16     	; 0x297a <__gesf2+0x56>
    296a:	89 89       	ldd	r24, Y+17	; 0x11
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	28 f0       	brcs	.+10     	; 0x297a <__gesf2+0x56>
    2970:	c7 01       	movw	r24, r14
    2972:	b8 01       	movw	r22, r16
    2974:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fpcmp_parts_f>
    2978:	01 c0       	rjmp	.+2      	; 0x297c <__gesf2+0x58>
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	68 96       	adiw	r28, 0x18	; 24
    297e:	e6 e0       	ldi	r30, 0x06	; 6
    2980:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

00002984 <__ltsf2>:
    2984:	a8 e1       	ldi	r26, 0x18	; 24
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e8 ec       	ldi	r30, 0xC8	; 200
    298a:	f4 e1       	ldi	r31, 0x14	; 20
    298c:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__+0x18>
    2990:	69 83       	std	Y+1, r22	; 0x01
    2992:	7a 83       	std	Y+2, r23	; 0x02
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	2d 83       	std	Y+5, r18	; 0x05
    299a:	3e 83       	std	Y+6, r19	; 0x06
    299c:	4f 83       	std	Y+7, r20	; 0x07
    299e:	58 87       	std	Y+8, r21	; 0x08
    29a0:	89 e0       	ldi	r24, 0x09	; 9
    29a2:	e8 2e       	mov	r14, r24
    29a4:	f1 2c       	mov	r15, r1
    29a6:	ec 0e       	add	r14, r28
    29a8:	fd 1e       	adc	r15, r29
    29aa:	ce 01       	movw	r24, r28
    29ac:	01 96       	adiw	r24, 0x01	; 1
    29ae:	b7 01       	movw	r22, r14
    29b0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    29b4:	8e 01       	movw	r16, r28
    29b6:	0f 5e       	subi	r16, 0xEF	; 239
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	ce 01       	movw	r24, r28
    29bc:	05 96       	adiw	r24, 0x05	; 5
    29be:	b8 01       	movw	r22, r16
    29c0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	82 30       	cpi	r24, 0x02	; 2
    29c8:	40 f0       	brcs	.+16     	; 0x29da <__ltsf2+0x56>
    29ca:	89 89       	ldd	r24, Y+17	; 0x11
    29cc:	82 30       	cpi	r24, 0x02	; 2
    29ce:	28 f0       	brcs	.+10     	; 0x29da <__ltsf2+0x56>
    29d0:	c7 01       	movw	r24, r14
    29d2:	b8 01       	movw	r22, r16
    29d4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fpcmp_parts_f>
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <__ltsf2+0x58>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	68 96       	adiw	r28, 0x18	; 24
    29de:	e6 e0       	ldi	r30, 0x06	; 6
    29e0:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__+0x18>

000029e4 <__floatsisf>:
    29e4:	a8 e0       	ldi	r26, 0x08	; 8
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e8 ef       	ldi	r30, 0xF8	; 248
    29ea:	f4 e1       	ldi	r31, 0x14	; 20
    29ec:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__prologue_saves__+0x12>
    29f0:	9b 01       	movw	r18, r22
    29f2:	ac 01       	movw	r20, r24
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	da 01       	movw	r26, r20
    29fa:	c9 01       	movw	r24, r18
    29fc:	88 27       	eor	r24, r24
    29fe:	b7 fd       	sbrc	r27, 7
    2a00:	83 95       	inc	r24
    2a02:	99 27       	eor	r25, r25
    2a04:	aa 27       	eor	r26, r26
    2a06:	bb 27       	eor	r27, r27
    2a08:	b8 2e       	mov	r11, r24
    2a0a:	21 15       	cp	r18, r1
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	41 05       	cpc	r20, r1
    2a10:	51 05       	cpc	r21, r1
    2a12:	19 f4       	brne	.+6      	; 0x2a1a <__floatsisf+0x36>
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	89 83       	std	Y+1, r24	; 0x01
    2a18:	3a c0       	rjmp	.+116    	; 0x2a8e <__floatsisf+0xaa>
    2a1a:	88 23       	and	r24, r24
    2a1c:	a9 f0       	breq	.+42     	; 0x2a48 <__floatsisf+0x64>
    2a1e:	20 30       	cpi	r18, 0x00	; 0
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	38 07       	cpc	r19, r24
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	48 07       	cpc	r20, r24
    2a28:	80 e8       	ldi	r24, 0x80	; 128
    2a2a:	58 07       	cpc	r21, r24
    2a2c:	29 f4       	brne	.+10     	; 0x2a38 <__floatsisf+0x54>
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	9f ec       	ldi	r25, 0xCF	; 207
    2a36:	30 c0       	rjmp	.+96     	; 0x2a98 <__floatsisf+0xb4>
    2a38:	ee 24       	eor	r14, r14
    2a3a:	ff 24       	eor	r15, r15
    2a3c:	87 01       	movw	r16, r14
    2a3e:	e2 1a       	sub	r14, r18
    2a40:	f3 0a       	sbc	r15, r19
    2a42:	04 0b       	sbc	r16, r20
    2a44:	15 0b       	sbc	r17, r21
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <__floatsisf+0x68>
    2a48:	79 01       	movw	r14, r18
    2a4a:	8a 01       	movw	r16, r20
    2a4c:	8e e1       	ldi	r24, 0x1E	; 30
    2a4e:	c8 2e       	mov	r12, r24
    2a50:	d1 2c       	mov	r13, r1
    2a52:	dc 82       	std	Y+4, r13	; 0x04
    2a54:	cb 82       	std	Y+3, r12	; 0x03
    2a56:	ed 82       	std	Y+5, r14	; 0x05
    2a58:	fe 82       	std	Y+6, r15	; 0x06
    2a5a:	0f 83       	std	Y+7, r16	; 0x07
    2a5c:	18 87       	std	Y+8, r17	; 0x08
    2a5e:	c8 01       	movw	r24, r16
    2a60:	b7 01       	movw	r22, r14
    2a62:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__clzsi2>
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	18 16       	cp	r1, r24
    2a6a:	19 06       	cpc	r1, r25
    2a6c:	84 f4       	brge	.+32     	; 0x2a8e <__floatsisf+0xaa>
    2a6e:	08 2e       	mov	r0, r24
    2a70:	04 c0       	rjmp	.+8      	; 0x2a7a <__floatsisf+0x96>
    2a72:	ee 0c       	add	r14, r14
    2a74:	ff 1c       	adc	r15, r15
    2a76:	00 1f       	adc	r16, r16
    2a78:	11 1f       	adc	r17, r17
    2a7a:	0a 94       	dec	r0
    2a7c:	d2 f7       	brpl	.-12     	; 0x2a72 <__floatsisf+0x8e>
    2a7e:	ed 82       	std	Y+5, r14	; 0x05
    2a80:	fe 82       	std	Y+6, r15	; 0x06
    2a82:	0f 83       	std	Y+7, r16	; 0x07
    2a84:	18 87       	std	Y+8, r17	; 0x08
    2a86:	c8 1a       	sub	r12, r24
    2a88:	d9 0a       	sbc	r13, r25
    2a8a:	dc 82       	std	Y+4, r13	; 0x04
    2a8c:	cb 82       	std	Y+3, r12	; 0x03
    2a8e:	ba 82       	std	Y+2, r11	; 0x02
    2a90:	ce 01       	movw	r24, r28
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__pack_f>
    2a98:	28 96       	adiw	r28, 0x08	; 8
    2a9a:	e9 e0       	ldi	r30, 0x09	; 9
    2a9c:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__epilogue_restores__+0x12>

00002aa0 <__fixsfsi>:
    2aa0:	ac e0       	ldi	r26, 0x0C	; 12
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e6 e5       	ldi	r30, 0x56	; 86
    2aa6:	f5 e1       	ldi	r31, 0x15	; 21
    2aa8:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__prologue_saves__+0x20>
    2aac:	69 83       	std	Y+1, r22	; 0x01
    2aae:	7a 83       	std	Y+2, r23	; 0x02
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
    2ab2:	9c 83       	std	Y+4, r25	; 0x04
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	be 01       	movw	r22, r28
    2aba:	6b 5f       	subi	r22, 0xFB	; 251
    2abc:	7f 4f       	sbci	r23, 0xFF	; 255
    2abe:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__unpack_f>
    2ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	61 f1       	breq	.+88     	; 0x2b20 <__fixsfsi+0x80>
    2ac8:	82 30       	cpi	r24, 0x02	; 2
    2aca:	50 f1       	brcs	.+84     	; 0x2b20 <__fixsfsi+0x80>
    2acc:	84 30       	cpi	r24, 0x04	; 4
    2ace:	21 f4       	brne	.+8      	; 0x2ad8 <__fixsfsi+0x38>
    2ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad2:	88 23       	and	r24, r24
    2ad4:	51 f1       	breq	.+84     	; 0x2b2a <__fixsfsi+0x8a>
    2ad6:	2e c0       	rjmp	.+92     	; 0x2b34 <__fixsfsi+0x94>
    2ad8:	2f 81       	ldd	r18, Y+7	; 0x07
    2ada:	38 85       	ldd	r19, Y+8	; 0x08
    2adc:	37 fd       	sbrc	r19, 7
    2ade:	20 c0       	rjmp	.+64     	; 0x2b20 <__fixsfsi+0x80>
    2ae0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ae2:	2f 31       	cpi	r18, 0x1F	; 31
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	1c f0       	brlt	.+6      	; 0x2aee <__fixsfsi+0x4e>
    2ae8:	66 23       	and	r22, r22
    2aea:	f9 f0       	breq	.+62     	; 0x2b2a <__fixsfsi+0x8a>
    2aec:	23 c0       	rjmp	.+70     	; 0x2b34 <__fixsfsi+0x94>
    2aee:	8e e1       	ldi	r24, 0x1E	; 30
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	82 1b       	sub	r24, r18
    2af4:	93 0b       	sbc	r25, r19
    2af6:	29 85       	ldd	r18, Y+9	; 0x09
    2af8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2afa:	4b 85       	ldd	r20, Y+11	; 0x0b
    2afc:	5c 85       	ldd	r21, Y+12	; 0x0c
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <__fixsfsi+0x68>
    2b00:	56 95       	lsr	r21
    2b02:	47 95       	ror	r20
    2b04:	37 95       	ror	r19
    2b06:	27 95       	ror	r18
    2b08:	8a 95       	dec	r24
    2b0a:	d2 f7       	brpl	.-12     	; 0x2b00 <__fixsfsi+0x60>
    2b0c:	66 23       	and	r22, r22
    2b0e:	b1 f0       	breq	.+44     	; 0x2b3c <__fixsfsi+0x9c>
    2b10:	50 95       	com	r21
    2b12:	40 95       	com	r20
    2b14:	30 95       	com	r19
    2b16:	21 95       	neg	r18
    2b18:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1a:	4f 4f       	sbci	r20, 0xFF	; 255
    2b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1e:	0e c0       	rjmp	.+28     	; 0x2b3c <__fixsfsi+0x9c>
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <__fixsfsi+0x9c>
    2b2a:	2f ef       	ldi	r18, 0xFF	; 255
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f ef       	ldi	r20, 0xFF	; 255
    2b30:	5f e7       	ldi	r21, 0x7F	; 127
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <__fixsfsi+0x9c>
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e8       	ldi	r21, 0x80	; 128
    2b3c:	b9 01       	movw	r22, r18
    2b3e:	ca 01       	movw	r24, r20
    2b40:	2c 96       	adiw	r28, 0x0c	; 12
    2b42:	e2 e0       	ldi	r30, 0x02	; 2
    2b44:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__epilogue_restores__+0x20>

00002b48 <__clzsi2>:
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	7b 01       	movw	r14, r22
    2b52:	8c 01       	movw	r16, r24
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	e8 16       	cp	r14, r24
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	f8 06       	cpc	r15, r24
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	08 07       	cpc	r16, r24
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	18 07       	cpc	r17, r24
    2b64:	88 f4       	brcc	.+34     	; 0x2b88 <__clzsi2+0x40>
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	e8 16       	cp	r14, r24
    2b6a:	f1 04       	cpc	r15, r1
    2b6c:	01 05       	cpc	r16, r1
    2b6e:	11 05       	cpc	r17, r1
    2b70:	31 f0       	breq	.+12     	; 0x2b7e <__clzsi2+0x36>
    2b72:	28 f0       	brcs	.+10     	; 0x2b7e <__clzsi2+0x36>
    2b74:	88 e0       	ldi	r24, 0x08	; 8
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e0       	ldi	r26, 0x00	; 0
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	17 c0       	rjmp	.+46     	; 0x2bac <__clzsi2+0x64>
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a0 e0       	ldi	r26, 0x00	; 0
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	12 c0       	rjmp	.+36     	; 0x2bac <__clzsi2+0x64>
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	e8 16       	cp	r14, r24
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	f8 06       	cpc	r15, r24
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	08 07       	cpc	r16, r24
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	18 07       	cpc	r17, r24
    2b98:	28 f0       	brcs	.+10     	; 0x2ba4 <__clzsi2+0x5c>
    2b9a:	88 e1       	ldi	r24, 0x18	; 24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	04 c0       	rjmp	.+8      	; 0x2bac <__clzsi2+0x64>
    2ba4:	80 e1       	ldi	r24, 0x10	; 16
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	20 e2       	ldi	r18, 0x20	; 32
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	28 1b       	sub	r18, r24
    2bb6:	39 0b       	sbc	r19, r25
    2bb8:	4a 0b       	sbc	r20, r26
    2bba:	5b 0b       	sbc	r21, r27
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <__clzsi2+0x7e>
    2bbe:	16 95       	lsr	r17
    2bc0:	07 95       	ror	r16
    2bc2:	f7 94       	ror	r15
    2bc4:	e7 94       	ror	r14
    2bc6:	8a 95       	dec	r24
    2bc8:	d2 f7       	brpl	.-12     	; 0x2bbe <__clzsi2+0x76>
    2bca:	f7 01       	movw	r30, r14
    2bcc:	e4 5f       	subi	r30, 0xF4	; 244
    2bce:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd0:	80 81       	ld	r24, Z
    2bd2:	28 1b       	sub	r18, r24
    2bd4:	31 09       	sbc	r19, r1
    2bd6:	41 09       	sbc	r20, r1
    2bd8:	51 09       	sbc	r21, r1
    2bda:	c9 01       	movw	r24, r18
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ff 90       	pop	r15
    2be2:	ef 90       	pop	r14
    2be4:	08 95       	ret

00002be6 <__pack_f>:
    2be6:	df 92       	push	r13
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e4 80       	ldd	r14, Z+4	; 0x04
    2bf4:	f5 80       	ldd	r15, Z+5	; 0x05
    2bf6:	06 81       	ldd	r16, Z+6	; 0x06
    2bf8:	17 81       	ldd	r17, Z+7	; 0x07
    2bfa:	d1 80       	ldd	r13, Z+1	; 0x01
    2bfc:	80 81       	ld	r24, Z
    2bfe:	82 30       	cpi	r24, 0x02	; 2
    2c00:	48 f4       	brcc	.+18     	; 0x2c14 <__pack_f+0x2e>
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a0 e1       	ldi	r26, 0x10	; 16
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e8 2a       	or	r14, r24
    2c0c:	f9 2a       	or	r15, r25
    2c0e:	0a 2b       	or	r16, r26
    2c10:	1b 2b       	or	r17, r27
    2c12:	a5 c0       	rjmp	.+330    	; 0x2d5e <__pack_f+0x178>
    2c14:	84 30       	cpi	r24, 0x04	; 4
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <__pack_f+0x34>
    2c18:	9f c0       	rjmp	.+318    	; 0x2d58 <__pack_f+0x172>
    2c1a:	82 30       	cpi	r24, 0x02	; 2
    2c1c:	21 f4       	brne	.+8      	; 0x2c26 <__pack_f+0x40>
    2c1e:	ee 24       	eor	r14, r14
    2c20:	ff 24       	eor	r15, r15
    2c22:	87 01       	movw	r16, r14
    2c24:	05 c0       	rjmp	.+10     	; 0x2c30 <__pack_f+0x4a>
    2c26:	e1 14       	cp	r14, r1
    2c28:	f1 04       	cpc	r15, r1
    2c2a:	01 05       	cpc	r16, r1
    2c2c:	11 05       	cpc	r17, r1
    2c2e:	19 f4       	brne	.+6      	; 0x2c36 <__pack_f+0x50>
    2c30:	e0 e0       	ldi	r30, 0x00	; 0
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	96 c0       	rjmp	.+300    	; 0x2d62 <__pack_f+0x17c>
    2c36:	62 81       	ldd	r22, Z+2	; 0x02
    2c38:	73 81       	ldd	r23, Z+3	; 0x03
    2c3a:	9f ef       	ldi	r25, 0xFF	; 255
    2c3c:	62 38       	cpi	r22, 0x82	; 130
    2c3e:	79 07       	cpc	r23, r25
    2c40:	0c f0       	brlt	.+2      	; 0x2c44 <__pack_f+0x5e>
    2c42:	5b c0       	rjmp	.+182    	; 0x2cfa <__pack_f+0x114>
    2c44:	22 e8       	ldi	r18, 0x82	; 130
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	26 1b       	sub	r18, r22
    2c4a:	37 0b       	sbc	r19, r23
    2c4c:	2a 31       	cpi	r18, 0x1A	; 26
    2c4e:	31 05       	cpc	r19, r1
    2c50:	2c f0       	brlt	.+10     	; 0x2c5c <__pack_f+0x76>
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	2a c0       	rjmp	.+84     	; 0x2cb0 <__pack_f+0xca>
    2c5c:	b8 01       	movw	r22, r16
    2c5e:	a7 01       	movw	r20, r14
    2c60:	02 2e       	mov	r0, r18
    2c62:	04 c0       	rjmp	.+8      	; 0x2c6c <__pack_f+0x86>
    2c64:	76 95       	lsr	r23
    2c66:	67 95       	ror	r22
    2c68:	57 95       	ror	r21
    2c6a:	47 95       	ror	r20
    2c6c:	0a 94       	dec	r0
    2c6e:	d2 f7       	brpl	.-12     	; 0x2c64 <__pack_f+0x7e>
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a0 e0       	ldi	r26, 0x00	; 0
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	04 c0       	rjmp	.+8      	; 0x2c82 <__pack_f+0x9c>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	aa 1f       	adc	r26, r26
    2c80:	bb 1f       	adc	r27, r27
    2c82:	2a 95       	dec	r18
    2c84:	d2 f7       	brpl	.-12     	; 0x2c7a <__pack_f+0x94>
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	a1 09       	sbc	r26, r1
    2c8a:	b1 09       	sbc	r27, r1
    2c8c:	8e 21       	and	r24, r14
    2c8e:	9f 21       	and	r25, r15
    2c90:	a0 23       	and	r26, r16
    2c92:	b1 23       	and	r27, r17
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	a1 05       	cpc	r26, r1
    2c98:	b1 05       	cpc	r27, r1
    2c9a:	21 f0       	breq	.+8      	; 0x2ca4 <__pack_f+0xbe>
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e0       	ldi	r26, 0x00	; 0
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	9a 01       	movw	r18, r20
    2ca6:	ab 01       	movw	r20, r22
    2ca8:	28 2b       	or	r18, r24
    2caa:	39 2b       	or	r19, r25
    2cac:	4a 2b       	or	r20, r26
    2cae:	5b 2b       	or	r21, r27
    2cb0:	da 01       	movw	r26, r20
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	8f 77       	andi	r24, 0x7F	; 127
    2cb6:	90 70       	andi	r25, 0x00	; 0
    2cb8:	a0 70       	andi	r26, 0x00	; 0
    2cba:	b0 70       	andi	r27, 0x00	; 0
    2cbc:	80 34       	cpi	r24, 0x40	; 64
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	a1 05       	cpc	r26, r1
    2cc2:	b1 05       	cpc	r27, r1
    2cc4:	39 f4       	brne	.+14     	; 0x2cd4 <__pack_f+0xee>
    2cc6:	27 ff       	sbrs	r18, 7
    2cc8:	09 c0       	rjmp	.+18     	; 0x2cdc <__pack_f+0xf6>
    2cca:	20 5c       	subi	r18, 0xC0	; 192
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	4f 4f       	sbci	r20, 0xFF	; 255
    2cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd2:	04 c0       	rjmp	.+8      	; 0x2cdc <__pack_f+0xf6>
    2cd4:	21 5c       	subi	r18, 0xC1	; 193
    2cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cda:	5f 4f       	sbci	r21, 0xFF	; 255
    2cdc:	e0 e0       	ldi	r30, 0x00	; 0
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	20 30       	cpi	r18, 0x00	; 0
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	3a 07       	cpc	r19, r26
    2ce6:	a0 e0       	ldi	r26, 0x00	; 0
    2ce8:	4a 07       	cpc	r20, r26
    2cea:	a0 e4       	ldi	r26, 0x40	; 64
    2cec:	5a 07       	cpc	r21, r26
    2cee:	10 f0       	brcs	.+4      	; 0x2cf4 <__pack_f+0x10e>
    2cf0:	e1 e0       	ldi	r30, 0x01	; 1
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	79 01       	movw	r14, r18
    2cf6:	8a 01       	movw	r16, r20
    2cf8:	27 c0       	rjmp	.+78     	; 0x2d48 <__pack_f+0x162>
    2cfa:	60 38       	cpi	r22, 0x80	; 128
    2cfc:	71 05       	cpc	r23, r1
    2cfe:	64 f5       	brge	.+88     	; 0x2d58 <__pack_f+0x172>
    2d00:	fb 01       	movw	r30, r22
    2d02:	e1 58       	subi	r30, 0x81	; 129
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	d8 01       	movw	r26, r16
    2d08:	c7 01       	movw	r24, r14
    2d0a:	8f 77       	andi	r24, 0x7F	; 127
    2d0c:	90 70       	andi	r25, 0x00	; 0
    2d0e:	a0 70       	andi	r26, 0x00	; 0
    2d10:	b0 70       	andi	r27, 0x00	; 0
    2d12:	80 34       	cpi	r24, 0x40	; 64
    2d14:	91 05       	cpc	r25, r1
    2d16:	a1 05       	cpc	r26, r1
    2d18:	b1 05       	cpc	r27, r1
    2d1a:	39 f4       	brne	.+14     	; 0x2d2a <__pack_f+0x144>
    2d1c:	e7 fe       	sbrs	r14, 7
    2d1e:	0d c0       	rjmp	.+26     	; 0x2d3a <__pack_f+0x154>
    2d20:	80 e4       	ldi	r24, 0x40	; 64
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 e0       	ldi	r26, 0x00	; 0
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <__pack_f+0x14c>
    2d2a:	8f e3       	ldi	r24, 0x3F	; 63
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	a0 e0       	ldi	r26, 0x00	; 0
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e8 0e       	add	r14, r24
    2d34:	f9 1e       	adc	r15, r25
    2d36:	0a 1f       	adc	r16, r26
    2d38:	1b 1f       	adc	r17, r27
    2d3a:	17 ff       	sbrs	r17, 7
    2d3c:	05 c0       	rjmp	.+10     	; 0x2d48 <__pack_f+0x162>
    2d3e:	16 95       	lsr	r17
    2d40:	07 95       	ror	r16
    2d42:	f7 94       	ror	r15
    2d44:	e7 94       	ror	r14
    2d46:	31 96       	adiw	r30, 0x01	; 1
    2d48:	87 e0       	ldi	r24, 0x07	; 7
    2d4a:	16 95       	lsr	r17
    2d4c:	07 95       	ror	r16
    2d4e:	f7 94       	ror	r15
    2d50:	e7 94       	ror	r14
    2d52:	8a 95       	dec	r24
    2d54:	d1 f7       	brne	.-12     	; 0x2d4a <__pack_f+0x164>
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <__pack_f+0x17c>
    2d58:	ee 24       	eor	r14, r14
    2d5a:	ff 24       	eor	r15, r15
    2d5c:	87 01       	movw	r16, r14
    2d5e:	ef ef       	ldi	r30, 0xFF	; 255
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	6e 2f       	mov	r22, r30
    2d64:	67 95       	ror	r22
    2d66:	66 27       	eor	r22, r22
    2d68:	67 95       	ror	r22
    2d6a:	90 2f       	mov	r25, r16
    2d6c:	9f 77       	andi	r25, 0x7F	; 127
    2d6e:	d7 94       	ror	r13
    2d70:	dd 24       	eor	r13, r13
    2d72:	d7 94       	ror	r13
    2d74:	8e 2f       	mov	r24, r30
    2d76:	86 95       	lsr	r24
    2d78:	49 2f       	mov	r20, r25
    2d7a:	46 2b       	or	r20, r22
    2d7c:	58 2f       	mov	r21, r24
    2d7e:	5d 29       	or	r21, r13
    2d80:	b7 01       	movw	r22, r14
    2d82:	ca 01       	movw	r24, r20
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	ff 90       	pop	r15
    2d8a:	ef 90       	pop	r14
    2d8c:	df 90       	pop	r13
    2d8e:	08 95       	ret

00002d90 <__unpack_f>:
    2d90:	fc 01       	movw	r30, r24
    2d92:	db 01       	movw	r26, r22
    2d94:	40 81       	ld	r20, Z
    2d96:	51 81       	ldd	r21, Z+1	; 0x01
    2d98:	22 81       	ldd	r18, Z+2	; 0x02
    2d9a:	62 2f       	mov	r22, r18
    2d9c:	6f 77       	andi	r22, 0x7F	; 127
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	22 1f       	adc	r18, r18
    2da2:	22 27       	eor	r18, r18
    2da4:	22 1f       	adc	r18, r18
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	89 2f       	mov	r24, r25
    2daa:	88 0f       	add	r24, r24
    2dac:	82 2b       	or	r24, r18
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	99 1f       	adc	r25, r25
    2db4:	99 27       	eor	r25, r25
    2db6:	99 1f       	adc	r25, r25
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	9c 93       	st	X, r25
    2dbc:	11 97       	sbiw	r26, 0x01	; 1
    2dbe:	21 15       	cp	r18, r1
    2dc0:	31 05       	cpc	r19, r1
    2dc2:	a9 f5       	brne	.+106    	; 0x2e2e <__unpack_f+0x9e>
    2dc4:	41 15       	cp	r20, r1
    2dc6:	51 05       	cpc	r21, r1
    2dc8:	61 05       	cpc	r22, r1
    2dca:	71 05       	cpc	r23, r1
    2dcc:	11 f4       	brne	.+4      	; 0x2dd2 <__unpack_f+0x42>
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	37 c0       	rjmp	.+110    	; 0x2e40 <__unpack_f+0xb0>
    2dd2:	82 e8       	ldi	r24, 0x82	; 130
    2dd4:	9f ef       	ldi	r25, 0xFF	; 255
    2dd6:	13 96       	adiw	r26, 0x03	; 3
    2dd8:	9c 93       	st	X, r25
    2dda:	8e 93       	st	-X, r24
    2ddc:	12 97       	sbiw	r26, 0x02	; 2
    2dde:	9a 01       	movw	r18, r20
    2de0:	ab 01       	movw	r20, r22
    2de2:	67 e0       	ldi	r22, 0x07	; 7
    2de4:	22 0f       	add	r18, r18
    2de6:	33 1f       	adc	r19, r19
    2de8:	44 1f       	adc	r20, r20
    2dea:	55 1f       	adc	r21, r21
    2dec:	6a 95       	dec	r22
    2dee:	d1 f7       	brne	.-12     	; 0x2de4 <__unpack_f+0x54>
    2df0:	83 e0       	ldi	r24, 0x03	; 3
    2df2:	8c 93       	st	X, r24
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <__unpack_f+0x80>
    2df6:	22 0f       	add	r18, r18
    2df8:	33 1f       	adc	r19, r19
    2dfa:	44 1f       	adc	r20, r20
    2dfc:	55 1f       	adc	r21, r21
    2dfe:	12 96       	adiw	r26, 0x02	; 2
    2e00:	8d 91       	ld	r24, X+
    2e02:	9c 91       	ld	r25, X
    2e04:	13 97       	sbiw	r26, 0x03	; 3
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	13 96       	adiw	r26, 0x03	; 3
    2e0a:	9c 93       	st	X, r25
    2e0c:	8e 93       	st	-X, r24
    2e0e:	12 97       	sbiw	r26, 0x02	; 2
    2e10:	20 30       	cpi	r18, 0x00	; 0
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	38 07       	cpc	r19, r24
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	48 07       	cpc	r20, r24
    2e1a:	80 e4       	ldi	r24, 0x40	; 64
    2e1c:	58 07       	cpc	r21, r24
    2e1e:	58 f3       	brcs	.-42     	; 0x2df6 <__unpack_f+0x66>
    2e20:	14 96       	adiw	r26, 0x04	; 4
    2e22:	2d 93       	st	X+, r18
    2e24:	3d 93       	st	X+, r19
    2e26:	4d 93       	st	X+, r20
    2e28:	5c 93       	st	X, r21
    2e2a:	17 97       	sbiw	r26, 0x07	; 7
    2e2c:	08 95       	ret
    2e2e:	2f 3f       	cpi	r18, 0xFF	; 255
    2e30:	31 05       	cpc	r19, r1
    2e32:	79 f4       	brne	.+30     	; 0x2e52 <__unpack_f+0xc2>
    2e34:	41 15       	cp	r20, r1
    2e36:	51 05       	cpc	r21, r1
    2e38:	61 05       	cpc	r22, r1
    2e3a:	71 05       	cpc	r23, r1
    2e3c:	19 f4       	brne	.+6      	; 0x2e44 <__unpack_f+0xb4>
    2e3e:	84 e0       	ldi	r24, 0x04	; 4
    2e40:	8c 93       	st	X, r24
    2e42:	08 95       	ret
    2e44:	64 ff       	sbrs	r22, 4
    2e46:	03 c0       	rjmp	.+6      	; 0x2e4e <__unpack_f+0xbe>
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	8c 93       	st	X, r24
    2e4c:	12 c0       	rjmp	.+36     	; 0x2e72 <__unpack_f+0xe2>
    2e4e:	1c 92       	st	X, r1
    2e50:	10 c0       	rjmp	.+32     	; 0x2e72 <__unpack_f+0xe2>
    2e52:	2f 57       	subi	r18, 0x7F	; 127
    2e54:	30 40       	sbci	r19, 0x00	; 0
    2e56:	13 96       	adiw	r26, 0x03	; 3
    2e58:	3c 93       	st	X, r19
    2e5a:	2e 93       	st	-X, r18
    2e5c:	12 97       	sbiw	r26, 0x02	; 2
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	8c 93       	st	X, r24
    2e62:	87 e0       	ldi	r24, 0x07	; 7
    2e64:	44 0f       	add	r20, r20
    2e66:	55 1f       	adc	r21, r21
    2e68:	66 1f       	adc	r22, r22
    2e6a:	77 1f       	adc	r23, r23
    2e6c:	8a 95       	dec	r24
    2e6e:	d1 f7       	brne	.-12     	; 0x2e64 <__unpack_f+0xd4>
    2e70:	70 64       	ori	r23, 0x40	; 64
    2e72:	14 96       	adiw	r26, 0x04	; 4
    2e74:	4d 93       	st	X+, r20
    2e76:	5d 93       	st	X+, r21
    2e78:	6d 93       	st	X+, r22
    2e7a:	7c 93       	st	X, r23
    2e7c:	17 97       	sbiw	r26, 0x07	; 7
    2e7e:	08 95       	ret

00002e80 <__fpcmp_parts_f>:
    2e80:	1f 93       	push	r17
    2e82:	dc 01       	movw	r26, r24
    2e84:	fb 01       	movw	r30, r22
    2e86:	9c 91       	ld	r25, X
    2e88:	92 30       	cpi	r25, 0x02	; 2
    2e8a:	08 f4       	brcc	.+2      	; 0x2e8e <__fpcmp_parts_f+0xe>
    2e8c:	47 c0       	rjmp	.+142    	; 0x2f1c <__fpcmp_parts_f+0x9c>
    2e8e:	80 81       	ld	r24, Z
    2e90:	82 30       	cpi	r24, 0x02	; 2
    2e92:	08 f4       	brcc	.+2      	; 0x2e96 <__fpcmp_parts_f+0x16>
    2e94:	43 c0       	rjmp	.+134    	; 0x2f1c <__fpcmp_parts_f+0x9c>
    2e96:	94 30       	cpi	r25, 0x04	; 4
    2e98:	51 f4       	brne	.+20     	; 0x2eae <__fpcmp_parts_f+0x2e>
    2e9a:	11 96       	adiw	r26, 0x01	; 1
    2e9c:	1c 91       	ld	r17, X
    2e9e:	84 30       	cpi	r24, 0x04	; 4
    2ea0:	99 f5       	brne	.+102    	; 0x2f08 <__fpcmp_parts_f+0x88>
    2ea2:	81 81       	ldd	r24, Z+1	; 0x01
    2ea4:	68 2f       	mov	r22, r24
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	61 1b       	sub	r22, r17
    2eaa:	71 09       	sbc	r23, r1
    2eac:	3f c0       	rjmp	.+126    	; 0x2f2c <__fpcmp_parts_f+0xac>
    2eae:	84 30       	cpi	r24, 0x04	; 4
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <__fpcmp_parts_f+0x3a>
    2eb2:	92 30       	cpi	r25, 0x02	; 2
    2eb4:	31 f4       	brne	.+12     	; 0x2ec2 <__fpcmp_parts_f+0x42>
    2eb6:	82 30       	cpi	r24, 0x02	; 2
    2eb8:	b9 f1       	breq	.+110    	; 0x2f28 <__fpcmp_parts_f+0xa8>
    2eba:	81 81       	ldd	r24, Z+1	; 0x01
    2ebc:	88 23       	and	r24, r24
    2ebe:	89 f1       	breq	.+98     	; 0x2f22 <__fpcmp_parts_f+0xa2>
    2ec0:	2d c0       	rjmp	.+90     	; 0x2f1c <__fpcmp_parts_f+0x9c>
    2ec2:	11 96       	adiw	r26, 0x01	; 1
    2ec4:	1c 91       	ld	r17, X
    2ec6:	11 97       	sbiw	r26, 0x01	; 1
    2ec8:	82 30       	cpi	r24, 0x02	; 2
    2eca:	f1 f0       	breq	.+60     	; 0x2f08 <__fpcmp_parts_f+0x88>
    2ecc:	81 81       	ldd	r24, Z+1	; 0x01
    2ece:	18 17       	cp	r17, r24
    2ed0:	d9 f4       	brne	.+54     	; 0x2f08 <__fpcmp_parts_f+0x88>
    2ed2:	12 96       	adiw	r26, 0x02	; 2
    2ed4:	2d 91       	ld	r18, X+
    2ed6:	3c 91       	ld	r19, X
    2ed8:	13 97       	sbiw	r26, 0x03	; 3
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	82 17       	cp	r24, r18
    2ee0:	93 07       	cpc	r25, r19
    2ee2:	94 f0       	brlt	.+36     	; 0x2f08 <__fpcmp_parts_f+0x88>
    2ee4:	28 17       	cp	r18, r24
    2ee6:	39 07       	cpc	r19, r25
    2ee8:	bc f0       	brlt	.+46     	; 0x2f18 <__fpcmp_parts_f+0x98>
    2eea:	14 96       	adiw	r26, 0x04	; 4
    2eec:	8d 91       	ld	r24, X+
    2eee:	9d 91       	ld	r25, X+
    2ef0:	0d 90       	ld	r0, X+
    2ef2:	bc 91       	ld	r27, X
    2ef4:	a0 2d       	mov	r26, r0
    2ef6:	24 81       	ldd	r18, Z+4	; 0x04
    2ef8:	35 81       	ldd	r19, Z+5	; 0x05
    2efa:	46 81       	ldd	r20, Z+6	; 0x06
    2efc:	57 81       	ldd	r21, Z+7	; 0x07
    2efe:	28 17       	cp	r18, r24
    2f00:	39 07       	cpc	r19, r25
    2f02:	4a 07       	cpc	r20, r26
    2f04:	5b 07       	cpc	r21, r27
    2f06:	18 f4       	brcc	.+6      	; 0x2f0e <__fpcmp_parts_f+0x8e>
    2f08:	11 23       	and	r17, r17
    2f0a:	41 f0       	breq	.+16     	; 0x2f1c <__fpcmp_parts_f+0x9c>
    2f0c:	0a c0       	rjmp	.+20     	; 0x2f22 <__fpcmp_parts_f+0xa2>
    2f0e:	82 17       	cp	r24, r18
    2f10:	93 07       	cpc	r25, r19
    2f12:	a4 07       	cpc	r26, r20
    2f14:	b5 07       	cpc	r27, r21
    2f16:	40 f4       	brcc	.+16     	; 0x2f28 <__fpcmp_parts_f+0xa8>
    2f18:	11 23       	and	r17, r17
    2f1a:	19 f0       	breq	.+6      	; 0x2f22 <__fpcmp_parts_f+0xa2>
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	05 c0       	rjmp	.+10     	; 0x2f2c <__fpcmp_parts_f+0xac>
    2f22:	6f ef       	ldi	r22, 0xFF	; 255
    2f24:	7f ef       	ldi	r23, 0xFF	; 255
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <__fpcmp_parts_f+0xac>
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	70 e0       	ldi	r23, 0x00	; 0
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	1f 91       	pop	r17
    2f30:	08 95       	ret

00002f32 <atol>:
    2f32:	1f 93       	push	r17
    2f34:	fc 01       	movw	r30, r24
    2f36:	99 27       	eor	r25, r25
    2f38:	88 27       	eor	r24, r24
    2f3a:	bc 01       	movw	r22, r24
    2f3c:	e8 94       	clt
    2f3e:	11 91       	ld	r17, Z+
    2f40:	10 32       	cpi	r17, 0x20	; 32
    2f42:	e9 f3       	breq	.-6      	; 0x2f3e <atol+0xc>
    2f44:	19 30       	cpi	r17, 0x09	; 9
    2f46:	10 f0       	brcs	.+4      	; 0x2f4c <atol+0x1a>
    2f48:	1e 30       	cpi	r17, 0x0E	; 14
    2f4a:	c8 f3       	brcs	.-14     	; 0x2f3e <atol+0xc>
    2f4c:	1b 32       	cpi	r17, 0x2B	; 43
    2f4e:	51 f0       	breq	.+20     	; 0x2f64 <atol+0x32>
    2f50:	1d 32       	cpi	r17, 0x2D	; 45
    2f52:	49 f4       	brne	.+18     	; 0x2f66 <atol+0x34>
    2f54:	68 94       	set
    2f56:	06 c0       	rjmp	.+12     	; 0x2f64 <atol+0x32>
    2f58:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__mulsi_const_10>
    2f5c:	61 0f       	add	r22, r17
    2f5e:	71 1d       	adc	r23, r1
    2f60:	81 1d       	adc	r24, r1
    2f62:	91 1d       	adc	r25, r1
    2f64:	11 91       	ld	r17, Z+
    2f66:	10 53       	subi	r17, 0x30	; 48
    2f68:	1a 30       	cpi	r17, 0x0A	; 10
    2f6a:	b0 f3       	brcs	.-20     	; 0x2f58 <atol+0x26>
    2f6c:	3e f4       	brtc	.+14     	; 0x2f7c <atol+0x4a>
    2f6e:	90 95       	com	r25
    2f70:	80 95       	com	r24
    2f72:	70 95       	com	r23
    2f74:	61 95       	neg	r22
    2f76:	7f 4f       	sbci	r23, 0xFF	; 255
    2f78:	8f 4f       	sbci	r24, 0xFF	; 255
    2f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7c:	1f 91       	pop	r17
    2f7e:	08 95       	ret

00002f80 <memcpy>:
    2f80:	fb 01       	movw	r30, r22
    2f82:	dc 01       	movw	r26, r24
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <memcpy+0xa>
    2f86:	01 90       	ld	r0, Z+
    2f88:	0d 92       	st	X+, r0
    2f8a:	41 50       	subi	r20, 0x01	; 1
    2f8c:	50 40       	sbci	r21, 0x00	; 0
    2f8e:	d8 f7       	brcc	.-10     	; 0x2f86 <memcpy+0x6>
    2f90:	08 95       	ret

00002f92 <__mulsi_const_10>:
    2f92:	59 2f       	mov	r21, r25
    2f94:	48 2f       	mov	r20, r24
    2f96:	37 2f       	mov	r19, r23
    2f98:	26 2f       	mov	r18, r22
    2f9a:	66 0f       	add	r22, r22
    2f9c:	77 1f       	adc	r23, r23
    2f9e:	88 1f       	adc	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	66 0f       	add	r22, r22
    2fa4:	77 1f       	adc	r23, r23
    2fa6:	88 1f       	adc	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	62 0f       	add	r22, r18
    2fac:	73 1f       	adc	r23, r19
    2fae:	84 1f       	adc	r24, r20
    2fb0:	95 1f       	adc	r25, r21
    2fb2:	66 0f       	add	r22, r22
    2fb4:	77 1f       	adc	r23, r23
    2fb6:	88 1f       	adc	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	08 95       	ret

00002fbc <__prologue_saves__>:
    2fbc:	2f 92       	push	r2
    2fbe:	3f 92       	push	r3
    2fc0:	4f 92       	push	r4
    2fc2:	5f 92       	push	r5
    2fc4:	6f 92       	push	r6
    2fc6:	7f 92       	push	r7
    2fc8:	8f 92       	push	r8
    2fca:	9f 92       	push	r9
    2fcc:	af 92       	push	r10
    2fce:	bf 92       	push	r11
    2fd0:	cf 92       	push	r12
    2fd2:	df 92       	push	r13
    2fd4:	ef 92       	push	r14
    2fd6:	ff 92       	push	r15
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	ca 1b       	sub	r28, r26
    2fe6:	db 0b       	sbc	r29, r27
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	09 94       	ijmp

00002ff4 <__epilogue_restores__>:
    2ff4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ff6:	39 88       	ldd	r3, Y+17	; 0x11
    2ff8:	48 88       	ldd	r4, Y+16	; 0x10
    2ffa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ffc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ffe:	7d 84       	ldd	r7, Y+13	; 0x0d
    3000:	8c 84       	ldd	r8, Y+12	; 0x0c
    3002:	9b 84       	ldd	r9, Y+11	; 0x0b
    3004:	aa 84       	ldd	r10, Y+10	; 0x0a
    3006:	b9 84       	ldd	r11, Y+9	; 0x09
    3008:	c8 84       	ldd	r12, Y+8	; 0x08
    300a:	df 80       	ldd	r13, Y+7	; 0x07
    300c:	ee 80       	ldd	r14, Y+6	; 0x06
    300e:	fd 80       	ldd	r15, Y+5	; 0x05
    3010:	0c 81       	ldd	r16, Y+4	; 0x04
    3012:	1b 81       	ldd	r17, Y+3	; 0x03
    3014:	aa 81       	ldd	r26, Y+2	; 0x02
    3016:	b9 81       	ldd	r27, Y+1	; 0x01
    3018:	ce 0f       	add	r28, r30
    301a:	d1 1d       	adc	r29, r1
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	ed 01       	movw	r28, r26
    3028:	08 95       	ret

0000302a <fmin>:
    302a:	99 0f       	add	r25, r25
    302c:	bb 0b       	sbc	r27, r27
    302e:	55 0f       	add	r21, r21
    3030:	aa 0b       	sbc	r26, r26
    3032:	e0 e8       	ldi	r30, 0x80	; 128
    3034:	fe ef       	ldi	r31, 0xFE	; 254
    3036:	16 16       	cp	r1, r22
    3038:	17 06       	cpc	r1, r23
    303a:	e8 07       	cpc	r30, r24
    303c:	f9 07       	cpc	r31, r25
    303e:	70 f0       	brcs	.+28     	; 0x305c <fmin+0x32>
    3040:	12 16       	cp	r1, r18
    3042:	13 06       	cpc	r1, r19
    3044:	e4 07       	cpc	r30, r20
    3046:	f5 07       	cpc	r31, r21
    3048:	60 f0       	brcs	.+24     	; 0x3062 <fmin+0x38>
    304a:	ba 17       	cp	r27, r26
    304c:	54 f0       	brlt	.+20     	; 0x3062 <fmin+0x38>
    304e:	31 f4       	brne	.+12     	; 0x305c <fmin+0x32>
    3050:	26 17       	cp	r18, r22
    3052:	37 07       	cpc	r19, r23
    3054:	48 07       	cpc	r20, r24
    3056:	59 07       	cpc	r21, r25
    3058:	a7 95       	ror	r26
    305a:	1b f4       	brvc	.+6      	; 0x3062 <fmin+0x38>
    305c:	b9 01       	movw	r22, r18
    305e:	ca 01       	movw	r24, r20
    3060:	ba 2f       	mov	r27, r26
    3062:	b6 95       	lsr	r27
    3064:	97 95       	ror	r25
    3066:	08 95       	ret

00003068 <_exit>:
    3068:	f8 94       	cli

0000306a <__stop_program>:
    306a:	ff cf       	rjmp	.-2      	; 0x306a <__stop_program>
